/* automatically generated by rust-bindgen 0.55.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 9;
pub const __GLIBCXX__: u32 = 20200408;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
pub const STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_HOSTED: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INT128: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const VULKAN_H_: u32 = 1;
pub const VULKAN_CORE_H_: u32 = 1;
pub const VK_VERSION_1_0: u32 = 1;
pub const VK_HEADER_VERSION: u32 = 148;
pub const VK_NULL_HANDLE: u32 = 0;
pub const VK_ATTACHMENT_UNUSED: i32 = -1;
pub const VK_FALSE: u32 = 0;
pub const VK_LOD_CLAMP_NONE: f64 = 1000.0;
pub const VK_QUEUE_FAMILY_IGNORED: i32 = -1;
pub const VK_REMAINING_ARRAY_LAYERS: i32 = -1;
pub const VK_REMAINING_MIP_LEVELS: i32 = -1;
pub const VK_SUBPASS_EXTERNAL: i32 = -1;
pub const VK_TRUE: u32 = 1;
pub const VK_WHOLE_SIZE: i32 = -1;
pub const VK_MAX_MEMORY_TYPES: u32 = 32;
pub const VK_MAX_MEMORY_HEAPS: u32 = 16;
pub const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE: u32 = 256;
pub const VK_UUID_SIZE: u32 = 16;
pub const VK_MAX_EXTENSION_NAME_SIZE: u32 = 256;
pub const VK_MAX_DESCRIPTION_SIZE: u32 = 256;
pub const VK_VERSION_1_1: u32 = 1;
pub const VK_MAX_DEVICE_GROUP_SIZE: u32 = 32;
pub const VK_LUID_SIZE: u32 = 8;
pub const VK_QUEUE_FAMILY_EXTERNAL: i32 = -2;
pub const VK_VERSION_1_2: u32 = 1;
pub const VK_MAX_DRIVER_NAME_SIZE: u32 = 256;
pub const VK_MAX_DRIVER_INFO_SIZE: u32 = 256;
pub const VK_KHR_surface: u32 = 1;
pub const VK_KHR_SURFACE_SPEC_VERSION: u32 = 25;
pub const VK_KHR_SURFACE_EXTENSION_NAME: &'static [u8; 15usize] = b"VK_KHR_surface\0";
pub const VK_KHR_swapchain: u32 = 1;
pub const VK_KHR_SWAPCHAIN_SPEC_VERSION: u32 = 70;
pub const VK_KHR_SWAPCHAIN_EXTENSION_NAME: &'static [u8; 17usize] = b"VK_KHR_swapchain\0";
pub const VK_KHR_display: u32 = 1;
pub const VK_KHR_DISPLAY_SPEC_VERSION: u32 = 23;
pub const VK_KHR_DISPLAY_EXTENSION_NAME: &'static [u8; 15usize] = b"VK_KHR_display\0";
pub const VK_KHR_display_swapchain: u32 = 1;
pub const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION: u32 = 10;
pub const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME: &'static [u8; 25usize] =
    b"VK_KHR_display_swapchain\0";
pub const VK_KHR_sampler_mirror_clamp_to_edge: u32 = 1;
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION: u32 = 3;
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME: &'static [u8; 36usize] =
    b"VK_KHR_sampler_mirror_clamp_to_edge\0";
pub const VK_KHR_multiview: u32 = 1;
pub const VK_KHR_MULTIVIEW_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MULTIVIEW_EXTENSION_NAME: &'static [u8; 17usize] = b"VK_KHR_multiview\0";
pub const VK_KHR_get_physical_device_properties2: u32 = 1;
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION: u32 = 2;
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME: &'static [u8; 39usize] =
    b"VK_KHR_get_physical_device_properties2\0";
pub const VK_KHR_device_group: u32 = 1;
pub const VK_KHR_DEVICE_GROUP_SPEC_VERSION: u32 = 4;
pub const VK_KHR_DEVICE_GROUP_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_KHR_device_group\0";
pub const VK_KHR_shader_draw_parameters: u32 = 1;
pub const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME: &'static [u8; 30usize] =
    b"VK_KHR_shader_draw_parameters\0";
pub const VK_KHR_maintenance1: u32 = 1;
pub const VK_KHR_MAINTENANCE1_SPEC_VERSION: u32 = 2;
pub const VK_KHR_MAINTENANCE1_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_KHR_maintenance1\0";
pub const VK_KHR_device_group_creation: u32 = 1;
pub const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_KHR_device_group_creation\0";
pub const VK_MAX_DEVICE_GROUP_SIZE_KHR: u32 = 32;
pub const VK_KHR_external_memory_capabilities: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: &'static [u8; 36usize] =
    b"VK_KHR_external_memory_capabilities\0";
pub const VK_LUID_SIZE_KHR: u32 = 8;
pub const VK_KHR_external_memory: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME: &'static [u8; 23usize] =
    b"VK_KHR_external_memory\0";
pub const VK_QUEUE_FAMILY_EXTERNAL_KHR: i32 = -2;
pub const VK_KHR_external_memory_fd: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME: &'static [u8; 26usize] =
    b"VK_KHR_external_memory_fd\0";
pub const VK_KHR_external_semaphore_capabilities: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME: &'static [u8; 39usize] =
    b"VK_KHR_external_semaphore_capabilities\0";
pub const VK_KHR_external_semaphore: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME: &'static [u8; 26usize] =
    b"VK_KHR_external_semaphore\0";
pub const VK_KHR_external_semaphore_fd: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_KHR_external_semaphore_fd\0";
pub const VK_KHR_push_descriptor: u32 = 1;
pub const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION: u32 = 2;
pub const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME: &'static [u8; 23usize] =
    b"VK_KHR_push_descriptor\0";
pub const VK_KHR_shader_float16_int8: u32 = 1;
pub const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_KHR_shader_float16_int8\0";
pub const VK_KHR_16bit_storage: u32 = 1;
pub const VK_KHR_16BIT_STORAGE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_16BIT_STORAGE_EXTENSION_NAME: &'static [u8; 21usize] = b"VK_KHR_16bit_storage\0";
pub const VK_KHR_incremental_present: u32 = 1;
pub const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_KHR_incremental_present\0";
pub const VK_KHR_descriptor_update_template: u32 = 1;
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME: &'static [u8; 34usize] =
    b"VK_KHR_descriptor_update_template\0";
pub const VK_KHR_imageless_framebuffer: u32 = 1;
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION: u32 = 1;
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_KHR_imageless_framebuffer\0";
pub const VK_KHR_create_renderpass2: u32 = 1;
pub const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME: &'static [u8; 26usize] =
    b"VK_KHR_create_renderpass2\0";
pub const VK_KHR_shared_presentable_image: u32 = 1;
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME: &'static [u8; 32usize] =
    b"VK_KHR_shared_presentable_image\0";
pub const VK_KHR_external_fence_capabilities: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME: &'static [u8; 35usize] =
    b"VK_KHR_external_fence_capabilities\0";
pub const VK_KHR_external_fence: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME: &'static [u8; 22usize] = b"VK_KHR_external_fence\0";
pub const VK_KHR_external_fence_fd: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME: &'static [u8; 25usize] =
    b"VK_KHR_external_fence_fd\0";
pub const VK_KHR_performance_query: u32 = 1;
pub const VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME: &'static [u8; 25usize] =
    b"VK_KHR_performance_query\0";
pub const VK_KHR_maintenance2: u32 = 1;
pub const VK_KHR_MAINTENANCE2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE2_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_KHR_maintenance2\0";
pub const VK_KHR_get_surface_capabilities2: u32 = 1;
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME: &'static [u8; 33usize] =
    b"VK_KHR_get_surface_capabilities2\0";
pub const VK_KHR_variable_pointers: u32 = 1;
pub const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME: &'static [u8; 25usize] =
    b"VK_KHR_variable_pointers\0";
pub const VK_KHR_get_display_properties2: u32 = 1;
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME: &'static [u8; 31usize] =
    b"VK_KHR_get_display_properties2\0";
pub const VK_KHR_dedicated_allocation: u32 = 1;
pub const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION: u32 = 3;
pub const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME: &'static [u8; 28usize] =
    b"VK_KHR_dedicated_allocation\0";
pub const VK_KHR_storage_buffer_storage_class: u32 = 1;
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME: &'static [u8; 36usize] =
    b"VK_KHR_storage_buffer_storage_class\0";
pub const VK_KHR_relaxed_block_layout: u32 = 1;
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME: &'static [u8; 28usize] =
    b"VK_KHR_relaxed_block_layout\0";
pub const VK_KHR_get_memory_requirements2: u32 = 1;
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME: &'static [u8; 32usize] =
    b"VK_KHR_get_memory_requirements2\0";
pub const VK_KHR_image_format_list: u32 = 1;
pub const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION: u32 = 1;
pub const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME: &'static [u8; 25usize] =
    b"VK_KHR_image_format_list\0";
pub const VK_KHR_sampler_ycbcr_conversion: u32 = 1;
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION: u32 = 14;
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME: &'static [u8; 32usize] =
    b"VK_KHR_sampler_ycbcr_conversion\0";
pub const VK_KHR_bind_memory2: u32 = 1;
pub const VK_KHR_BIND_MEMORY_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_KHR_bind_memory2\0";
pub const VK_KHR_maintenance3: u32 = 1;
pub const VK_KHR_MAINTENANCE3_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE3_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_KHR_maintenance3\0";
pub const VK_KHR_draw_indirect_count: u32 = 1;
pub const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_KHR_draw_indirect_count\0";
pub const VK_KHR_shader_subgroup_extended_types: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME: &'static [u8; 38usize] =
    b"VK_KHR_shader_subgroup_extended_types\0";
pub const VK_KHR_8bit_storage: u32 = 1;
pub const VK_KHR_8BIT_STORAGE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_8BIT_STORAGE_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_KHR_8bit_storage\0";
pub const VK_KHR_shader_atomic_int64: u32 = 1;
pub const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_KHR_shader_atomic_int64\0";
pub const VK_KHR_shader_clock: u32 = 1;
pub const VK_KHR_SHADER_CLOCK_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_CLOCK_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_KHR_shader_clock\0";
pub const VK_KHR_driver_properties: u32 = 1;
pub const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME: &'static [u8; 25usize] =
    b"VK_KHR_driver_properties\0";
pub const VK_MAX_DRIVER_NAME_SIZE_KHR: u32 = 256;
pub const VK_MAX_DRIVER_INFO_SIZE_KHR: u32 = 256;
pub const VK_KHR_shader_float_controls: u32 = 1;
pub const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION: u32 = 4;
pub const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_KHR_shader_float_controls\0";
pub const VK_KHR_depth_stencil_resolve: u32 = 1;
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_KHR_depth_stencil_resolve\0";
pub const VK_KHR_swapchain_mutable_format: u32 = 1;
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME: &'static [u8; 32usize] =
    b"VK_KHR_swapchain_mutable_format\0";
pub const VK_KHR_timeline_semaphore: u32 = 1;
pub const VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION: u32 = 2;
pub const VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME: &'static [u8; 26usize] =
    b"VK_KHR_timeline_semaphore\0";
pub const VK_KHR_vulkan_memory_model: u32 = 1;
pub const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION: u32 = 3;
pub const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_KHR_vulkan_memory_model\0";
pub const VK_KHR_spirv_1_4: u32 = 1;
pub const VK_KHR_SPIRV_1_4_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SPIRV_1_4_EXTENSION_NAME: &'static [u8; 17usize] = b"VK_KHR_spirv_1_4\0";
pub const VK_KHR_surface_protected_capabilities: u32 = 1;
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME: &'static [u8; 38usize] =
    b"VK_KHR_surface_protected_capabilities\0";
pub const VK_KHR_separate_depth_stencil_layouts: u32 = 1;
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME: &'static [u8; 38usize] =
    b"VK_KHR_separate_depth_stencil_layouts\0";
pub const VK_KHR_uniform_buffer_standard_layout: u32 = 1;
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME: &'static [u8; 38usize] =
    b"VK_KHR_uniform_buffer_standard_layout\0";
pub const VK_KHR_buffer_device_address: u32 = 1;
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_KHR_buffer_device_address\0";
pub const VK_KHR_pipeline_executable_properties: u32 = 1;
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME: &'static [u8; 38usize] =
    b"VK_KHR_pipeline_executable_properties\0";
pub const VK_KHR_shader_non_semantic_info: u32 = 1;
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME: &'static [u8; 32usize] =
    b"VK_KHR_shader_non_semantic_info\0";
pub const VK_EXT_debug_report: u32 = 1;
pub const VK_EXT_DEBUG_REPORT_SPEC_VERSION: u32 = 9;
pub const VK_EXT_DEBUG_REPORT_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_EXT_debug_report\0";
pub const VK_NV_glsl_shader: u32 = 1;
pub const VK_NV_GLSL_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_NV_GLSL_SHADER_EXTENSION_NAME: &'static [u8; 18usize] = b"VK_NV_glsl_shader\0";
pub const VK_EXT_depth_range_unrestricted: u32 = 1;
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME: &'static [u8; 32usize] =
    b"VK_EXT_depth_range_unrestricted\0";
pub const VK_IMG_filter_cubic: u32 = 1;
pub const VK_IMG_FILTER_CUBIC_SPEC_VERSION: u32 = 1;
pub const VK_IMG_FILTER_CUBIC_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_IMG_filter_cubic\0";
pub const VK_AMD_rasterization_order: u32 = 1;
pub const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_AMD_rasterization_order\0";
pub const VK_AMD_shader_trinary_minmax: u32 = 1;
pub const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_AMD_shader_trinary_minmax\0";
pub const VK_AMD_shader_explicit_vertex_parameter: u32 = 1;
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME: &'static [u8; 40usize] =
    b"VK_AMD_shader_explicit_vertex_parameter\0";
pub const VK_EXT_debug_marker: u32 = 1;
pub const VK_EXT_DEBUG_MARKER_SPEC_VERSION: u32 = 4;
pub const VK_EXT_DEBUG_MARKER_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_EXT_debug_marker\0";
pub const VK_AMD_gcn_shader: u32 = 1;
pub const VK_AMD_GCN_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_GCN_SHADER_EXTENSION_NAME: &'static [u8; 18usize] = b"VK_AMD_gcn_shader\0";
pub const VK_NV_dedicated_allocation: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_NV_dedicated_allocation\0";
pub const VK_EXT_transform_feedback: u32 = 1;
pub const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME: &'static [u8; 26usize] =
    b"VK_EXT_transform_feedback\0";
pub const VK_NVX_image_view_handle: u32 = 1;
pub const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION: u32 = 2;
pub const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME: &'static [u8; 25usize] =
    b"VK_NVX_image_view_handle\0";
pub const VK_AMD_draw_indirect_count: u32 = 1;
pub const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION: u32 = 2;
pub const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_AMD_draw_indirect_count\0";
pub const VK_AMD_negative_viewport_height: u32 = 1;
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION: u32 = 1;
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME: &'static [u8; 32usize] =
    b"VK_AMD_negative_viewport_height\0";
pub const VK_AMD_gpu_shader_half_float: u32 = 1;
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION: u32 = 2;
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_AMD_gpu_shader_half_float\0";
pub const VK_AMD_shader_ballot: u32 = 1;
pub const VK_AMD_SHADER_BALLOT_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_BALLOT_EXTENSION_NAME: &'static [u8; 21usize] = b"VK_AMD_shader_ballot\0";
pub const VK_AMD_texture_gather_bias_lod: u32 = 1;
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION: u32 = 1;
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME: &'static [u8; 31usize] =
    b"VK_AMD_texture_gather_bias_lod\0";
pub const VK_AMD_shader_info: u32 = 1;
pub const VK_AMD_SHADER_INFO_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_INFO_EXTENSION_NAME: &'static [u8; 19usize] = b"VK_AMD_shader_info\0";
pub const VK_AMD_shader_image_load_store_lod: u32 = 1;
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME: &'static [u8; 35usize] =
    b"VK_AMD_shader_image_load_store_lod\0";
pub const VK_NV_corner_sampled_image: u32 = 1;
pub const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION: u32 = 2;
pub const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_NV_corner_sampled_image\0";
pub const VK_IMG_format_pvrtc: u32 = 1;
pub const VK_IMG_FORMAT_PVRTC_SPEC_VERSION: u32 = 1;
pub const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_IMG_format_pvrtc\0";
pub const VK_NV_external_memory_capabilities: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: &'static [u8; 35usize] =
    b"VK_NV_external_memory_capabilities\0";
pub const VK_NV_external_memory: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME: &'static [u8; 22usize] = b"VK_NV_external_memory\0";
pub const VK_EXT_validation_flags: u32 = 1;
pub const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME: &'static [u8; 24usize] =
    b"VK_EXT_validation_flags\0";
pub const VK_EXT_shader_subgroup_ballot: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME: &'static [u8; 30usize] =
    b"VK_EXT_shader_subgroup_ballot\0";
pub const VK_EXT_shader_subgroup_vote: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME: &'static [u8; 28usize] =
    b"VK_EXT_shader_subgroup_vote\0";
pub const VK_EXT_texture_compression_astc_hdr: u32 = 1;
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME: &'static [u8; 36usize] =
    b"VK_EXT_texture_compression_astc_hdr\0";
pub const VK_EXT_astc_decode_mode: u32 = 1;
pub const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME: &'static [u8; 24usize] =
    b"VK_EXT_astc_decode_mode\0";
pub const VK_EXT_conditional_rendering: u32 = 1;
pub const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION: u32 = 2;
pub const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_EXT_conditional_rendering\0";
pub const VK_NV_clip_space_w_scaling: u32 = 1;
pub const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION: u32 = 1;
pub const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_NV_clip_space_w_scaling\0";
pub const VK_EXT_direct_mode_display: u32 = 1;
pub const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_EXT_direct_mode_display\0";
pub const VK_EXT_display_surface_counter: u32 = 1;
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME: &'static [u8; 31usize] =
    b"VK_EXT_display_surface_counter\0";
pub const VK_EXT_display_control: u32 = 1;
pub const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME: &'static [u8; 23usize] =
    b"VK_EXT_display_control\0";
pub const VK_GOOGLE_display_timing: u32 = 1;
pub const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME: &'static [u8; 25usize] =
    b"VK_GOOGLE_display_timing\0";
pub const VK_NV_sample_mask_override_coverage: u32 = 1;
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION: u32 = 1;
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME: &'static [u8; 36usize] =
    b"VK_NV_sample_mask_override_coverage\0";
pub const VK_NV_geometry_shader_passthrough: u32 = 1;
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION: u32 = 1;
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME: &'static [u8; 34usize] =
    b"VK_NV_geometry_shader_passthrough\0";
pub const VK_NV_viewport_array2: u32 = 1;
pub const VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION: u32 = 1;
pub const VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME: &'static [u8; 22usize] = b"VK_NV_viewport_array2\0";
pub const VK_NVX_multiview_per_view_attributes: u32 = 1;
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION: u32 = 1;
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME: &'static [u8; 37usize] =
    b"VK_NVX_multiview_per_view_attributes\0";
pub const VK_NV_viewport_swizzle: u32 = 1;
pub const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION: u32 = 1;
pub const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME: &'static [u8; 23usize] =
    b"VK_NV_viewport_swizzle\0";
pub const VK_EXT_discard_rectangles: u32 = 1;
pub const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME: &'static [u8; 26usize] =
    b"VK_EXT_discard_rectangles\0";
pub const VK_EXT_conservative_rasterization: u32 = 1;
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION: u32 = 1;
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME: &'static [u8; 34usize] =
    b"VK_EXT_conservative_rasterization\0";
pub const VK_EXT_depth_clip_enable: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME: &'static [u8; 25usize] =
    b"VK_EXT_depth_clip_enable\0";
pub const VK_EXT_swapchain_colorspace: u32 = 1;
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION: u32 = 4;
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME: &'static [u8; 28usize] =
    b"VK_EXT_swapchain_colorspace\0";
pub const VK_EXT_hdr_metadata: u32 = 1;
pub const VK_EXT_HDR_METADATA_SPEC_VERSION: u32 = 2;
pub const VK_EXT_HDR_METADATA_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_EXT_hdr_metadata\0";
pub const VK_EXT_external_memory_dma_buf: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME: &'static [u8; 31usize] =
    b"VK_EXT_external_memory_dma_buf\0";
pub const VK_EXT_queue_family_foreign: u32 = 1;
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION: u32 = 1;
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME: &'static [u8; 28usize] =
    b"VK_EXT_queue_family_foreign\0";
pub const VK_QUEUE_FAMILY_FOREIGN_EXT: i32 = -3;
pub const VK_EXT_debug_utils: u32 = 1;
pub const VK_EXT_DEBUG_UTILS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DEBUG_UTILS_EXTENSION_NAME: &'static [u8; 19usize] = b"VK_EXT_debug_utils\0";
pub const VK_EXT_sampler_filter_minmax: u32 = 1;
pub const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION: u32 = 2;
pub const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_EXT_sampler_filter_minmax\0";
pub const VK_AMD_gpu_shader_int16: u32 = 1;
pub const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION: u32 = 2;
pub const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME: &'static [u8; 24usize] =
    b"VK_AMD_gpu_shader_int16\0";
pub const VK_AMD_mixed_attachment_samples: u32 = 1;
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION: u32 = 1;
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME: &'static [u8; 32usize] =
    b"VK_AMD_mixed_attachment_samples\0";
pub const VK_AMD_shader_fragment_mask: u32 = 1;
pub const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME: &'static [u8; 28usize] =
    b"VK_AMD_shader_fragment_mask\0";
pub const VK_EXT_inline_uniform_block: u32 = 1;
pub const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME: &'static [u8; 28usize] =
    b"VK_EXT_inline_uniform_block\0";
pub const VK_EXT_shader_stencil_export: u32 = 1;
pub const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_EXT_shader_stencil_export\0";
pub const VK_EXT_sample_locations: u32 = 1;
pub const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME: &'static [u8; 24usize] =
    b"VK_EXT_sample_locations\0";
pub const VK_EXT_blend_operation_advanced: u32 = 1;
pub const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION: u32 = 2;
pub const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME: &'static [u8; 32usize] =
    b"VK_EXT_blend_operation_advanced\0";
pub const VK_NV_fragment_coverage_to_color: u32 = 1;
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME: &'static [u8; 33usize] =
    b"VK_NV_fragment_coverage_to_color\0";
pub const VK_NV_framebuffer_mixed_samples: u32 = 1;
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME: &'static [u8; 32usize] =
    b"VK_NV_framebuffer_mixed_samples\0";
pub const VK_NV_fill_rectangle: u32 = 1;
pub const VK_NV_FILL_RECTANGLE_SPEC_VERSION: u32 = 1;
pub const VK_NV_FILL_RECTANGLE_EXTENSION_NAME: &'static [u8; 21usize] = b"VK_NV_fill_rectangle\0";
pub const VK_NV_shader_sm_builtins: u32 = 1;
pub const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION: u32 = 1;
pub const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME: &'static [u8; 25usize] =
    b"VK_NV_shader_sm_builtins\0";
pub const VK_EXT_post_depth_coverage: u32 = 1;
pub const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_EXT_post_depth_coverage\0";
pub const VK_EXT_image_drm_format_modifier: u32 = 1;
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME: &'static [u8; 33usize] =
    b"VK_EXT_image_drm_format_modifier\0";
pub const VK_EXT_validation_cache: u32 = 1;
pub const VK_EXT_VALIDATION_CACHE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME: &'static [u8; 24usize] =
    b"VK_EXT_validation_cache\0";
pub const VK_EXT_descriptor_indexing: u32 = 1;
pub const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_EXT_descriptor_indexing\0";
pub const VK_EXT_shader_viewport_index_layer: u32 = 1;
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME: &'static [u8; 35usize] =
    b"VK_EXT_shader_viewport_index_layer\0";
pub const VK_NV_shading_rate_image: u32 = 1;
pub const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION: u32 = 3;
pub const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME: &'static [u8; 25usize] =
    b"VK_NV_shading_rate_image\0";
pub const VK_NV_ray_tracing: u32 = 1;
pub const VK_NV_RAY_TRACING_SPEC_VERSION: u32 = 3;
pub const VK_NV_RAY_TRACING_EXTENSION_NAME: &'static [u8; 18usize] = b"VK_NV_ray_tracing\0";
pub const VK_SHADER_UNUSED_KHR: i32 = -1;
pub const VK_SHADER_UNUSED_NV: i32 = -1;
pub const VK_NV_representative_fragment_test: u32 = 1;
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION: u32 = 2;
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME: &'static [u8; 35usize] =
    b"VK_NV_representative_fragment_test\0";
pub const VK_EXT_filter_cubic: u32 = 1;
pub const VK_EXT_FILTER_CUBIC_SPEC_VERSION: u32 = 3;
pub const VK_EXT_FILTER_CUBIC_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_EXT_filter_cubic\0";
pub const VK_QCOM_render_pass_shader_resolve: u32 = 1;
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION: u32 = 4;
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME: &'static [u8; 35usize] =
    b"VK_QCOM_render_pass_shader_resolve\0";
pub const VK_EXT_global_priority: u32 = 1;
pub const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION: u32 = 2;
pub const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME: &'static [u8; 23usize] =
    b"VK_EXT_global_priority\0";
pub const VK_EXT_external_memory_host: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME: &'static [u8; 28usize] =
    b"VK_EXT_external_memory_host\0";
pub const VK_AMD_buffer_marker: u32 = 1;
pub const VK_AMD_BUFFER_MARKER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_BUFFER_MARKER_EXTENSION_NAME: &'static [u8; 21usize] = b"VK_AMD_buffer_marker\0";
pub const VK_AMD_pipeline_compiler_control: u32 = 1;
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME: &'static [u8; 33usize] =
    b"VK_AMD_pipeline_compiler_control\0";
pub const VK_EXT_calibrated_timestamps: u32 = 1;
pub const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_EXT_calibrated_timestamps\0";
pub const VK_AMD_shader_core_properties: u32 = 1;
pub const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION: u32 = 2;
pub const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME: &'static [u8; 30usize] =
    b"VK_AMD_shader_core_properties\0";
pub const VK_AMD_memory_overallocation_behavior: u32 = 1;
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION: u32 = 1;
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME: &'static [u8; 38usize] =
    b"VK_AMD_memory_overallocation_behavior\0";
pub const VK_EXT_vertex_attribute_divisor: u32 = 1;
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION: u32 = 3;
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME: &'static [u8; 32usize] =
    b"VK_EXT_vertex_attribute_divisor\0";
pub const VK_EXT_pipeline_creation_feedback: u32 = 1;
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME: &'static [u8; 34usize] =
    b"VK_EXT_pipeline_creation_feedback\0";
pub const VK_NV_shader_subgroup_partitioned: u32 = 1;
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION: u32 = 1;
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME: &'static [u8; 34usize] =
    b"VK_NV_shader_subgroup_partitioned\0";
pub const VK_NV_compute_shader_derivatives: u32 = 1;
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION: u32 = 1;
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME: &'static [u8; 33usize] =
    b"VK_NV_compute_shader_derivatives\0";
pub const VK_NV_mesh_shader: u32 = 1;
pub const VK_NV_MESH_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_NV_MESH_SHADER_EXTENSION_NAME: &'static [u8; 18usize] = b"VK_NV_mesh_shader\0";
pub const VK_NV_fragment_shader_barycentric: u32 = 1;
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME: &'static [u8; 34usize] =
    b"VK_NV_fragment_shader_barycentric\0";
pub const VK_NV_shader_image_footprint: u32 = 1;
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION: u32 = 2;
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_NV_shader_image_footprint\0";
pub const VK_NV_scissor_exclusive: u32 = 1;
pub const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION: u32 = 1;
pub const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME: &'static [u8; 24usize] =
    b"VK_NV_scissor_exclusive\0";
pub const VK_NV_device_diagnostic_checkpoints: u32 = 1;
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION: u32 = 2;
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME: &'static [u8; 36usize] =
    b"VK_NV_device_diagnostic_checkpoints\0";
pub const VK_INTEL_shader_integer_functions2: u32 = 1;
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION: u32 = 1;
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME: &'static [u8; 35usize] =
    b"VK_INTEL_shader_integer_functions2\0";
pub const VK_INTEL_performance_query: u32 = 1;
pub const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION: u32 = 2;
pub const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_INTEL_performance_query\0";
pub const VK_EXT_pci_bus_info: u32 = 1;
pub const VK_EXT_PCI_BUS_INFO_SPEC_VERSION: u32 = 2;
pub const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_EXT_pci_bus_info\0";
pub const VK_AMD_display_native_hdr: u32 = 1;
pub const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION: u32 = 1;
pub const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME: &'static [u8; 26usize] =
    b"VK_AMD_display_native_hdr\0";
pub const VK_EXT_fragment_density_map: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME: &'static [u8; 28usize] =
    b"VK_EXT_fragment_density_map\0";
pub const VK_EXT_scalar_block_layout: u32 = 1;
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_EXT_scalar_block_layout\0";
pub const VK_GOOGLE_hlsl_functionality1: u32 = 1;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME: &'static [u8; 30usize] =
    b"VK_GOOGLE_hlsl_functionality1\0";
pub const VK_GOOGLE_decorate_string: u32 = 1;
pub const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME: &'static [u8; 26usize] =
    b"VK_GOOGLE_decorate_string\0";
pub const VK_EXT_subgroup_size_control: u32 = 1;
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION: u32 = 2;
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_EXT_subgroup_size_control\0";
pub const VK_AMD_shader_core_properties2: u32 = 1;
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME: &'static [u8; 31usize] =
    b"VK_AMD_shader_core_properties2\0";
pub const VK_AMD_device_coherent_memory: u32 = 1;
pub const VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME: &'static [u8; 30usize] =
    b"VK_AMD_device_coherent_memory\0";
pub const VK_EXT_memory_budget: u32 = 1;
pub const VK_EXT_MEMORY_BUDGET_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME: &'static [u8; 21usize] = b"VK_EXT_memory_budget\0";
pub const VK_EXT_memory_priority: u32 = 1;
pub const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME: &'static [u8; 23usize] =
    b"VK_EXT_memory_priority\0";
pub const VK_NV_dedicated_allocation_image_aliasing: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME: &'static [u8; 42usize] =
    b"VK_NV_dedicated_allocation_image_aliasing\0";
pub const VK_EXT_buffer_device_address: u32 = 1;
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_EXT_buffer_device_address\0";
pub const VK_EXT_tooling_info: u32 = 1;
pub const VK_EXT_TOOLING_INFO_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TOOLING_INFO_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_EXT_tooling_info\0";
pub const VK_EXT_separate_stencil_usage: u32 = 1;
pub const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME: &'static [u8; 30usize] =
    b"VK_EXT_separate_stencil_usage\0";
pub const VK_EXT_validation_features: u32 = 1;
pub const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION: u32 = 3;
pub const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_EXT_validation_features\0";
pub const VK_NV_cooperative_matrix: u32 = 1;
pub const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION: u32 = 1;
pub const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME: &'static [u8; 25usize] =
    b"VK_NV_cooperative_matrix\0";
pub const VK_NV_coverage_reduction_mode: u32 = 1;
pub const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION: u32 = 1;
pub const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME: &'static [u8; 30usize] =
    b"VK_NV_coverage_reduction_mode\0";
pub const VK_EXT_fragment_shader_interlock: u32 = 1;
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME: &'static [u8; 33usize] =
    b"VK_EXT_fragment_shader_interlock\0";
pub const VK_EXT_ycbcr_image_arrays: u32 = 1;
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME: &'static [u8; 26usize] =
    b"VK_EXT_ycbcr_image_arrays\0";
pub const VK_EXT_headless_surface: u32 = 1;
pub const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME: &'static [u8; 24usize] =
    b"VK_EXT_headless_surface\0";
pub const VK_EXT_line_rasterization: u32 = 1;
pub const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION: u32 = 1;
pub const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME: &'static [u8; 26usize] =
    b"VK_EXT_line_rasterization\0";
pub const VK_EXT_shader_atomic_float: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_EXT_shader_atomic_float\0";
pub const VK_EXT_host_query_reset: u32 = 1;
pub const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION: u32 = 1;
pub const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME: &'static [u8; 24usize] =
    b"VK_EXT_host_query_reset\0";
pub const VK_EXT_index_type_uint8: u32 = 1;
pub const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION: u32 = 1;
pub const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME: &'static [u8; 24usize] =
    b"VK_EXT_index_type_uint8\0";
pub const VK_EXT_extended_dynamic_state: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME: &'static [u8; 30usize] =
    b"VK_EXT_extended_dynamic_state\0";
pub const VK_EXT_shader_demote_to_helper_invocation: u32 = 1;
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME: &'static [u8; 42usize] =
    b"VK_EXT_shader_demote_to_helper_invocation\0";
pub const VK_NV_device_generated_commands: u32 = 1;
pub const VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION: u32 = 3;
pub const VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME: &'static [u8; 32usize] =
    b"VK_NV_device_generated_commands\0";
pub const VK_EXT_texel_buffer_alignment: u32 = 1;
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME: &'static [u8; 30usize] =
    b"VK_EXT_texel_buffer_alignment\0";
pub const VK_QCOM_render_pass_transform: u32 = 1;
pub const VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME: &'static [u8; 30usize] =
    b"VK_QCOM_render_pass_transform\0";
pub const VK_EXT_robustness2: u32 = 1;
pub const VK_EXT_ROBUSTNESS_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ROBUSTNESS_2_EXTENSION_NAME: &'static [u8; 19usize] = b"VK_EXT_robustness2\0";
pub const VK_EXT_custom_border_color: u32 = 1;
pub const VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION: u32 = 12;
pub const VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME: &'static [u8; 27usize] =
    b"VK_EXT_custom_border_color\0";
pub const VK_GOOGLE_user_type: u32 = 1;
pub const VK_GOOGLE_USER_TYPE_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_USER_TYPE_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_GOOGLE_user_type\0";
pub const VK_EXT_private_data: u32 = 1;
pub const VK_EXT_PRIVATE_DATA_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PRIVATE_DATA_EXTENSION_NAME: &'static [u8; 20usize] = b"VK_EXT_private_data\0";
pub const VK_EXT_pipeline_creation_cache_control: u32 = 1;
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION: u32 = 3;
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME: &'static [u8; 39usize] =
    b"VK_EXT_pipeline_creation_cache_control\0";
pub const VK_NV_device_diagnostics_config: u32 = 1;
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION: u32 = 1;
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME: &'static [u8; 32usize] =
    b"VK_NV_device_diagnostics_config\0";
pub const VK_QCOM_render_pass_store_ops: u32 = 1;
pub const VK_QCOM_render_pass_store_ops_SPEC_VERSION: u32 = 2;
pub const VK_QCOM_render_pass_store_ops_EXTENSION_NAME: &'static [u8; 30usize] =
    b"VK_QCOM_render_pass_store_ops\0";
pub const VK_EXT_fragment_density_map2: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME: &'static [u8; 29usize] =
    b"VK_EXT_fragment_density_map2\0";
pub const VK_EXT_image_robustness: u32 = 1;
pub const VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME: &'static [u8; 24usize] =
    b"VK_EXT_image_robustness\0";
pub type std_size_t = ::std::os::raw::c_ulong;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[doc = ""]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct UnityInterfaceGUID {
    pub m_GUIDHigh: ::std::os::raw::c_ulonglong,
    pub m_GUIDLow: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_UnityInterfaceGUID() {
    assert_eq!(
        ::std::mem::size_of::<UnityInterfaceGUID>(),
        16usize,
        concat!("Size of: ", stringify!(UnityInterfaceGUID))
    );
    assert_eq!(
        ::std::mem::align_of::<UnityInterfaceGUID>(),
        8usize,
        concat!("Alignment of ", stringify!(UnityInterfaceGUID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityInterfaceGUID>())).m_GUIDHigh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityInterfaceGUID),
            "::",
            stringify!(m_GUIDHigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityInterfaceGUID>())).m_GUIDLow as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityInterfaceGUID),
            "::",
            stringify!(m_GUIDLow)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityInterface {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_IUnityInterface() {
    assert_eq!(
        ::std::mem::size_of::<IUnityInterface>(),
        1usize,
        concat!("Size of: ", stringify!(IUnityInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnityInterface>(),
        1usize,
        concat!("Alignment of ", stringify!(IUnityInterface))
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityInterfaces {
    pub GetInterface: ::std::option::Option<
        unsafe extern "system" fn(guid: UnityInterfaceGUID) -> *mut IUnityInterface,
    >,
    pub RegisterInterface: ::std::option::Option<
        unsafe extern "system" fn(guid: UnityInterfaceGUID, ptr: *mut IUnityInterface),
    >,
    pub GetInterfaceSplit: ::std::option::Option<
        unsafe extern "system" fn(
            guidHigh: ::std::os::raw::c_ulonglong,
            guidLow: ::std::os::raw::c_ulonglong,
        ) -> *mut IUnityInterface,
    >,
    pub RegisterInterfaceSplit: ::std::option::Option<
        unsafe extern "system" fn(
            guidHigh: ::std::os::raw::c_ulonglong,
            guidLow: ::std::os::raw::c_ulonglong,
            ptr: *mut IUnityInterface,
        ),
    >,
}
#[test]
fn bindgen_test_layout_IUnityInterfaces() {
    assert_eq!(
        ::std::mem::size_of::<IUnityInterfaces>(),
        32usize,
        concat!("Size of: ", stringify!(IUnityInterfaces))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnityInterfaces>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnityInterfaces))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityInterfaces>())).GetInterface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityInterfaces),
            "::",
            stringify!(GetInterface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityInterfaces>())).RegisterInterface as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityInterfaces),
            "::",
            stringify!(RegisterInterface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityInterfaces>())).GetInterfaceSplit as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityInterfaces),
            "::",
            stringify!(GetInterfaceSplit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityInterfaces>())).RegisterInterfaceSplit as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityInterfaces),
            "::",
            stringify!(RegisterInterfaceSplit)
        )
    );
}
extern "system" {
    pub fn UnityPluginLoad(unityInterfaces: *mut IUnityInterfaces);
}
extern "system" {
    pub fn UnityPluginUnload();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RenderSurfaceBase {
    _unused: [u8; 0],
}
pub type UnityRenderBuffer = *mut RenderSurfaceBase;
pub type UnityTextureID = ::std::os::raw::c_uint;
pub const UnityGfxRenderer_kUnityGfxRendererD3D11: UnityGfxRenderer = 2;
pub const UnityGfxRenderer_kUnityGfxRendererNull: UnityGfxRenderer = 4;
pub const UnityGfxRenderer_kUnityGfxRendererOpenGLES20: UnityGfxRenderer = 8;
pub const UnityGfxRenderer_kUnityGfxRendererOpenGLES30: UnityGfxRenderer = 11;
pub const UnityGfxRenderer_kUnityGfxRendererPS4: UnityGfxRenderer = 13;
pub const UnityGfxRenderer_kUnityGfxRendererXboxOne: UnityGfxRenderer = 14;
pub const UnityGfxRenderer_kUnityGfxRendererMetal: UnityGfxRenderer = 16;
pub const UnityGfxRenderer_kUnityGfxRendererOpenGLCore: UnityGfxRenderer = 17;
pub const UnityGfxRenderer_kUnityGfxRendererD3D12: UnityGfxRenderer = 18;
pub const UnityGfxRenderer_kUnityGfxRendererVulkan: UnityGfxRenderer = 21;
pub const UnityGfxRenderer_kUnityGfxRendererNvn: UnityGfxRenderer = 22;
pub const UnityGfxRenderer_kUnityGfxRendererXboxOneD3D12: UnityGfxRenderer = 23;
pub type UnityGfxRenderer = ::std::os::raw::c_uint;
pub const UnityGfxDeviceEventType_kUnityGfxDeviceEventInitialize: UnityGfxDeviceEventType = 0;
pub const UnityGfxDeviceEventType_kUnityGfxDeviceEventShutdown: UnityGfxDeviceEventType = 1;
pub const UnityGfxDeviceEventType_kUnityGfxDeviceEventBeforeReset: UnityGfxDeviceEventType = 2;
pub const UnityGfxDeviceEventType_kUnityGfxDeviceEventAfterReset: UnityGfxDeviceEventType = 3;
pub type UnityGfxDeviceEventType = ::std::os::raw::c_uint;
pub type IUnityGraphicsDeviceEventCallback =
    ::std::option::Option<unsafe extern "system" fn(eventType: UnityGfxDeviceEventType)>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphics {
    pub GetRenderer: ::std::option::Option<unsafe extern "system" fn() -> UnityGfxRenderer>,
    pub RegisterDeviceEventCallback:
        ::std::option::Option<unsafe extern "system" fn(callback: IUnityGraphicsDeviceEventCallback)>,
    pub UnregisterDeviceEventCallback:
        ::std::option::Option<unsafe extern "system" fn(callback: IUnityGraphicsDeviceEventCallback)>,
    pub ReserveEventIDRange: ::std::option::Option<
        unsafe extern "system" fn(count: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_IUnityGraphics() {
    assert_eq!(
        ::std::mem::size_of::<IUnityGraphics>(),
        32usize,
        concat!("Size of: ", stringify!(IUnityGraphics))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnityGraphics>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnityGraphics))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityGraphics>())).GetRenderer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphics),
            "::",
            stringify!(GetRenderer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphics>())).RegisterDeviceEventCallback as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphics),
            "::",
            stringify!(RegisterDeviceEventCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphics>())).UnregisterDeviceEventCallback as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphics),
            "::",
            stringify!(UnregisterDeviceEventCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphics>())).ReserveEventIDRange as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphics),
            "::",
            stringify!(ReserveEventIDRange)
        )
    );
}
pub type UnityRenderingEvent =
    ::std::option::Option<unsafe extern "system" fn(eventId: ::std::os::raw::c_int)>;
pub type UnityRenderingEventAndData = ::std::option::Option<
    unsafe extern "system" fn(eventId: ::std::os::raw::c_int, data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D11Device {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_ID3D11Device() {
    assert_eq!(
        ::std::mem::size_of::<ID3D11Device>(),
        1usize,
        concat!("Size of: ", stringify!(ID3D11Device))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D11Device>(),
        1usize,
        concat!("Alignment of ", stringify!(ID3D11Device))
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D11Resource {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_ID3D11Resource() {
    assert_eq!(
        ::std::mem::size_of::<ID3D11Resource>(),
        1usize,
        concat!("Size of: ", stringify!(ID3D11Resource))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D11Resource>(),
        1usize,
        concat!("Alignment of ", stringify!(ID3D11Resource))
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D11RenderTargetView {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_ID3D11RenderTargetView() {
    assert_eq!(
        ::std::mem::size_of::<ID3D11RenderTargetView>(),
        1usize,
        concat!("Size of: ", stringify!(ID3D11RenderTargetView))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D11RenderTargetView>(),
        1usize,
        concat!("Alignment of ", stringify!(ID3D11RenderTargetView))
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D11ShaderResourceView {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_ID3D11ShaderResourceView() {
    assert_eq!(
        ::std::mem::size_of::<ID3D11ShaderResourceView>(),
        1usize,
        concat!("Size of: ", stringify!(ID3D11ShaderResourceView))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D11ShaderResourceView>(),
        1usize,
        concat!("Alignment of ", stringify!(ID3D11ShaderResourceView))
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D11 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D11Device>,
    pub TextureFromRenderBuffer: ::std::option::Option<
        unsafe extern "system" fn(buffer: UnityRenderBuffer) -> *mut ID3D11Resource,
    >,
    pub TextureFromNativeTexture:
        ::std::option::Option<unsafe extern "system" fn(texture: UnityTextureID) -> *mut ID3D11Resource>,
    pub RTVFromRenderBuffer: ::std::option::Option<
        unsafe extern "system" fn(surface: UnityRenderBuffer) -> *mut ID3D11RenderTargetView,
    >,
    pub SRVFromNativeTexture: ::std::option::Option<
        unsafe extern "system" fn(texture: UnityTextureID) -> *mut ID3D11ShaderResourceView,
    >,
}
#[test]
fn bindgen_test_layout_IUnityGraphicsD3D11() {
    assert_eq!(
        ::std::mem::size_of::<IUnityGraphicsD3D11>(),
        40usize,
        concat!("Size of: ", stringify!(IUnityGraphicsD3D11))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnityGraphicsD3D11>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnityGraphicsD3D11))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityGraphicsD3D11>())).GetDevice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D11),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D11>())).TextureFromRenderBuffer as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D11),
            "::",
            stringify!(TextureFromRenderBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D11>())).TextureFromNativeTexture as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D11),
            "::",
            stringify!(TextureFromNativeTexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D11>())).RTVFromRenderBuffer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D11),
            "::",
            stringify!(RTVFromRenderBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D11>())).SRVFromNativeTexture as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D11),
            "::",
            stringify!(SRVFromNativeTexture)
        )
    );
}
pub type D3D12_RESOURCE_STATES = i32;
pub type UINT64 = u64;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D12Resource {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_ID3D12Resource() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12Resource>(),
        1usize,
        concat!("Size of: ", stringify!(ID3D12Resource))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12Resource>(),
        1usize,
        concat!("Alignment of ", stringify!(ID3D12Resource))
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D12Device {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_ID3D12Device() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12Device>(),
        1usize,
        concat!("Size of: ", stringify!(ID3D12Device))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12Device>(),
        1usize,
        concat!("Alignment of ", stringify!(ID3D12Device))
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D12Fence {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_ID3D12Fence() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12Fence>(),
        1usize,
        concat!("Size of: ", stringify!(ID3D12Fence))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12Fence>(),
        1usize,
        concat!("Alignment of ", stringify!(ID3D12Fence))
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D12GraphicsCommandList {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_ID3D12GraphicsCommandList() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12GraphicsCommandList>(),
        1usize,
        concat!("Size of: ", stringify!(ID3D12GraphicsCommandList))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12GraphicsCommandList>(),
        1usize,
        concat!("Alignment of ", stringify!(ID3D12GraphicsCommandList))
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D12CommandQueue {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_ID3D12CommandQueue() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12CommandQueue>(),
        1usize,
        concat!("Size of: ", stringify!(ID3D12CommandQueue))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12CommandQueue>(),
        1usize,
        concat!("Alignment of ", stringify!(ID3D12CommandQueue))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityGraphicsD3D12ResourceState {
    pub resource: *mut ID3D12Resource,
    pub expected: D3D12_RESOURCE_STATES,
    pub current: D3D12_RESOURCE_STATES,
}
#[test]
fn bindgen_test_layout_UnityGraphicsD3D12ResourceState() {
    assert_eq!(
        ::std::mem::size_of::<UnityGraphicsD3D12ResourceState>(),
        16usize,
        concat!("Size of: ", stringify!(UnityGraphicsD3D12ResourceState))
    );
    assert_eq!(
        ::std::mem::align_of::<UnityGraphicsD3D12ResourceState>(),
        8usize,
        concat!("Alignment of ", stringify!(UnityGraphicsD3D12ResourceState))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityGraphicsD3D12ResourceState>())).resource as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityGraphicsD3D12ResourceState),
            "::",
            stringify!(resource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityGraphicsD3D12ResourceState>())).expected as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityGraphicsD3D12ResourceState),
            "::",
            stringify!(expected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityGraphicsD3D12ResourceState>())).current as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityGraphicsD3D12ResourceState),
            "::",
            stringify!(current)
        )
    );
}
impl Default for UnityGraphicsD3D12ResourceState {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct UnityGraphicsD3D12PhysicalVideoMemoryControlValues {
    pub reservation: UINT64,
    pub systemMemoryThreshold: UINT64,
    pub residencyThreshold: UINT64,
}
#[test]
fn bindgen_test_layout_UnityGraphicsD3D12PhysicalVideoMemoryControlValues() {
    assert_eq!(
        ::std::mem::size_of::<UnityGraphicsD3D12PhysicalVideoMemoryControlValues>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(UnityGraphicsD3D12PhysicalVideoMemoryControlValues)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<UnityGraphicsD3D12PhysicalVideoMemoryControlValues>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(UnityGraphicsD3D12PhysicalVideoMemoryControlValues)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityGraphicsD3D12PhysicalVideoMemoryControlValues>()))
                .reservation as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityGraphicsD3D12PhysicalVideoMemoryControlValues),
            "::",
            stringify!(reservation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityGraphicsD3D12PhysicalVideoMemoryControlValues>()))
                .systemMemoryThreshold as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityGraphicsD3D12PhysicalVideoMemoryControlValues),
            "::",
            stringify!(systemMemoryThreshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityGraphicsD3D12PhysicalVideoMemoryControlValues>()))
                .residencyThreshold as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityGraphicsD3D12PhysicalVideoMemoryControlValues),
            "::",
            stringify!(residencyThreshold)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D12v5 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Device>,
    pub GetFrameFence: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Fence>,
    pub GetNextFrameFenceValue: ::std::option::Option<unsafe extern "system" fn() -> UINT64>,
    pub ExecuteCommandList: ::std::option::Option<
        unsafe extern "system" fn(
            commandList: *mut ID3D12GraphicsCommandList,
            stateCount: ::std::os::raw::c_int,
            states: *mut UnityGraphicsD3D12ResourceState,
        ) -> UINT64,
    >,
    pub SetPhysicalVideoMemoryControlValues: ::std::option::Option<
        unsafe extern "system" fn(memInfo: *const UnityGraphicsD3D12PhysicalVideoMemoryControlValues),
    >,
    pub GetCommandQueue: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12CommandQueue>,
    pub TextureFromRenderBuffer: ::std::option::Option<
        unsafe extern "system" fn(rb: *mut UnityRenderBuffer) -> *mut ID3D12Resource,
    >,
}
#[test]
fn bindgen_test_layout_IUnityGraphicsD3D12v5() {
    assert_eq!(
        ::std::mem::size_of::<IUnityGraphicsD3D12v5>(),
        56usize,
        concat!("Size of: ", stringify!(IUnityGraphicsD3D12v5))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnityGraphicsD3D12v5>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnityGraphicsD3D12v5))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityGraphicsD3D12v5>())).GetDevice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v5),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v5>())).GetFrameFence as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v5),
            "::",
            stringify!(GetFrameFence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v5>())).GetNextFrameFenceValue as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v5),
            "::",
            stringify!(GetNextFrameFenceValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v5>())).ExecuteCommandList as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v5),
            "::",
            stringify!(ExecuteCommandList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v5>())).SetPhysicalVideoMemoryControlValues
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v5),
            "::",
            stringify!(SetPhysicalVideoMemoryControlValues)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v5>())).GetCommandQueue as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v5),
            "::",
            stringify!(GetCommandQueue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v5>())).TextureFromRenderBuffer as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v5),
            "::",
            stringify!(TextureFromRenderBuffer)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D12v4 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Device>,
    pub GetFrameFence: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Fence>,
    pub GetNextFrameFenceValue: ::std::option::Option<unsafe extern "system" fn() -> UINT64>,
    pub ExecuteCommandList: ::std::option::Option<
        unsafe extern "system" fn(
            commandList: *mut ID3D12GraphicsCommandList,
            stateCount: ::std::os::raw::c_int,
            states: *mut UnityGraphicsD3D12ResourceState,
        ) -> UINT64,
    >,
    pub SetPhysicalVideoMemoryControlValues: ::std::option::Option<
        unsafe extern "system" fn(memInfo: *const UnityGraphicsD3D12PhysicalVideoMemoryControlValues),
    >,
    pub GetCommandQueue: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12CommandQueue>,
}
#[test]
fn bindgen_test_layout_IUnityGraphicsD3D12v4() {
    assert_eq!(
        ::std::mem::size_of::<IUnityGraphicsD3D12v4>(),
        48usize,
        concat!("Size of: ", stringify!(IUnityGraphicsD3D12v4))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnityGraphicsD3D12v4>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnityGraphicsD3D12v4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityGraphicsD3D12v4>())).GetDevice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v4),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v4>())).GetFrameFence as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v4),
            "::",
            stringify!(GetFrameFence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v4>())).GetNextFrameFenceValue as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v4),
            "::",
            stringify!(GetNextFrameFenceValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v4>())).ExecuteCommandList as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v4),
            "::",
            stringify!(ExecuteCommandList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v4>())).SetPhysicalVideoMemoryControlValues
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v4),
            "::",
            stringify!(SetPhysicalVideoMemoryControlValues)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v4>())).GetCommandQueue as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v4),
            "::",
            stringify!(GetCommandQueue)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D12v3 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Device>,
    pub GetFrameFence: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Fence>,
    pub GetNextFrameFenceValue: ::std::option::Option<unsafe extern "system" fn() -> UINT64>,
    pub ExecuteCommandList: ::std::option::Option<
        unsafe extern "system" fn(
            commandList: *mut ID3D12GraphicsCommandList,
            stateCount: ::std::os::raw::c_int,
            states: *mut UnityGraphicsD3D12ResourceState,
        ) -> UINT64,
    >,
    pub SetPhysicalVideoMemoryControlValues: ::std::option::Option<
        unsafe extern "system" fn(memInfo: *const UnityGraphicsD3D12PhysicalVideoMemoryControlValues),
    >,
}
#[test]
fn bindgen_test_layout_IUnityGraphicsD3D12v3() {
    assert_eq!(
        ::std::mem::size_of::<IUnityGraphicsD3D12v3>(),
        40usize,
        concat!("Size of: ", stringify!(IUnityGraphicsD3D12v3))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnityGraphicsD3D12v3>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnityGraphicsD3D12v3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityGraphicsD3D12v3>())).GetDevice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v3),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v3>())).GetFrameFence as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v3),
            "::",
            stringify!(GetFrameFence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v3>())).GetNextFrameFenceValue as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v3),
            "::",
            stringify!(GetNextFrameFenceValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v3>())).ExecuteCommandList as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v3),
            "::",
            stringify!(ExecuteCommandList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v3>())).SetPhysicalVideoMemoryControlValues
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v3),
            "::",
            stringify!(SetPhysicalVideoMemoryControlValues)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D12v2 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Device>,
    pub GetFrameFence: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Fence>,
    pub GetNextFrameFenceValue: ::std::option::Option<unsafe extern "system" fn() -> UINT64>,
    pub ExecuteCommandList: ::std::option::Option<
        unsafe extern "system" fn(
            commandList: *mut ID3D12GraphicsCommandList,
            stateCount: ::std::os::raw::c_int,
            states: *mut UnityGraphicsD3D12ResourceState,
        ) -> UINT64,
    >,
}
#[test]
fn bindgen_test_layout_IUnityGraphicsD3D12v2() {
    assert_eq!(
        ::std::mem::size_of::<IUnityGraphicsD3D12v2>(),
        32usize,
        concat!("Size of: ", stringify!(IUnityGraphicsD3D12v2))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnityGraphicsD3D12v2>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnityGraphicsD3D12v2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityGraphicsD3D12v2>())).GetDevice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v2),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v2>())).GetFrameFence as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v2),
            "::",
            stringify!(GetFrameFence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v2>())).GetNextFrameFenceValue as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v2),
            "::",
            stringify!(GetNextFrameFenceValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12v2>())).ExecuteCommandList as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12v2),
            "::",
            stringify!(ExecuteCommandList)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D12 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Device>,
    pub GetCommandQueue: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12CommandQueue>,
    pub GetFrameFence: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Fence>,
    pub GetNextFrameFenceValue: ::std::option::Option<unsafe extern "system" fn() -> UINT64>,
    pub GetResourceState: ::std::option::Option<
        unsafe extern "system" fn(
            resource: *mut ID3D12Resource,
            outState: *mut D3D12_RESOURCE_STATES,
        ) -> bool,
    >,
    pub SetResourceState: ::std::option::Option<
        unsafe extern "system" fn(resource: *mut ID3D12Resource, state: D3D12_RESOURCE_STATES),
    >,
}
#[test]
fn bindgen_test_layout_IUnityGraphicsD3D12() {
    assert_eq!(
        ::std::mem::size_of::<IUnityGraphicsD3D12>(),
        48usize,
        concat!("Size of: ", stringify!(IUnityGraphicsD3D12))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnityGraphicsD3D12>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnityGraphicsD3D12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityGraphicsD3D12>())).GetDevice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12),
            "::",
            stringify!(GetDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12>())).GetCommandQueue as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12),
            "::",
            stringify!(GetCommandQueue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12>())).GetFrameFence as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12),
            "::",
            stringify!(GetFrameFence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12>())).GetNextFrameFenceValue as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12),
            "::",
            stringify!(GetNextFrameFenceValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12>())).GetResourceState as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12),
            "::",
            stringify!(GetResourceState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsD3D12>())).SetResourceState as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsD3D12),
            "::",
            stringify!(SetResourceState)
        )
    );
}
pub type size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[repr(align(16))]
#[derive(Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type VkBool32 = u32;
pub type VkDeviceAddress = u64;
pub type VkDeviceSize = u64;
pub type VkFlags = u32;
pub type VkSampleMask = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBuffer_T {
    _unused: [u8; 0],
}
pub type VkBuffer = *mut VkBuffer_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImage_T {
    _unused: [u8; 0],
}
pub type VkImage = *mut VkImage_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInstance_T {
    _unused: [u8; 0],
}
pub type VkInstance = *mut VkInstance_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice_T {
    _unused: [u8; 0],
}
pub type VkPhysicalDevice = *mut VkPhysicalDevice_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDevice_T {
    _unused: [u8; 0],
}
pub type VkDevice = *mut VkDevice_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueue_T {
    _unused: [u8; 0],
}
pub type VkQueue = *mut VkQueue_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphore_T {
    _unused: [u8; 0],
}
pub type VkSemaphore = *mut VkSemaphore_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBuffer_T {
    _unused: [u8; 0],
}
pub type VkCommandBuffer = *mut VkCommandBuffer_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFence_T {
    _unused: [u8; 0],
}
pub type VkFence = *mut VkFence_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceMemory_T {
    _unused: [u8; 0],
}
pub type VkDeviceMemory = *mut VkDeviceMemory_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkEvent_T {
    _unused: [u8; 0],
}
pub type VkEvent = *mut VkEvent_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPool_T {
    _unused: [u8; 0],
}
pub type VkQueryPool = *mut VkQueryPool_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferView_T {
    _unused: [u8; 0],
}
pub type VkBufferView = *mut VkBufferView_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageView_T {
    _unused: [u8; 0],
}
pub type VkImageView = *mut VkImageView_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderModule_T {
    _unused: [u8; 0],
}
pub type VkShaderModule = *mut VkShaderModule_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCache_T {
    _unused: [u8; 0],
}
pub type VkPipelineCache = *mut VkPipelineCache_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineLayout_T {
    _unused: [u8; 0],
}
pub type VkPipelineLayout = *mut VkPipelineLayout_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipeline_T {
    _unused: [u8; 0],
}
pub type VkPipeline = *mut VkPipeline_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPass_T {
    _unused: [u8; 0],
}
pub type VkRenderPass = *mut VkRenderPass_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayout_T {
    _unused: [u8; 0],
}
pub type VkDescriptorSetLayout = *mut VkDescriptorSetLayout_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSampler_T {
    _unused: [u8; 0],
}
pub type VkSampler = *mut VkSampler_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSet_T {
    _unused: [u8; 0],
}
pub type VkDescriptorSet = *mut VkDescriptorSet_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPool_T {
    _unused: [u8; 0],
}
pub type VkDescriptorPool = *mut VkDescriptorPool_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebuffer_T {
    _unused: [u8; 0],
}
pub type VkFramebuffer = *mut VkFramebuffer_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandPool_T {
    _unused: [u8; 0],
}
pub type VkCommandPool = *mut VkCommandPool_T;
pub const VkResult_VK_SUCCESS: VkResult = 0;
pub const VkResult_VK_NOT_READY: VkResult = 1;
pub const VkResult_VK_TIMEOUT: VkResult = 2;
pub const VkResult_VK_EVENT_SET: VkResult = 3;
pub const VkResult_VK_EVENT_RESET: VkResult = 4;
pub const VkResult_VK_INCOMPLETE: VkResult = 5;
pub const VkResult_VK_ERROR_OUT_OF_HOST_MEMORY: VkResult = -1;
pub const VkResult_VK_ERROR_OUT_OF_DEVICE_MEMORY: VkResult = -2;
pub const VkResult_VK_ERROR_INITIALIZATION_FAILED: VkResult = -3;
pub const VkResult_VK_ERROR_DEVICE_LOST: VkResult = -4;
pub const VkResult_VK_ERROR_MEMORY_MAP_FAILED: VkResult = -5;
pub const VkResult_VK_ERROR_LAYER_NOT_PRESENT: VkResult = -6;
pub const VkResult_VK_ERROR_EXTENSION_NOT_PRESENT: VkResult = -7;
pub const VkResult_VK_ERROR_FEATURE_NOT_PRESENT: VkResult = -8;
pub const VkResult_VK_ERROR_INCOMPATIBLE_DRIVER: VkResult = -9;
pub const VkResult_VK_ERROR_TOO_MANY_OBJECTS: VkResult = -10;
pub const VkResult_VK_ERROR_FORMAT_NOT_SUPPORTED: VkResult = -11;
pub const VkResult_VK_ERROR_FRAGMENTED_POOL: VkResult = -12;
pub const VkResult_VK_ERROR_UNKNOWN: VkResult = -13;
pub const VkResult_VK_ERROR_OUT_OF_POOL_MEMORY: VkResult = -1000069000;
pub const VkResult_VK_ERROR_INVALID_EXTERNAL_HANDLE: VkResult = -1000072003;
pub const VkResult_VK_ERROR_FRAGMENTATION: VkResult = -1000161000;
pub const VkResult_VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS: VkResult = -1000257000;
pub const VkResult_VK_ERROR_SURFACE_LOST_KHR: VkResult = -1000000000;
pub const VkResult_VK_ERROR_NATIVE_WINDOW_IN_USE_KHR: VkResult = -1000000001;
pub const VkResult_VK_SUBOPTIMAL_KHR: VkResult = 1000001003;
pub const VkResult_VK_ERROR_OUT_OF_DATE_KHR: VkResult = -1000001004;
pub const VkResult_VK_ERROR_INCOMPATIBLE_DISPLAY_KHR: VkResult = -1000003001;
pub const VkResult_VK_ERROR_VALIDATION_FAILED_EXT: VkResult = -1000011001;
pub const VkResult_VK_ERROR_INVALID_SHADER_NV: VkResult = -1000012000;
pub const VkResult_VK_ERROR_INCOMPATIBLE_VERSION_KHR: VkResult = -1000150000;
pub const VkResult_VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT: VkResult = -1000158000;
pub const VkResult_VK_ERROR_NOT_PERMITTED_EXT: VkResult = -1000174001;
pub const VkResult_VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT: VkResult = -1000255000;
pub const VkResult_VK_THREAD_IDLE_KHR: VkResult = 1000268000;
pub const VkResult_VK_THREAD_DONE_KHR: VkResult = 1000268001;
pub const VkResult_VK_OPERATION_DEFERRED_KHR: VkResult = 1000268002;
pub const VkResult_VK_OPERATION_NOT_DEFERRED_KHR: VkResult = 1000268003;
pub const VkResult_VK_PIPELINE_COMPILE_REQUIRED_EXT: VkResult = 1000297000;
pub const VkResult_VK_ERROR_OUT_OF_POOL_MEMORY_KHR: VkResult = -1000069000;
pub const VkResult_VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: VkResult = -1000072003;
pub const VkResult_VK_ERROR_FRAGMENTATION_EXT: VkResult = -1000161000;
pub const VkResult_VK_ERROR_INVALID_DEVICE_ADDRESS_EXT: VkResult = -1000257000;
pub const VkResult_VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: VkResult = -1000257000;
pub const VkResult_VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT: VkResult = 1000297000;
pub const VkResult_VK_RESULT_MAX_ENUM: VkResult = 2147483647;
pub type VkResult = ::std::os::raw::c_int;
pub const VkStructureType_VK_STRUCTURE_TYPE_APPLICATION_INFO: VkStructureType = 0;
pub const VkStructureType_VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: VkStructureType = 1;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: VkStructureType = 2;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: VkStructureType = 3;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO: VkStructureType = 4;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: VkStructureType = 5;
pub const VkStructureType_VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: VkStructureType = 6;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: VkStructureType = 7;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: VkStructureType = 8;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: VkStructureType = 9;
pub const VkStructureType_VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: VkStructureType = 10;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: VkStructureType = 11;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: VkStructureType = 12;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: VkStructureType = 13;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: VkStructureType = 14;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: VkStructureType = 15;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: VkStructureType = 16;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: VkStructureType = 17;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: VkStructureType = 18;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
    VkStructureType = 19;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
    VkStructureType = 20;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
    VkStructureType = 21;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: VkStructureType =
    22;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
    VkStructureType = 23;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
    VkStructureType = 24;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
    VkStructureType = 25;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
    VkStructureType = 26;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: VkStructureType =
    27;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: VkStructureType = 28;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: VkStructureType = 29;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: VkStructureType = 30;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: VkStructureType = 31;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: VkStructureType = 32;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: VkStructureType = 33;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: VkStructureType = 34;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: VkStructureType = 35;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: VkStructureType = 36;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: VkStructureType = 37;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: VkStructureType = 38;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: VkStructureType = 39;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: VkStructureType = 40;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: VkStructureType = 41;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: VkStructureType = 42;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: VkStructureType = 43;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: VkStructureType = 44;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: VkStructureType = 45;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER: VkStructureType = 46;
pub const VkStructureType_VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: VkStructureType = 47;
pub const VkStructureType_VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: VkStructureType = 48;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES: VkStructureType =
    1000094000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO: VkStructureType = 1000157000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO: VkStructureType = 1000157001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:
    VkStructureType = 1000083000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: VkStructureType =
    1000127000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO: VkStructureType =
    1000127001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO: VkStructureType =
    1000060000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO: VkStructureType =
    1000060003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:
    VkStructureType = 1000060004;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO: VkStructureType = 1000060005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO: VkStructureType =
    1000060006;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO: VkStructureType =
    1000060013;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO: VkStructureType =
    1000060014;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES: VkStructureType =
    1000070000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO: VkStructureType =
    1000070001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2: VkStructureType =
    1000146000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2: VkStructureType =
    1000146001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:
    VkStructureType = 1000146002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2: VkStructureType = 1000146003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2: VkStructureType =
    1000146004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: VkStructureType =
    1000059000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: VkStructureType =
    1000059001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2: VkStructureType = 1000059002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType = 1000059003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2: VkStructureType =
    1000059004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2: VkStructureType = 1000059005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2: VkStructureType =
    1000059006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType =
    1000059007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:
    VkStructureType = 1000059008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:
    VkStructureType = 1000117000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:
    VkStructureType = 1000117001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO: VkStructureType =
    1000117002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO : VkStructureType = 1000117003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO: VkStructureType =
    1000053000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: VkStructureType =
    1000053001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: VkStructureType =
    1000053002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO: VkStructureType = 1000145000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
    VkStructureType = 1000145001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
    VkStructureType = 1000145002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2: VkStructureType = 1000145003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO: VkStructureType =
    1000156000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO: VkStructureType =
    1000156001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO: VkStructureType =
    1000156002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: VkStructureType =
    1000156003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:
    VkStructureType = 1000156004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:
    VkStructureType = 1000156005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:
    VkStructureType = 1000085000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:
    VkStructureType = 1000071000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES: VkStructureType =
    1000071001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO: VkStructureType =
    1000071002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES: VkStructureType =
    1000071003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: VkStructureType =
    1000071004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO: VkStructureType =
    1000072000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO: VkStructureType =
    1000072001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO: VkStructureType =
    1000072002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO: VkStructureType =
    1000112000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES: VkStructureType = 1000112001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO: VkStructureType = 1000113000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO: VkStructureType =
    1000077000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:
    VkStructureType = 1000076000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES: VkStructureType =
    1000076001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:
    VkStructureType = 1000168000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT: VkStructureType =
    1000168001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
    VkStructureType = 1000063000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES: VkStructureType =
    49;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES: VkStructureType =
    50;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES: VkStructureType =
    51;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES: VkStructureType =
    52;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO: VkStructureType =
    1000147000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2: VkStructureType = 1000109000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2: VkStructureType = 1000109001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2: VkStructureType = 1000109002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2: VkStructureType = 1000109003;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2: VkStructureType = 1000109004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO: VkStructureType = 1000109005;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_END_INFO: VkStructureType = 1000109006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES: VkStructureType =
    1000177000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES: VkStructureType =
    1000196000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:
    VkStructureType = 1000180000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:
    VkStructureType = 1000082000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:
    VkStructureType = 1000197000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:
    VkStructureType = 1000161000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:
    VkStructureType = 1000161001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:
    VkStructureType = 1000161002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO : VkStructureType = 1000161003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT : VkStructureType = 1000161004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:
    VkStructureType = 1000199000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:
    VkStructureType = 1000199001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:
    VkStructureType = 1000221000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO: VkStructureType =
    1000246000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:
    VkStructureType = 1000130000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO: VkStructureType =
    1000130001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:
    VkStructureType = 1000211000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:
    VkStructureType = 1000108000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO: VkStructureType =
    1000108001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO: VkStructureType =
    1000108002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO: VkStructureType =
    1000108003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES : VkStructureType = 1000253000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES : VkStructureType = 1000175000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES : VkStructureType = 1000241000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT: VkStructureType =
    1000241001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT: VkStructureType =
    1000241002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:
    VkStructureType = 1000261000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:
    VkStructureType = 1000207000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:
    VkStructureType = 1000207001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO: VkStructureType =
    1000207002;
pub const VkStructureType_VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO: VkStructureType =
    1000207003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO: VkStructureType = 1000207004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO: VkStructureType = 1000207005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:
    VkStructureType = 1000257000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO: VkStructureType =
    1000244001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:
    VkStructureType = 1000257002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:
    VkStructureType = 1000257003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:
    VkStructureType = 1000257004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType = 1000001000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: VkStructureType = 1000001001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: VkStructureType =
    1000060007;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType =
    1000060008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: VkStructureType =
    1000060009;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: VkStructureType =
    1000060010;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: VkStructureType =
    1000060011;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:
    VkStructureType = 1000060012;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: VkStructureType =
    1000002000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000002001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: VkStructureType = 1000003000;
pub const VkStructureType_VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000004000;
pub const VkStructureType_VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000005000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000006000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000008000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000009000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: VkStructureType =
    1000011000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
    VkStructureType = 1000018000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: VkStructureType =
    1000022000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: VkStructureType =
    1000022001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: VkStructureType =
    1000022002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV:
    VkStructureType = 1000026000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV:
    VkStructureType = 1000026001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV:
    VkStructureType = 1000026002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT:
    VkStructureType = 1000028000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT:
    VkStructureType = 1000028001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT:
    VkStructureType = 1000028002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX: VkStructureType =
    1000030000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX: VkStructureType =
    1000030001;
pub const VkStructureType_VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
    VkStructureType = 1000041000;
pub const VkStructureType_VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP:
    VkStructureType = 1000049000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV:
    VkStructureType = 1000050000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: VkStructureType =
    1000056000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: VkStructureType =
    1000056001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType =
    1000057000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType =
    1000057001;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV:
    VkStructureType = 1000058000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: VkStructureType = 1000061000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: VkStructureType = 1000062000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT : VkStructureType = 1000066000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: VkStructureType =
    1000067000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT:
    VkStructureType = 1000067001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000073000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000073001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: VkStructureType =
    1000073002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000073003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: VkStructureType = 1000074000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: VkStructureType = 1000074001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: VkStructureType = 1000074002;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR:
    VkStructureType = 1000075000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    VkStructureType = 1000078000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    VkStructureType = 1000078001;
pub const VkStructureType_VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: VkStructureType =
    1000078002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000078003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: VkStructureType =
    1000079000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: VkStructureType = 1000079001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
    VkStructureType = 1000080000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT : VkStructureType = 1000081000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT:
    VkStructureType = 1000081001;
pub const VkStructureType_VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: VkStructureType =
    1000081002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR: VkStructureType = 1000084000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV:
    VkStructureType = 1000087000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: VkStructureType =
    1000090000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: VkStructureType = 1000091000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: VkStructureType = 1000091001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: VkStructureType = 1000091002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: VkStructureType =
    1000091003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: VkStructureType = 1000092000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX : VkStructureType = 1000097000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV:
    VkStructureType = 1000098000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT:
    VkStructureType = 1000099000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000099001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT : VkStructureType = 1000101000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT : VkStructureType = 1000101001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT:
    VkStructureType = 1000102000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT : VkStructureType = 1000102001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_HDR_METADATA_EXT: VkStructureType = 1000105000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
    VkStructureType = 1000111000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000114000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000114001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000114002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: VkStructureType = 1000115000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: VkStructureType = 1000115001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR:
    VkStructureType = 1000116000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR:
    VkStructureType = 1000116001;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR:
    VkStructureType = 1000116002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR: VkStructureType =
    1000116003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR: VkStructureType =
    1000116004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR: VkStructureType = 1000116005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR: VkStructureType =
    1000116006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: VkStructureType =
    1000119000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: VkStructureType =
    1000119001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: VkStructureType = 1000119002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: VkStructureType = 1000121000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: VkStructureType =
    1000121001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: VkStructureType =
    1000121002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: VkStructureType = 1000121003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: VkStructureType =
    1000121004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: VkStructureType =
    1000122000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: VkStructureType =
    1000123000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: VkStructureType =
    1000128000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: VkStructureType =
    1000128001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: VkStructureType = 1000128002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
    VkStructureType = 1000128003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: VkStructureType =
    1000128004;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: VkStructureType =
    1000129000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID:
    VkStructureType = 1000129001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID:
    VkStructureType = 1000129002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    VkStructureType = 1000129003;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    VkStructureType = 1000129004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: VkStructureType = 1000129005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT:
    VkStructureType = 1000138000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT:
    VkStructureType = 1000138001;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT:
    VkStructureType = 1000138002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT:
    VkStructureType = 1000138003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: VkStructureType = 1000143000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT:
    VkStructureType = 1000143001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000143002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT:
    VkStructureType = 1000143003;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: VkStructureType =
    1000143004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT : VkStructureType = 1000148000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT : VkStructureType = 1000148001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000148002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV:
    VkStructureType = 1000149000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR:
    VkStructureType = 1000165006;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR:
    VkStructureType = 1000165007;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR:
    VkStructureType = 1000150000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR:
    VkStructureType = 1000150001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR:
    VkStructureType = 1000150002;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR:
    VkStructureType = 1000150003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR:
    VkStructureType = 1000150004;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR:
    VkStructureType = 1000150005;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR: VkStructureType =
    1000150006;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR:
    VkStructureType = 1000150008;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR: VkStructureType =
    1000150009;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR: VkStructureType =
    1000150010;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR:
    VkStructureType = 1000150011;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR:
    VkStructureType = 1000150012;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR:
    VkStructureType = 1000150013;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR:
    VkStructureType = 1000150014;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR: VkStructureType =
    1000150015;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR:
    VkStructureType = 1000150016;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR:
    VkStructureType = 1000150017;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR:
    VkStructureType = 1000150018;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV:
    VkStructureType = 1000152000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV:
    VkStructureType = 1000154000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV:
    VkStructureType = 1000154001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT:
    VkStructureType = 1000158000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT: VkStructureType =
    1000158001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT:
    VkStructureType = 1000158002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT:
    VkStructureType = 1000158003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT:
    VkStructureType = 1000158004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT:
    VkStructureType = 1000158005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: VkStructureType =
    1000160000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT:
    VkStructureType = 1000160001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV : VkStructureType = 1000164000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV:
    VkStructureType = 1000164001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV:
    VkStructureType = 1000164002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV : VkStructureType = 1000164005 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: VkStructureType =
    1000165000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: VkStructureType =
    1000165001;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_NV: VkStructureType = 1000165003;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: VkStructureType = 1000165004;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV: VkStructureType = 1000165005;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV:
    VkStructureType = 1000165008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV:
    VkStructureType = 1000165009;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV:
    VkStructureType = 1000165011;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: VkStructureType =
    1000165012;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV : VkStructureType = 1000166000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV : VkStructureType = 1000166001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT:
    VkStructureType = 1000170000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT:
    VkStructureType = 1000170001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT:
    VkStructureType = 1000174000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: VkStructureType =
    1000178000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: VkStructureType =
    1000178001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT:
    VkStructureType = 1000178002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR:
    VkStructureType = 1000181000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD:
    VkStructureType = 1000183000;
pub const VkStructureType_VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: VkStructureType =
    1000184000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD:
    VkStructureType = 1000185000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD:
    VkStructureType = 1000189000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT : VkStructureType = 1000190000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000190001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT : VkStructureType = 1000190002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP: VkStructureType = 1000191000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT:
    VkStructureType = 1000192000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV : VkStructureType = 1000201000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV:
    VkStructureType = 1000202000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV:
    VkStructureType = 1000202001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV : VkStructureType = 1000203000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV:
    VkStructureType = 1000204000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV : VkStructureType = 1000205000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV:
    VkStructureType = 1000205002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV: VkStructureType = 1000206000;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: VkStructureType =
    1000206001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL : VkStructureType = 1000209000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL:
    VkStructureType = 1000210000;
pub const VkStructureType_VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL: VkStructureType =
    1000210001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL: VkStructureType =
    1000210002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL: VkStructureType =
    1000210003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL: VkStructureType =
    1000210004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL:
    VkStructureType = 1000210005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT:
    VkStructureType = 1000212000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD:
    VkStructureType = 1000213000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD:
    VkStructureType = 1000213001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: VkStructureType =
    1000214000;
pub const VkStructureType_VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT: VkStructureType =
    1000217000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT:
    VkStructureType = 1000218000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT:
    VkStructureType = 1000218001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT:
    VkStructureType = 1000218002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT:
    VkStructureType = 1000225000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT : VkStructureType = 1000225001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT:
    VkStructureType = 1000225002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD:
    VkStructureType = 1000227000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD:
    VkStructureType = 1000229000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT:
    VkStructureType = 1000237000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT:
    VkStructureType = 1000238000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: VkStructureType =
    1000238001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR: VkStructureType =
    1000239000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV : VkStructureType = 1000240000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT:
    VkStructureType = 1000244000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: VkStructureType =
    1000244002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: VkStructureType =
    1000245000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: VkStructureType = 1000247000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV:
    VkStructureType = 1000249000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: VkStructureType =
    1000249001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV:
    VkStructureType = 1000249002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV:
    VkStructureType = 1000250000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV:
    VkStructureType = 1000250001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV:
    VkStructureType = 1000250002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT : VkStructureType = 1000251000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT:
    VkStructureType = 1000252000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT:
    VkStructureType = 1000255000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT:
    VkStructureType = 1000255002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT:
    VkStructureType = 1000255001;
pub const VkStructureType_VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT: VkStructureType =
    1000256000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT:
    VkStructureType = 1000259000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000259001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT:
    VkStructureType = 1000259002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT:
    VkStructureType = 1000260000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT:
    VkStructureType = 1000265000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT:
    VkStructureType = 1000267000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR: VkStructureType =
    1000268000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR : VkStructureType = 1000269000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR: VkStructureType = 1000269001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR: VkStructureType =
    1000269002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR: VkStructureType =
    1000269003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR: VkStructureType =
    1000269004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR:
    VkStructureType = 1000269005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT : VkStructureType = 1000276000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV : VkStructureType = 1000277000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV: VkStructureType =
    1000277001;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV:
    VkStructureType = 1000277002;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV: VkStructureType =
    1000277003;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV:
    VkStructureType = 1000277004;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV: VkStructureType =
    1000277005;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV:
    VkStructureType = 1000277006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV : VkStructureType = 1000277007 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT:
    VkStructureType = 1000281000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT : VkStructureType = 1000281001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM : VkStructureType = 1000282000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM: VkStructureType =
    1000282001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT:
    VkStructureType = 1000286000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT:
    VkStructureType = 1000286001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT:
    VkStructureType = 1000287000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT:
    VkStructureType = 1000287001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT:
    VkStructureType = 1000287002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR: VkStructureType =
    1000290000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT:
    VkStructureType = 1000295000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT: VkStructureType =
    1000295001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT: VkStructureType =
    1000295002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT : VkStructureType = 1000297000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV:
    VkStructureType = 1000300000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV:
    VkStructureType = 1000300001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT:
    VkStructureType = 1000332000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT : VkStructureType = 1000332001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT:
    VkStructureType = 1000335000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT: VkStructureType =
    1000346000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES:
    VkStructureType = 1000063000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: VkStructureType =
    1000011000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: VkStructureType =
    1000053000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR:
    VkStructureType = 1000053001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR:
    VkStructureType = 1000053002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: VkStructureType =
    1000059000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: VkStructureType =
    1000059001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: VkStructureType = 1000059002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType =
    1000059003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR:
    VkStructureType = 1000059004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: VkStructureType =
    1000059005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR:
    VkStructureType = 1000059006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType =
    1000059007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR:
    VkStructureType = 1000059008;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: VkStructureType =
    1000060000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR:
    VkStructureType = 1000060003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR:
    VkStructureType = 1000060004;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: VkStructureType =
    1000060005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: VkStructureType =
    1000060006;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR:
    VkStructureType = 1000060013;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR:
    VkStructureType = 1000060014;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: VkStructureType =
    1000070000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: VkStructureType =
    1000070001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR:
    VkStructureType = 1000071000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: VkStructureType =
    1000071001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR:
    VkStructureType = 1000071002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: VkStructureType =
    1000071003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: VkStructureType =
    1000071004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR:
    VkStructureType = 1000072000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: VkStructureType =
    1000072001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: VkStructureType =
    1000072002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR:
    VkStructureType = 1000076000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: VkStructureType =
    1000076001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: VkStructureType =
    1000077000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR:
    VkStructureType = 1000082000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR:
    VkStructureType = 1000082000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR:
    VkStructureType = 1000083000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR:
    VkStructureType = 1000085000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: VkStructureType = 1000090000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR:
    VkStructureType = 1000108000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR:
    VkStructureType = 1000108001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: VkStructureType =
    1000108002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: VkStructureType =
    1000108003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: VkStructureType =
    1000109000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: VkStructureType =
    1000109001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: VkStructureType = 1000109002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: VkStructureType = 1000109003;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: VkStructureType =
    1000109004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: VkStructureType = 1000109005;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: VkStructureType = 1000109006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR:
    VkStructureType = 1000112000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: VkStructureType =
    1000112001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: VkStructureType =
    1000113000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR:
    VkStructureType = 1000117000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR:
    VkStructureType = 1000117001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: VkStructureType =
    1000117002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR : VkStructureType = 1000117003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: VkStructureType =
    1000127000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: VkStructureType =
    1000127001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT:
    VkStructureType = 1000130000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT:
    VkStructureType = 1000130001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType =
    1000146000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType =
    1000146001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR:
    VkStructureType = 1000146002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: VkStructureType = 1000146003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR:
    VkStructureType = 1000146004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: VkStructureType =
    1000147000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR:
    VkStructureType = 1000156000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: VkStructureType =
    1000156001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: VkStructureType =
    1000156002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR:
    VkStructureType = 1000156003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR : VkStructureType = 1000156004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR:
    VkStructureType = 1000156005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: VkStructureType =
    1000157000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: VkStructureType =
    1000157001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT:
    VkStructureType = 1000161000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT:
    VkStructureType = 1000161001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT:
    VkStructureType = 1000161002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT : VkStructureType = 1000161003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT : VkStructureType = 1000161004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV:
    VkStructureType = 1000165006;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV:
    VkStructureType = 1000165007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR:
    VkStructureType = 1000168000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: VkStructureType =
    1000168001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR : VkStructureType = 1000175000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR:
    VkStructureType = 1000177000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR:
    VkStructureType = 1000180000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: VkStructureType =
    1000196000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR:
    VkStructureType = 1000197000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR:
    VkStructureType = 1000199000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR:
    VkStructureType = 1000199001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR:
    VkStructureType = 1000207000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR:
    VkStructureType = 1000207001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR: VkStructureType =
    1000207002;
pub const VkStructureType_VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR: VkStructureType =
    1000207003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR: VkStructureType = 1000207004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR: VkStructureType = 1000207005;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: VkStructureType =
    1000210000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR:
    VkStructureType = 1000211000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT:
    VkStructureType = 1000221000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR : VkStructureType = 1000241000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR:
    VkStructureType = 1000241001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR:
    VkStructureType = 1000241002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT:
    VkStructureType = 1000244000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: VkStructureType =
    1000244001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: VkStructureType =
    1000246000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR : VkStructureType = 1000253000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR:
    VkStructureType = 1000257000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR: VkStructureType =
    1000244001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR:
    VkStructureType = 1000257002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR:
    VkStructureType = 1000257003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR:
    VkStructureType = 1000257004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT:
    VkStructureType = 1000261000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MAX_ENUM: VkStructureType = 2147483647;
pub type VkStructureType = ::std::os::raw::c_uint;
pub const VkImageLayout_VK_IMAGE_LAYOUT_UNDEFINED: VkImageLayout = 0;
pub const VkImageLayout_VK_IMAGE_LAYOUT_GENERAL: VkImageLayout = 1;
pub const VkImageLayout_VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: VkImageLayout = 2;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout = 3;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout = 4;
pub const VkImageLayout_VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: VkImageLayout = 5;
pub const VkImageLayout_VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: VkImageLayout = 6;
pub const VkImageLayout_VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: VkImageLayout = 7;
pub const VkImageLayout_VK_IMAGE_LAYOUT_PREINITIALIZED: VkImageLayout = 8;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout =
    1000117000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout =
    1000117001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: VkImageLayout = 1000241000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: VkImageLayout = 1000241001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout = 1000241002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout = 1000241003;
pub const VkImageLayout_VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: VkImageLayout = 1000001002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: VkImageLayout = 1000111000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: VkImageLayout = 1000164003;
pub const VkImageLayout_VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: VkImageLayout =
    1000218000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR:
    VkImageLayout = 1000117000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR:
    VkImageLayout = 1000117001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR: VkImageLayout = 1000241000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR: VkImageLayout = 1000241001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR: VkImageLayout = 1000241002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR: VkImageLayout = 1000241003;
pub const VkImageLayout_VK_IMAGE_LAYOUT_MAX_ENUM: VkImageLayout = 2147483647;
pub type VkImageLayout = ::std::os::raw::c_uint;
pub const VkObjectType_VK_OBJECT_TYPE_UNKNOWN: VkObjectType = 0;
pub const VkObjectType_VK_OBJECT_TYPE_INSTANCE: VkObjectType = 1;
pub const VkObjectType_VK_OBJECT_TYPE_PHYSICAL_DEVICE: VkObjectType = 2;
pub const VkObjectType_VK_OBJECT_TYPE_DEVICE: VkObjectType = 3;
pub const VkObjectType_VK_OBJECT_TYPE_QUEUE: VkObjectType = 4;
pub const VkObjectType_VK_OBJECT_TYPE_SEMAPHORE: VkObjectType = 5;
pub const VkObjectType_VK_OBJECT_TYPE_COMMAND_BUFFER: VkObjectType = 6;
pub const VkObjectType_VK_OBJECT_TYPE_FENCE: VkObjectType = 7;
pub const VkObjectType_VK_OBJECT_TYPE_DEVICE_MEMORY: VkObjectType = 8;
pub const VkObjectType_VK_OBJECT_TYPE_BUFFER: VkObjectType = 9;
pub const VkObjectType_VK_OBJECT_TYPE_IMAGE: VkObjectType = 10;
pub const VkObjectType_VK_OBJECT_TYPE_EVENT: VkObjectType = 11;
pub const VkObjectType_VK_OBJECT_TYPE_QUERY_POOL: VkObjectType = 12;
pub const VkObjectType_VK_OBJECT_TYPE_BUFFER_VIEW: VkObjectType = 13;
pub const VkObjectType_VK_OBJECT_TYPE_IMAGE_VIEW: VkObjectType = 14;
pub const VkObjectType_VK_OBJECT_TYPE_SHADER_MODULE: VkObjectType = 15;
pub const VkObjectType_VK_OBJECT_TYPE_PIPELINE_CACHE: VkObjectType = 16;
pub const VkObjectType_VK_OBJECT_TYPE_PIPELINE_LAYOUT: VkObjectType = 17;
pub const VkObjectType_VK_OBJECT_TYPE_RENDER_PASS: VkObjectType = 18;
pub const VkObjectType_VK_OBJECT_TYPE_PIPELINE: VkObjectType = 19;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT: VkObjectType = 20;
pub const VkObjectType_VK_OBJECT_TYPE_SAMPLER: VkObjectType = 21;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_POOL: VkObjectType = 22;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_SET: VkObjectType = 23;
pub const VkObjectType_VK_OBJECT_TYPE_FRAMEBUFFER: VkObjectType = 24;
pub const VkObjectType_VK_OBJECT_TYPE_COMMAND_POOL: VkObjectType = 25;
pub const VkObjectType_VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION: VkObjectType = 1000156000;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE: VkObjectType = 1000085000;
pub const VkObjectType_VK_OBJECT_TYPE_SURFACE_KHR: VkObjectType = 1000000000;
pub const VkObjectType_VK_OBJECT_TYPE_SWAPCHAIN_KHR: VkObjectType = 1000001000;
pub const VkObjectType_VK_OBJECT_TYPE_DISPLAY_KHR: VkObjectType = 1000002000;
pub const VkObjectType_VK_OBJECT_TYPE_DISPLAY_MODE_KHR: VkObjectType = 1000002001;
pub const VkObjectType_VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT: VkObjectType = 1000011000;
pub const VkObjectType_VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: VkObjectType = 1000128000;
pub const VkObjectType_VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR: VkObjectType = 1000165000;
pub const VkObjectType_VK_OBJECT_TYPE_VALIDATION_CACHE_EXT: VkObjectType = 1000160000;
pub const VkObjectType_VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL: VkObjectType = 1000210000;
pub const VkObjectType_VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR: VkObjectType = 1000268000;
pub const VkObjectType_VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV: VkObjectType = 1000277000;
pub const VkObjectType_VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT: VkObjectType = 1000295000;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR: VkObjectType = 1000085000;
pub const VkObjectType_VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR: VkObjectType = 1000156000;
pub const VkObjectType_VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV: VkObjectType = 1000165000;
pub const VkObjectType_VK_OBJECT_TYPE_MAX_ENUM: VkObjectType = 2147483647;
pub type VkObjectType = ::std::os::raw::c_uint;
pub const VkVendorId_VK_VENDOR_ID_VIV: VkVendorId = 65537;
pub const VkVendorId_VK_VENDOR_ID_VSI: VkVendorId = 65538;
pub const VkVendorId_VK_VENDOR_ID_KAZAN: VkVendorId = 65539;
pub const VkVendorId_VK_VENDOR_ID_CODEPLAY: VkVendorId = 65540;
pub const VkVendorId_VK_VENDOR_ID_MESA: VkVendorId = 65541;
pub const VkVendorId_VK_VENDOR_ID_MAX_ENUM: VkVendorId = 2147483647;
pub type VkVendorId = ::std::os::raw::c_uint;
pub const VkPipelineCacheHeaderVersion_VK_PIPELINE_CACHE_HEADER_VERSION_ONE:
    VkPipelineCacheHeaderVersion = 1;
pub const VkPipelineCacheHeaderVersion_VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM:
    VkPipelineCacheHeaderVersion = 2147483647;
pub type VkPipelineCacheHeaderVersion = ::std::os::raw::c_uint;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_COMMAND: VkSystemAllocationScope = 0;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_OBJECT: VkSystemAllocationScope = 1;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_CACHE: VkSystemAllocationScope = 2;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_DEVICE: VkSystemAllocationScope = 3;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE: VkSystemAllocationScope = 4;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM: VkSystemAllocationScope =
    2147483647;
pub type VkSystemAllocationScope = ::std::os::raw::c_uint;
pub const VkInternalAllocationType_VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE:
    VkInternalAllocationType = 0;
pub const VkInternalAllocationType_VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM: VkInternalAllocationType =
    2147483647;
pub type VkInternalAllocationType = ::std::os::raw::c_uint;
pub const VkFormat_VK_FORMAT_UNDEFINED: VkFormat = 0;
pub const VkFormat_VK_FORMAT_R4G4_UNORM_PACK8: VkFormat = 1;
pub const VkFormat_VK_FORMAT_R4G4B4A4_UNORM_PACK16: VkFormat = 2;
pub const VkFormat_VK_FORMAT_B4G4R4A4_UNORM_PACK16: VkFormat = 3;
pub const VkFormat_VK_FORMAT_R5G6B5_UNORM_PACK16: VkFormat = 4;
pub const VkFormat_VK_FORMAT_B5G6R5_UNORM_PACK16: VkFormat = 5;
pub const VkFormat_VK_FORMAT_R5G5B5A1_UNORM_PACK16: VkFormat = 6;
pub const VkFormat_VK_FORMAT_B5G5R5A1_UNORM_PACK16: VkFormat = 7;
pub const VkFormat_VK_FORMAT_A1R5G5B5_UNORM_PACK16: VkFormat = 8;
pub const VkFormat_VK_FORMAT_R8_UNORM: VkFormat = 9;
pub const VkFormat_VK_FORMAT_R8_SNORM: VkFormat = 10;
pub const VkFormat_VK_FORMAT_R8_USCALED: VkFormat = 11;
pub const VkFormat_VK_FORMAT_R8_SSCALED: VkFormat = 12;
pub const VkFormat_VK_FORMAT_R8_UINT: VkFormat = 13;
pub const VkFormat_VK_FORMAT_R8_SINT: VkFormat = 14;
pub const VkFormat_VK_FORMAT_R8_SRGB: VkFormat = 15;
pub const VkFormat_VK_FORMAT_R8G8_UNORM: VkFormat = 16;
pub const VkFormat_VK_FORMAT_R8G8_SNORM: VkFormat = 17;
pub const VkFormat_VK_FORMAT_R8G8_USCALED: VkFormat = 18;
pub const VkFormat_VK_FORMAT_R8G8_SSCALED: VkFormat = 19;
pub const VkFormat_VK_FORMAT_R8G8_UINT: VkFormat = 20;
pub const VkFormat_VK_FORMAT_R8G8_SINT: VkFormat = 21;
pub const VkFormat_VK_FORMAT_R8G8_SRGB: VkFormat = 22;
pub const VkFormat_VK_FORMAT_R8G8B8_UNORM: VkFormat = 23;
pub const VkFormat_VK_FORMAT_R8G8B8_SNORM: VkFormat = 24;
pub const VkFormat_VK_FORMAT_R8G8B8_USCALED: VkFormat = 25;
pub const VkFormat_VK_FORMAT_R8G8B8_SSCALED: VkFormat = 26;
pub const VkFormat_VK_FORMAT_R8G8B8_UINT: VkFormat = 27;
pub const VkFormat_VK_FORMAT_R8G8B8_SINT: VkFormat = 28;
pub const VkFormat_VK_FORMAT_R8G8B8_SRGB: VkFormat = 29;
pub const VkFormat_VK_FORMAT_B8G8R8_UNORM: VkFormat = 30;
pub const VkFormat_VK_FORMAT_B8G8R8_SNORM: VkFormat = 31;
pub const VkFormat_VK_FORMAT_B8G8R8_USCALED: VkFormat = 32;
pub const VkFormat_VK_FORMAT_B8G8R8_SSCALED: VkFormat = 33;
pub const VkFormat_VK_FORMAT_B8G8R8_UINT: VkFormat = 34;
pub const VkFormat_VK_FORMAT_B8G8R8_SINT: VkFormat = 35;
pub const VkFormat_VK_FORMAT_B8G8R8_SRGB: VkFormat = 36;
pub const VkFormat_VK_FORMAT_R8G8B8A8_UNORM: VkFormat = 37;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SNORM: VkFormat = 38;
pub const VkFormat_VK_FORMAT_R8G8B8A8_USCALED: VkFormat = 39;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SSCALED: VkFormat = 40;
pub const VkFormat_VK_FORMAT_R8G8B8A8_UINT: VkFormat = 41;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SINT: VkFormat = 42;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SRGB: VkFormat = 43;
pub const VkFormat_VK_FORMAT_B8G8R8A8_UNORM: VkFormat = 44;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SNORM: VkFormat = 45;
pub const VkFormat_VK_FORMAT_B8G8R8A8_USCALED: VkFormat = 46;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SSCALED: VkFormat = 47;
pub const VkFormat_VK_FORMAT_B8G8R8A8_UINT: VkFormat = 48;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SINT: VkFormat = 49;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SRGB: VkFormat = 50;
pub const VkFormat_VK_FORMAT_A8B8G8R8_UNORM_PACK32: VkFormat = 51;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SNORM_PACK32: VkFormat = 52;
pub const VkFormat_VK_FORMAT_A8B8G8R8_USCALED_PACK32: VkFormat = 53;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SSCALED_PACK32: VkFormat = 54;
pub const VkFormat_VK_FORMAT_A8B8G8R8_UINT_PACK32: VkFormat = 55;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SINT_PACK32: VkFormat = 56;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SRGB_PACK32: VkFormat = 57;
pub const VkFormat_VK_FORMAT_A2R10G10B10_UNORM_PACK32: VkFormat = 58;
pub const VkFormat_VK_FORMAT_A2R10G10B10_SNORM_PACK32: VkFormat = 59;
pub const VkFormat_VK_FORMAT_A2R10G10B10_USCALED_PACK32: VkFormat = 60;
pub const VkFormat_VK_FORMAT_A2R10G10B10_SSCALED_PACK32: VkFormat = 61;
pub const VkFormat_VK_FORMAT_A2R10G10B10_UINT_PACK32: VkFormat = 62;
pub const VkFormat_VK_FORMAT_A2R10G10B10_SINT_PACK32: VkFormat = 63;
pub const VkFormat_VK_FORMAT_A2B10G10R10_UNORM_PACK32: VkFormat = 64;
pub const VkFormat_VK_FORMAT_A2B10G10R10_SNORM_PACK32: VkFormat = 65;
pub const VkFormat_VK_FORMAT_A2B10G10R10_USCALED_PACK32: VkFormat = 66;
pub const VkFormat_VK_FORMAT_A2B10G10R10_SSCALED_PACK32: VkFormat = 67;
pub const VkFormat_VK_FORMAT_A2B10G10R10_UINT_PACK32: VkFormat = 68;
pub const VkFormat_VK_FORMAT_A2B10G10R10_SINT_PACK32: VkFormat = 69;
pub const VkFormat_VK_FORMAT_R16_UNORM: VkFormat = 70;
pub const VkFormat_VK_FORMAT_R16_SNORM: VkFormat = 71;
pub const VkFormat_VK_FORMAT_R16_USCALED: VkFormat = 72;
pub const VkFormat_VK_FORMAT_R16_SSCALED: VkFormat = 73;
pub const VkFormat_VK_FORMAT_R16_UINT: VkFormat = 74;
pub const VkFormat_VK_FORMAT_R16_SINT: VkFormat = 75;
pub const VkFormat_VK_FORMAT_R16_SFLOAT: VkFormat = 76;
pub const VkFormat_VK_FORMAT_R16G16_UNORM: VkFormat = 77;
pub const VkFormat_VK_FORMAT_R16G16_SNORM: VkFormat = 78;
pub const VkFormat_VK_FORMAT_R16G16_USCALED: VkFormat = 79;
pub const VkFormat_VK_FORMAT_R16G16_SSCALED: VkFormat = 80;
pub const VkFormat_VK_FORMAT_R16G16_UINT: VkFormat = 81;
pub const VkFormat_VK_FORMAT_R16G16_SINT: VkFormat = 82;
pub const VkFormat_VK_FORMAT_R16G16_SFLOAT: VkFormat = 83;
pub const VkFormat_VK_FORMAT_R16G16B16_UNORM: VkFormat = 84;
pub const VkFormat_VK_FORMAT_R16G16B16_SNORM: VkFormat = 85;
pub const VkFormat_VK_FORMAT_R16G16B16_USCALED: VkFormat = 86;
pub const VkFormat_VK_FORMAT_R16G16B16_SSCALED: VkFormat = 87;
pub const VkFormat_VK_FORMAT_R16G16B16_UINT: VkFormat = 88;
pub const VkFormat_VK_FORMAT_R16G16B16_SINT: VkFormat = 89;
pub const VkFormat_VK_FORMAT_R16G16B16_SFLOAT: VkFormat = 90;
pub const VkFormat_VK_FORMAT_R16G16B16A16_UNORM: VkFormat = 91;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SNORM: VkFormat = 92;
pub const VkFormat_VK_FORMAT_R16G16B16A16_USCALED: VkFormat = 93;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SSCALED: VkFormat = 94;
pub const VkFormat_VK_FORMAT_R16G16B16A16_UINT: VkFormat = 95;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SINT: VkFormat = 96;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SFLOAT: VkFormat = 97;
pub const VkFormat_VK_FORMAT_R32_UINT: VkFormat = 98;
pub const VkFormat_VK_FORMAT_R32_SINT: VkFormat = 99;
pub const VkFormat_VK_FORMAT_R32_SFLOAT: VkFormat = 100;
pub const VkFormat_VK_FORMAT_R32G32_UINT: VkFormat = 101;
pub const VkFormat_VK_FORMAT_R32G32_SINT: VkFormat = 102;
pub const VkFormat_VK_FORMAT_R32G32_SFLOAT: VkFormat = 103;
pub const VkFormat_VK_FORMAT_R32G32B32_UINT: VkFormat = 104;
pub const VkFormat_VK_FORMAT_R32G32B32_SINT: VkFormat = 105;
pub const VkFormat_VK_FORMAT_R32G32B32_SFLOAT: VkFormat = 106;
pub const VkFormat_VK_FORMAT_R32G32B32A32_UINT: VkFormat = 107;
pub const VkFormat_VK_FORMAT_R32G32B32A32_SINT: VkFormat = 108;
pub const VkFormat_VK_FORMAT_R32G32B32A32_SFLOAT: VkFormat = 109;
pub const VkFormat_VK_FORMAT_R64_UINT: VkFormat = 110;
pub const VkFormat_VK_FORMAT_R64_SINT: VkFormat = 111;
pub const VkFormat_VK_FORMAT_R64_SFLOAT: VkFormat = 112;
pub const VkFormat_VK_FORMAT_R64G64_UINT: VkFormat = 113;
pub const VkFormat_VK_FORMAT_R64G64_SINT: VkFormat = 114;
pub const VkFormat_VK_FORMAT_R64G64_SFLOAT: VkFormat = 115;
pub const VkFormat_VK_FORMAT_R64G64B64_UINT: VkFormat = 116;
pub const VkFormat_VK_FORMAT_R64G64B64_SINT: VkFormat = 117;
pub const VkFormat_VK_FORMAT_R64G64B64_SFLOAT: VkFormat = 118;
pub const VkFormat_VK_FORMAT_R64G64B64A64_UINT: VkFormat = 119;
pub const VkFormat_VK_FORMAT_R64G64B64A64_SINT: VkFormat = 120;
pub const VkFormat_VK_FORMAT_R64G64B64A64_SFLOAT: VkFormat = 121;
pub const VkFormat_VK_FORMAT_B10G11R11_UFLOAT_PACK32: VkFormat = 122;
pub const VkFormat_VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: VkFormat = 123;
pub const VkFormat_VK_FORMAT_D16_UNORM: VkFormat = 124;
pub const VkFormat_VK_FORMAT_X8_D24_UNORM_PACK32: VkFormat = 125;
pub const VkFormat_VK_FORMAT_D32_SFLOAT: VkFormat = 126;
pub const VkFormat_VK_FORMAT_S8_UINT: VkFormat = 127;
pub const VkFormat_VK_FORMAT_D16_UNORM_S8_UINT: VkFormat = 128;
pub const VkFormat_VK_FORMAT_D24_UNORM_S8_UINT: VkFormat = 129;
pub const VkFormat_VK_FORMAT_D32_SFLOAT_S8_UINT: VkFormat = 130;
pub const VkFormat_VK_FORMAT_BC1_RGB_UNORM_BLOCK: VkFormat = 131;
pub const VkFormat_VK_FORMAT_BC1_RGB_SRGB_BLOCK: VkFormat = 132;
pub const VkFormat_VK_FORMAT_BC1_RGBA_UNORM_BLOCK: VkFormat = 133;
pub const VkFormat_VK_FORMAT_BC1_RGBA_SRGB_BLOCK: VkFormat = 134;
pub const VkFormat_VK_FORMAT_BC2_UNORM_BLOCK: VkFormat = 135;
pub const VkFormat_VK_FORMAT_BC2_SRGB_BLOCK: VkFormat = 136;
pub const VkFormat_VK_FORMAT_BC3_UNORM_BLOCK: VkFormat = 137;
pub const VkFormat_VK_FORMAT_BC3_SRGB_BLOCK: VkFormat = 138;
pub const VkFormat_VK_FORMAT_BC4_UNORM_BLOCK: VkFormat = 139;
pub const VkFormat_VK_FORMAT_BC4_SNORM_BLOCK: VkFormat = 140;
pub const VkFormat_VK_FORMAT_BC5_UNORM_BLOCK: VkFormat = 141;
pub const VkFormat_VK_FORMAT_BC5_SNORM_BLOCK: VkFormat = 142;
pub const VkFormat_VK_FORMAT_BC6H_UFLOAT_BLOCK: VkFormat = 143;
pub const VkFormat_VK_FORMAT_BC6H_SFLOAT_BLOCK: VkFormat = 144;
pub const VkFormat_VK_FORMAT_BC7_UNORM_BLOCK: VkFormat = 145;
pub const VkFormat_VK_FORMAT_BC7_SRGB_BLOCK: VkFormat = 146;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: VkFormat = 147;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: VkFormat = 148;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: VkFormat = 149;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: VkFormat = 150;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: VkFormat = 151;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: VkFormat = 152;
pub const VkFormat_VK_FORMAT_EAC_R11_UNORM_BLOCK: VkFormat = 153;
pub const VkFormat_VK_FORMAT_EAC_R11_SNORM_BLOCK: VkFormat = 154;
pub const VkFormat_VK_FORMAT_EAC_R11G11_UNORM_BLOCK: VkFormat = 155;
pub const VkFormat_VK_FORMAT_EAC_R11G11_SNORM_BLOCK: VkFormat = 156;
pub const VkFormat_VK_FORMAT_ASTC_4x4_UNORM_BLOCK: VkFormat = 157;
pub const VkFormat_VK_FORMAT_ASTC_4x4_SRGB_BLOCK: VkFormat = 158;
pub const VkFormat_VK_FORMAT_ASTC_5x4_UNORM_BLOCK: VkFormat = 159;
pub const VkFormat_VK_FORMAT_ASTC_5x4_SRGB_BLOCK: VkFormat = 160;
pub const VkFormat_VK_FORMAT_ASTC_5x5_UNORM_BLOCK: VkFormat = 161;
pub const VkFormat_VK_FORMAT_ASTC_5x5_SRGB_BLOCK: VkFormat = 162;
pub const VkFormat_VK_FORMAT_ASTC_6x5_UNORM_BLOCK: VkFormat = 163;
pub const VkFormat_VK_FORMAT_ASTC_6x5_SRGB_BLOCK: VkFormat = 164;
pub const VkFormat_VK_FORMAT_ASTC_6x6_UNORM_BLOCK: VkFormat = 165;
pub const VkFormat_VK_FORMAT_ASTC_6x6_SRGB_BLOCK: VkFormat = 166;
pub const VkFormat_VK_FORMAT_ASTC_8x5_UNORM_BLOCK: VkFormat = 167;
pub const VkFormat_VK_FORMAT_ASTC_8x5_SRGB_BLOCK: VkFormat = 168;
pub const VkFormat_VK_FORMAT_ASTC_8x6_UNORM_BLOCK: VkFormat = 169;
pub const VkFormat_VK_FORMAT_ASTC_8x6_SRGB_BLOCK: VkFormat = 170;
pub const VkFormat_VK_FORMAT_ASTC_8x8_UNORM_BLOCK: VkFormat = 171;
pub const VkFormat_VK_FORMAT_ASTC_8x8_SRGB_BLOCK: VkFormat = 172;
pub const VkFormat_VK_FORMAT_ASTC_10x5_UNORM_BLOCK: VkFormat = 173;
pub const VkFormat_VK_FORMAT_ASTC_10x5_SRGB_BLOCK: VkFormat = 174;
pub const VkFormat_VK_FORMAT_ASTC_10x6_UNORM_BLOCK: VkFormat = 175;
pub const VkFormat_VK_FORMAT_ASTC_10x6_SRGB_BLOCK: VkFormat = 176;
pub const VkFormat_VK_FORMAT_ASTC_10x8_UNORM_BLOCK: VkFormat = 177;
pub const VkFormat_VK_FORMAT_ASTC_10x8_SRGB_BLOCK: VkFormat = 178;
pub const VkFormat_VK_FORMAT_ASTC_10x10_UNORM_BLOCK: VkFormat = 179;
pub const VkFormat_VK_FORMAT_ASTC_10x10_SRGB_BLOCK: VkFormat = 180;
pub const VkFormat_VK_FORMAT_ASTC_12x10_UNORM_BLOCK: VkFormat = 181;
pub const VkFormat_VK_FORMAT_ASTC_12x10_SRGB_BLOCK: VkFormat = 182;
pub const VkFormat_VK_FORMAT_ASTC_12x12_UNORM_BLOCK: VkFormat = 183;
pub const VkFormat_VK_FORMAT_ASTC_12x12_SRGB_BLOCK: VkFormat = 184;
pub const VkFormat_VK_FORMAT_G8B8G8R8_422_UNORM: VkFormat = 1000156000;
pub const VkFormat_VK_FORMAT_B8G8R8G8_422_UNORM: VkFormat = 1000156001;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM: VkFormat = 1000156002;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_420_UNORM: VkFormat = 1000156003;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM: VkFormat = 1000156004;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_422_UNORM: VkFormat = 1000156005;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM: VkFormat = 1000156006;
pub const VkFormat_VK_FORMAT_R10X6_UNORM_PACK16: VkFormat = 1000156007;
pub const VkFormat_VK_FORMAT_R10X6G10X6_UNORM_2PACK16: VkFormat = 1000156008;
pub const VkFormat_VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: VkFormat = 1000156009;
pub const VkFormat_VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: VkFormat = 1000156010;
pub const VkFormat_VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: VkFormat = 1000156011;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: VkFormat = 1000156012;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: VkFormat = 1000156013;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: VkFormat = 1000156014;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: VkFormat = 1000156015;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: VkFormat = 1000156016;
pub const VkFormat_VK_FORMAT_R12X4_UNORM_PACK16: VkFormat = 1000156017;
pub const VkFormat_VK_FORMAT_R12X4G12X4_UNORM_2PACK16: VkFormat = 1000156018;
pub const VkFormat_VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: VkFormat = 1000156019;
pub const VkFormat_VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: VkFormat = 1000156020;
pub const VkFormat_VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: VkFormat = 1000156021;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: VkFormat = 1000156022;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: VkFormat = 1000156023;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: VkFormat = 1000156024;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: VkFormat = 1000156025;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: VkFormat = 1000156026;
pub const VkFormat_VK_FORMAT_G16B16G16R16_422_UNORM: VkFormat = 1000156027;
pub const VkFormat_VK_FORMAT_B16G16R16G16_422_UNORM: VkFormat = 1000156028;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM: VkFormat = 1000156029;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_420_UNORM: VkFormat = 1000156030;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM: VkFormat = 1000156031;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_422_UNORM: VkFormat = 1000156032;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM: VkFormat = 1000156033;
pub const VkFormat_VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: VkFormat = 1000054000;
pub const VkFormat_VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: VkFormat = 1000054001;
pub const VkFormat_VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: VkFormat = 1000054002;
pub const VkFormat_VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: VkFormat = 1000054003;
pub const VkFormat_VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: VkFormat = 1000054004;
pub const VkFormat_VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: VkFormat = 1000054005;
pub const VkFormat_VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: VkFormat = 1000054006;
pub const VkFormat_VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: VkFormat = 1000054007;
pub const VkFormat_VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT: VkFormat = 1000066000;
pub const VkFormat_VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT: VkFormat = 1000066001;
pub const VkFormat_VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT: VkFormat = 1000066002;
pub const VkFormat_VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT: VkFormat = 1000066003;
pub const VkFormat_VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT: VkFormat = 1000066004;
pub const VkFormat_VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT: VkFormat = 1000066005;
pub const VkFormat_VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT: VkFormat = 1000066006;
pub const VkFormat_VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT: VkFormat = 1000066007;
pub const VkFormat_VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT: VkFormat = 1000066008;
pub const VkFormat_VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT: VkFormat = 1000066009;
pub const VkFormat_VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT: VkFormat = 1000066010;
pub const VkFormat_VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT: VkFormat = 1000066011;
pub const VkFormat_VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT: VkFormat = 1000066012;
pub const VkFormat_VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT: VkFormat = 1000066013;
pub const VkFormat_VK_FORMAT_G8B8G8R8_422_UNORM_KHR: VkFormat = 1000156000;
pub const VkFormat_VK_FORMAT_B8G8R8G8_422_UNORM_KHR: VkFormat = 1000156001;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: VkFormat = 1000156002;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: VkFormat = 1000156003;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: VkFormat = 1000156004;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: VkFormat = 1000156005;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: VkFormat = 1000156006;
pub const VkFormat_VK_FORMAT_R10X6_UNORM_PACK16_KHR: VkFormat = 1000156007;
pub const VkFormat_VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: VkFormat = 1000156008;
pub const VkFormat_VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: VkFormat = 1000156009;
pub const VkFormat_VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: VkFormat = 1000156010;
pub const VkFormat_VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: VkFormat = 1000156011;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156012;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156013;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156014;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156015;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: VkFormat = 1000156016;
pub const VkFormat_VK_FORMAT_R12X4_UNORM_PACK16_KHR: VkFormat = 1000156017;
pub const VkFormat_VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: VkFormat = 1000156018;
pub const VkFormat_VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: VkFormat = 1000156019;
pub const VkFormat_VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: VkFormat = 1000156020;
pub const VkFormat_VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: VkFormat = 1000156021;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156022;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156023;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156024;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156025;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: VkFormat = 1000156026;
pub const VkFormat_VK_FORMAT_G16B16G16R16_422_UNORM_KHR: VkFormat = 1000156027;
pub const VkFormat_VK_FORMAT_B16G16R16G16_422_UNORM_KHR: VkFormat = 1000156028;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: VkFormat = 1000156029;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: VkFormat = 1000156030;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: VkFormat = 1000156031;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: VkFormat = 1000156032;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: VkFormat = 1000156033;
pub const VkFormat_VK_FORMAT_MAX_ENUM: VkFormat = 2147483647;
pub type VkFormat = ::std::os::raw::c_uint;
pub const VkImageTiling_VK_IMAGE_TILING_OPTIMAL: VkImageTiling = 0;
pub const VkImageTiling_VK_IMAGE_TILING_LINEAR: VkImageTiling = 1;
pub const VkImageTiling_VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT: VkImageTiling = 1000158000;
pub const VkImageTiling_VK_IMAGE_TILING_MAX_ENUM: VkImageTiling = 2147483647;
pub type VkImageTiling = ::std::os::raw::c_uint;
pub const VkImageType_VK_IMAGE_TYPE_1D: VkImageType = 0;
pub const VkImageType_VK_IMAGE_TYPE_2D: VkImageType = 1;
pub const VkImageType_VK_IMAGE_TYPE_3D: VkImageType = 2;
pub const VkImageType_VK_IMAGE_TYPE_MAX_ENUM: VkImageType = 2147483647;
pub type VkImageType = ::std::os::raw::c_uint;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_OTHER: VkPhysicalDeviceType = 0;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU: VkPhysicalDeviceType = 1;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU: VkPhysicalDeviceType = 2;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU: VkPhysicalDeviceType = 3;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_CPU: VkPhysicalDeviceType = 4;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM: VkPhysicalDeviceType = 2147483647;
pub type VkPhysicalDeviceType = ::std::os::raw::c_uint;
pub const VkQueryType_VK_QUERY_TYPE_OCCLUSION: VkQueryType = 0;
pub const VkQueryType_VK_QUERY_TYPE_PIPELINE_STATISTICS: VkQueryType = 1;
pub const VkQueryType_VK_QUERY_TYPE_TIMESTAMP: VkQueryType = 2;
pub const VkQueryType_VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: VkQueryType = 1000028004;
pub const VkQueryType_VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR: VkQueryType = 1000116000;
pub const VkQueryType_VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR: VkQueryType =
    1000165000;
pub const VkQueryType_VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR: VkQueryType =
    1000150000;
pub const VkQueryType_VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL: VkQueryType = 1000210000;
pub const VkQueryType_VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV: VkQueryType =
    1000165000;
pub const VkQueryType_VK_QUERY_TYPE_MAX_ENUM: VkQueryType = 2147483647;
pub type VkQueryType = ::std::os::raw::c_uint;
pub const VkSharingMode_VK_SHARING_MODE_EXCLUSIVE: VkSharingMode = 0;
pub const VkSharingMode_VK_SHARING_MODE_CONCURRENT: VkSharingMode = 1;
pub const VkSharingMode_VK_SHARING_MODE_MAX_ENUM: VkSharingMode = 2147483647;
pub type VkSharingMode = ::std::os::raw::c_uint;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_IDENTITY: VkComponentSwizzle = 0;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_ZERO: VkComponentSwizzle = 1;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_ONE: VkComponentSwizzle = 2;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_R: VkComponentSwizzle = 3;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_G: VkComponentSwizzle = 4;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_B: VkComponentSwizzle = 5;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_A: VkComponentSwizzle = 6;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_MAX_ENUM: VkComponentSwizzle = 2147483647;
pub type VkComponentSwizzle = ::std::os::raw::c_uint;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_1D: VkImageViewType = 0;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_2D: VkImageViewType = 1;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_3D: VkImageViewType = 2;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_CUBE: VkImageViewType = 3;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_1D_ARRAY: VkImageViewType = 4;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_2D_ARRAY: VkImageViewType = 5;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_CUBE_ARRAY: VkImageViewType = 6;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_MAX_ENUM: VkImageViewType = 2147483647;
pub type VkImageViewType = ::std::os::raw::c_uint;
pub const VkBlendFactor_VK_BLEND_FACTOR_ZERO: VkBlendFactor = 0;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE: VkBlendFactor = 1;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC_COLOR: VkBlendFactor = 2;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: VkBlendFactor = 3;
pub const VkBlendFactor_VK_BLEND_FACTOR_DST_COLOR: VkBlendFactor = 4;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: VkBlendFactor = 5;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC_ALPHA: VkBlendFactor = 6;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: VkBlendFactor = 7;
pub const VkBlendFactor_VK_BLEND_FACTOR_DST_ALPHA: VkBlendFactor = 8;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: VkBlendFactor = 9;
pub const VkBlendFactor_VK_BLEND_FACTOR_CONSTANT_COLOR: VkBlendFactor = 10;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: VkBlendFactor = 11;
pub const VkBlendFactor_VK_BLEND_FACTOR_CONSTANT_ALPHA: VkBlendFactor = 12;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: VkBlendFactor = 13;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: VkBlendFactor = 14;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC1_COLOR: VkBlendFactor = 15;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: VkBlendFactor = 16;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC1_ALPHA: VkBlendFactor = 17;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: VkBlendFactor = 18;
pub const VkBlendFactor_VK_BLEND_FACTOR_MAX_ENUM: VkBlendFactor = 2147483647;
pub type VkBlendFactor = ::std::os::raw::c_uint;
pub const VkBlendOp_VK_BLEND_OP_ADD: VkBlendOp = 0;
pub const VkBlendOp_VK_BLEND_OP_SUBTRACT: VkBlendOp = 1;
pub const VkBlendOp_VK_BLEND_OP_REVERSE_SUBTRACT: VkBlendOp = 2;
pub const VkBlendOp_VK_BLEND_OP_MIN: VkBlendOp = 3;
pub const VkBlendOp_VK_BLEND_OP_MAX: VkBlendOp = 4;
pub const VkBlendOp_VK_BLEND_OP_ZERO_EXT: VkBlendOp = 1000148000;
pub const VkBlendOp_VK_BLEND_OP_SRC_EXT: VkBlendOp = 1000148001;
pub const VkBlendOp_VK_BLEND_OP_DST_EXT: VkBlendOp = 1000148002;
pub const VkBlendOp_VK_BLEND_OP_SRC_OVER_EXT: VkBlendOp = 1000148003;
pub const VkBlendOp_VK_BLEND_OP_DST_OVER_EXT: VkBlendOp = 1000148004;
pub const VkBlendOp_VK_BLEND_OP_SRC_IN_EXT: VkBlendOp = 1000148005;
pub const VkBlendOp_VK_BLEND_OP_DST_IN_EXT: VkBlendOp = 1000148006;
pub const VkBlendOp_VK_BLEND_OP_SRC_OUT_EXT: VkBlendOp = 1000148007;
pub const VkBlendOp_VK_BLEND_OP_DST_OUT_EXT: VkBlendOp = 1000148008;
pub const VkBlendOp_VK_BLEND_OP_SRC_ATOP_EXT: VkBlendOp = 1000148009;
pub const VkBlendOp_VK_BLEND_OP_DST_ATOP_EXT: VkBlendOp = 1000148010;
pub const VkBlendOp_VK_BLEND_OP_XOR_EXT: VkBlendOp = 1000148011;
pub const VkBlendOp_VK_BLEND_OP_MULTIPLY_EXT: VkBlendOp = 1000148012;
pub const VkBlendOp_VK_BLEND_OP_SCREEN_EXT: VkBlendOp = 1000148013;
pub const VkBlendOp_VK_BLEND_OP_OVERLAY_EXT: VkBlendOp = 1000148014;
pub const VkBlendOp_VK_BLEND_OP_DARKEN_EXT: VkBlendOp = 1000148015;
pub const VkBlendOp_VK_BLEND_OP_LIGHTEN_EXT: VkBlendOp = 1000148016;
pub const VkBlendOp_VK_BLEND_OP_COLORDODGE_EXT: VkBlendOp = 1000148017;
pub const VkBlendOp_VK_BLEND_OP_COLORBURN_EXT: VkBlendOp = 1000148018;
pub const VkBlendOp_VK_BLEND_OP_HARDLIGHT_EXT: VkBlendOp = 1000148019;
pub const VkBlendOp_VK_BLEND_OP_SOFTLIGHT_EXT: VkBlendOp = 1000148020;
pub const VkBlendOp_VK_BLEND_OP_DIFFERENCE_EXT: VkBlendOp = 1000148021;
pub const VkBlendOp_VK_BLEND_OP_EXCLUSION_EXT: VkBlendOp = 1000148022;
pub const VkBlendOp_VK_BLEND_OP_INVERT_EXT: VkBlendOp = 1000148023;
pub const VkBlendOp_VK_BLEND_OP_INVERT_RGB_EXT: VkBlendOp = 1000148024;
pub const VkBlendOp_VK_BLEND_OP_LINEARDODGE_EXT: VkBlendOp = 1000148025;
pub const VkBlendOp_VK_BLEND_OP_LINEARBURN_EXT: VkBlendOp = 1000148026;
pub const VkBlendOp_VK_BLEND_OP_VIVIDLIGHT_EXT: VkBlendOp = 1000148027;
pub const VkBlendOp_VK_BLEND_OP_LINEARLIGHT_EXT: VkBlendOp = 1000148028;
pub const VkBlendOp_VK_BLEND_OP_PINLIGHT_EXT: VkBlendOp = 1000148029;
pub const VkBlendOp_VK_BLEND_OP_HARDMIX_EXT: VkBlendOp = 1000148030;
pub const VkBlendOp_VK_BLEND_OP_HSL_HUE_EXT: VkBlendOp = 1000148031;
pub const VkBlendOp_VK_BLEND_OP_HSL_SATURATION_EXT: VkBlendOp = 1000148032;
pub const VkBlendOp_VK_BLEND_OP_HSL_COLOR_EXT: VkBlendOp = 1000148033;
pub const VkBlendOp_VK_BLEND_OP_HSL_LUMINOSITY_EXT: VkBlendOp = 1000148034;
pub const VkBlendOp_VK_BLEND_OP_PLUS_EXT: VkBlendOp = 1000148035;
pub const VkBlendOp_VK_BLEND_OP_PLUS_CLAMPED_EXT: VkBlendOp = 1000148036;
pub const VkBlendOp_VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: VkBlendOp = 1000148037;
pub const VkBlendOp_VK_BLEND_OP_PLUS_DARKER_EXT: VkBlendOp = 1000148038;
pub const VkBlendOp_VK_BLEND_OP_MINUS_EXT: VkBlendOp = 1000148039;
pub const VkBlendOp_VK_BLEND_OP_MINUS_CLAMPED_EXT: VkBlendOp = 1000148040;
pub const VkBlendOp_VK_BLEND_OP_CONTRAST_EXT: VkBlendOp = 1000148041;
pub const VkBlendOp_VK_BLEND_OP_INVERT_OVG_EXT: VkBlendOp = 1000148042;
pub const VkBlendOp_VK_BLEND_OP_RED_EXT: VkBlendOp = 1000148043;
pub const VkBlendOp_VK_BLEND_OP_GREEN_EXT: VkBlendOp = 1000148044;
pub const VkBlendOp_VK_BLEND_OP_BLUE_EXT: VkBlendOp = 1000148045;
pub const VkBlendOp_VK_BLEND_OP_MAX_ENUM: VkBlendOp = 2147483647;
pub type VkBlendOp = ::std::os::raw::c_uint;
pub const VkCompareOp_VK_COMPARE_OP_NEVER: VkCompareOp = 0;
pub const VkCompareOp_VK_COMPARE_OP_LESS: VkCompareOp = 1;
pub const VkCompareOp_VK_COMPARE_OP_EQUAL: VkCompareOp = 2;
pub const VkCompareOp_VK_COMPARE_OP_LESS_OR_EQUAL: VkCompareOp = 3;
pub const VkCompareOp_VK_COMPARE_OP_GREATER: VkCompareOp = 4;
pub const VkCompareOp_VK_COMPARE_OP_NOT_EQUAL: VkCompareOp = 5;
pub const VkCompareOp_VK_COMPARE_OP_GREATER_OR_EQUAL: VkCompareOp = 6;
pub const VkCompareOp_VK_COMPARE_OP_ALWAYS: VkCompareOp = 7;
pub const VkCompareOp_VK_COMPARE_OP_MAX_ENUM: VkCompareOp = 2147483647;
pub type VkCompareOp = ::std::os::raw::c_uint;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT: VkDynamicState = 0;
pub const VkDynamicState_VK_DYNAMIC_STATE_SCISSOR: VkDynamicState = 1;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_WIDTH: VkDynamicState = 2;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BIAS: VkDynamicState = 3;
pub const VkDynamicState_VK_DYNAMIC_STATE_BLEND_CONSTANTS: VkDynamicState = 4;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BOUNDS: VkDynamicState = 5;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK: VkDynamicState = 6;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_WRITE_MASK: VkDynamicState = 7;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_REFERENCE: VkDynamicState = 8;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV: VkDynamicState = 1000087000;
pub const VkDynamicState_VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT: VkDynamicState = 1000099000;
pub const VkDynamicState_VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT: VkDynamicState = 1000143000;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV: VkDynamicState =
    1000164004;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV: VkDynamicState =
    1000164006;
pub const VkDynamicState_VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV: VkDynamicState = 1000205001;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_STIPPLE_EXT: VkDynamicState = 1000259000;
pub const VkDynamicState_VK_DYNAMIC_STATE_CULL_MODE_EXT: VkDynamicState = 1000267000;
pub const VkDynamicState_VK_DYNAMIC_STATE_FRONT_FACE_EXT: VkDynamicState = 1000267001;
pub const VkDynamicState_VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT: VkDynamicState = 1000267002;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT: VkDynamicState = 1000267003;
pub const VkDynamicState_VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT: VkDynamicState = 1000267004;
pub const VkDynamicState_VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT: VkDynamicState =
    1000267005;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT: VkDynamicState = 1000267006;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT: VkDynamicState = 1000267007;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT: VkDynamicState = 1000267008;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT: VkDynamicState = 1000267009;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT: VkDynamicState = 1000267010;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_OP_EXT: VkDynamicState = 1000267011;
pub const VkDynamicState_VK_DYNAMIC_STATE_MAX_ENUM: VkDynamicState = 2147483647;
pub type VkDynamicState = ::std::os::raw::c_uint;
pub const VkFrontFace_VK_FRONT_FACE_COUNTER_CLOCKWISE: VkFrontFace = 0;
pub const VkFrontFace_VK_FRONT_FACE_CLOCKWISE: VkFrontFace = 1;
pub const VkFrontFace_VK_FRONT_FACE_MAX_ENUM: VkFrontFace = 2147483647;
pub type VkFrontFace = ::std::os::raw::c_uint;
pub const VkVertexInputRate_VK_VERTEX_INPUT_RATE_VERTEX: VkVertexInputRate = 0;
pub const VkVertexInputRate_VK_VERTEX_INPUT_RATE_INSTANCE: VkVertexInputRate = 1;
pub const VkVertexInputRate_VK_VERTEX_INPUT_RATE_MAX_ENUM: VkVertexInputRate = 2147483647;
pub type VkVertexInputRate = ::std::os::raw::c_uint;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_POINT_LIST: VkPrimitiveTopology = 0;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_LINE_LIST: VkPrimitiveTopology = 1;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_LINE_STRIP: VkPrimitiveTopology = 2;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: VkPrimitiveTopology = 3;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: VkPrimitiveTopology = 4;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: VkPrimitiveTopology = 5;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY: VkPrimitiveTopology =
    6;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY: VkPrimitiveTopology =
    7;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY:
    VkPrimitiveTopology = 8;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY:
    VkPrimitiveTopology = 9;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_PATCH_LIST: VkPrimitiveTopology = 10;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_MAX_ENUM: VkPrimitiveTopology = 2147483647;
pub type VkPrimitiveTopology = ::std::os::raw::c_uint;
pub const VkPolygonMode_VK_POLYGON_MODE_FILL: VkPolygonMode = 0;
pub const VkPolygonMode_VK_POLYGON_MODE_LINE: VkPolygonMode = 1;
pub const VkPolygonMode_VK_POLYGON_MODE_POINT: VkPolygonMode = 2;
pub const VkPolygonMode_VK_POLYGON_MODE_FILL_RECTANGLE_NV: VkPolygonMode = 1000153000;
pub const VkPolygonMode_VK_POLYGON_MODE_MAX_ENUM: VkPolygonMode = 2147483647;
pub type VkPolygonMode = ::std::os::raw::c_uint;
pub const VkStencilOp_VK_STENCIL_OP_KEEP: VkStencilOp = 0;
pub const VkStencilOp_VK_STENCIL_OP_ZERO: VkStencilOp = 1;
pub const VkStencilOp_VK_STENCIL_OP_REPLACE: VkStencilOp = 2;
pub const VkStencilOp_VK_STENCIL_OP_INCREMENT_AND_CLAMP: VkStencilOp = 3;
pub const VkStencilOp_VK_STENCIL_OP_DECREMENT_AND_CLAMP: VkStencilOp = 4;
pub const VkStencilOp_VK_STENCIL_OP_INVERT: VkStencilOp = 5;
pub const VkStencilOp_VK_STENCIL_OP_INCREMENT_AND_WRAP: VkStencilOp = 6;
pub const VkStencilOp_VK_STENCIL_OP_DECREMENT_AND_WRAP: VkStencilOp = 7;
pub const VkStencilOp_VK_STENCIL_OP_MAX_ENUM: VkStencilOp = 2147483647;
pub type VkStencilOp = ::std::os::raw::c_uint;
pub const VkLogicOp_VK_LOGIC_OP_CLEAR: VkLogicOp = 0;
pub const VkLogicOp_VK_LOGIC_OP_AND: VkLogicOp = 1;
pub const VkLogicOp_VK_LOGIC_OP_AND_REVERSE: VkLogicOp = 2;
pub const VkLogicOp_VK_LOGIC_OP_COPY: VkLogicOp = 3;
pub const VkLogicOp_VK_LOGIC_OP_AND_INVERTED: VkLogicOp = 4;
pub const VkLogicOp_VK_LOGIC_OP_NO_OP: VkLogicOp = 5;
pub const VkLogicOp_VK_LOGIC_OP_XOR: VkLogicOp = 6;
pub const VkLogicOp_VK_LOGIC_OP_OR: VkLogicOp = 7;
pub const VkLogicOp_VK_LOGIC_OP_NOR: VkLogicOp = 8;
pub const VkLogicOp_VK_LOGIC_OP_EQUIVALENT: VkLogicOp = 9;
pub const VkLogicOp_VK_LOGIC_OP_INVERT: VkLogicOp = 10;
pub const VkLogicOp_VK_LOGIC_OP_OR_REVERSE: VkLogicOp = 11;
pub const VkLogicOp_VK_LOGIC_OP_COPY_INVERTED: VkLogicOp = 12;
pub const VkLogicOp_VK_LOGIC_OP_OR_INVERTED: VkLogicOp = 13;
pub const VkLogicOp_VK_LOGIC_OP_NAND: VkLogicOp = 14;
pub const VkLogicOp_VK_LOGIC_OP_SET: VkLogicOp = 15;
pub const VkLogicOp_VK_LOGIC_OP_MAX_ENUM: VkLogicOp = 2147483647;
pub type VkLogicOp = ::std::os::raw::c_uint;
pub const VkBorderColor_VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: VkBorderColor = 0;
pub const VkBorderColor_VK_BORDER_COLOR_INT_TRANSPARENT_BLACK: VkBorderColor = 1;
pub const VkBorderColor_VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK: VkBorderColor = 2;
pub const VkBorderColor_VK_BORDER_COLOR_INT_OPAQUE_BLACK: VkBorderColor = 3;
pub const VkBorderColor_VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE: VkBorderColor = 4;
pub const VkBorderColor_VK_BORDER_COLOR_INT_OPAQUE_WHITE: VkBorderColor = 5;
pub const VkBorderColor_VK_BORDER_COLOR_FLOAT_CUSTOM_EXT: VkBorderColor = 1000287003;
pub const VkBorderColor_VK_BORDER_COLOR_INT_CUSTOM_EXT: VkBorderColor = 1000287004;
pub const VkBorderColor_VK_BORDER_COLOR_MAX_ENUM: VkBorderColor = 2147483647;
pub type VkBorderColor = ::std::os::raw::c_uint;
pub const VkFilter_VK_FILTER_NEAREST: VkFilter = 0;
pub const VkFilter_VK_FILTER_LINEAR: VkFilter = 1;
pub const VkFilter_VK_FILTER_CUBIC_IMG: VkFilter = 1000015000;
pub const VkFilter_VK_FILTER_CUBIC_EXT: VkFilter = 1000015000;
pub const VkFilter_VK_FILTER_MAX_ENUM: VkFilter = 2147483647;
pub type VkFilter = ::std::os::raw::c_uint;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_REPEAT: VkSamplerAddressMode = 0;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT: VkSamplerAddressMode = 1;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: VkSamplerAddressMode = 2;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: VkSamplerAddressMode = 3;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: VkSamplerAddressMode =
    4;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR:
    VkSamplerAddressMode = 4;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_MAX_ENUM: VkSamplerAddressMode = 2147483647;
pub type VkSamplerAddressMode = ::std::os::raw::c_uint;
pub const VkSamplerMipmapMode_VK_SAMPLER_MIPMAP_MODE_NEAREST: VkSamplerMipmapMode = 0;
pub const VkSamplerMipmapMode_VK_SAMPLER_MIPMAP_MODE_LINEAR: VkSamplerMipmapMode = 1;
pub const VkSamplerMipmapMode_VK_SAMPLER_MIPMAP_MODE_MAX_ENUM: VkSamplerMipmapMode = 2147483647;
pub type VkSamplerMipmapMode = ::std::os::raw::c_uint;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_SAMPLER: VkDescriptorType = 0;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: VkDescriptorType = 1;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE: VkDescriptorType = 2;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_IMAGE: VkDescriptorType = 3;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: VkDescriptorType = 4;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: VkDescriptorType = 5;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER: VkDescriptorType = 6;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_BUFFER: VkDescriptorType = 7;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: VkDescriptorType = 8;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: VkDescriptorType = 9;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: VkDescriptorType = 10;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT: VkDescriptorType =
    1000138000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR: VkDescriptorType =
    1000165000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV: VkDescriptorType =
    1000165000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_MAX_ENUM: VkDescriptorType = 2147483647;
pub type VkDescriptorType = ::std::os::raw::c_uint;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_LOAD: VkAttachmentLoadOp = 0;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_CLEAR: VkAttachmentLoadOp = 1;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_DONT_CARE: VkAttachmentLoadOp = 2;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_MAX_ENUM: VkAttachmentLoadOp = 2147483647;
pub type VkAttachmentLoadOp = ::std::os::raw::c_uint;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_STORE: VkAttachmentStoreOp = 0;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_DONT_CARE: VkAttachmentStoreOp = 1;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_NONE_QCOM: VkAttachmentStoreOp = 1000301000;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_MAX_ENUM: VkAttachmentStoreOp = 2147483647;
pub type VkAttachmentStoreOp = ::std::os::raw::c_uint;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_GRAPHICS: VkPipelineBindPoint = 0;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_COMPUTE: VkPipelineBindPoint = 1;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR: VkPipelineBindPoint =
    1000165000;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_RAY_TRACING_NV: VkPipelineBindPoint =
    1000165000;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_MAX_ENUM: VkPipelineBindPoint = 2147483647;
pub type VkPipelineBindPoint = ::std::os::raw::c_uint;
pub const VkCommandBufferLevel_VK_COMMAND_BUFFER_LEVEL_PRIMARY: VkCommandBufferLevel = 0;
pub const VkCommandBufferLevel_VK_COMMAND_BUFFER_LEVEL_SECONDARY: VkCommandBufferLevel = 1;
pub const VkCommandBufferLevel_VK_COMMAND_BUFFER_LEVEL_MAX_ENUM: VkCommandBufferLevel = 2147483647;
pub type VkCommandBufferLevel = ::std::os::raw::c_uint;
pub const VkIndexType_VK_INDEX_TYPE_UINT16: VkIndexType = 0;
pub const VkIndexType_VK_INDEX_TYPE_UINT32: VkIndexType = 1;
pub const VkIndexType_VK_INDEX_TYPE_NONE_KHR: VkIndexType = 1000165000;
pub const VkIndexType_VK_INDEX_TYPE_UINT8_EXT: VkIndexType = 1000265000;
pub const VkIndexType_VK_INDEX_TYPE_NONE_NV: VkIndexType = 1000165000;
pub const VkIndexType_VK_INDEX_TYPE_MAX_ENUM: VkIndexType = 2147483647;
pub type VkIndexType = ::std::os::raw::c_uint;
pub const VkSubpassContents_VK_SUBPASS_CONTENTS_INLINE: VkSubpassContents = 0;
pub const VkSubpassContents_VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS: VkSubpassContents = 1;
pub const VkSubpassContents_VK_SUBPASS_CONTENTS_MAX_ENUM: VkSubpassContents = 2147483647;
pub type VkSubpassContents = ::std::os::raw::c_uint;
pub const VkAccessFlagBits_VK_ACCESS_INDIRECT_COMMAND_READ_BIT: VkAccessFlagBits = 1;
pub const VkAccessFlagBits_VK_ACCESS_INDEX_READ_BIT: VkAccessFlagBits = 2;
pub const VkAccessFlagBits_VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT: VkAccessFlagBits = 4;
pub const VkAccessFlagBits_VK_ACCESS_UNIFORM_READ_BIT: VkAccessFlagBits = 8;
pub const VkAccessFlagBits_VK_ACCESS_INPUT_ATTACHMENT_READ_BIT: VkAccessFlagBits = 16;
pub const VkAccessFlagBits_VK_ACCESS_SHADER_READ_BIT: VkAccessFlagBits = 32;
pub const VkAccessFlagBits_VK_ACCESS_SHADER_WRITE_BIT: VkAccessFlagBits = 64;
pub const VkAccessFlagBits_VK_ACCESS_COLOR_ATTACHMENT_READ_BIT: VkAccessFlagBits = 128;
pub const VkAccessFlagBits_VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT: VkAccessFlagBits = 256;
pub const VkAccessFlagBits_VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT: VkAccessFlagBits = 512;
pub const VkAccessFlagBits_VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: VkAccessFlagBits = 1024;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFER_READ_BIT: VkAccessFlagBits = 2048;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFER_WRITE_BIT: VkAccessFlagBits = 4096;
pub const VkAccessFlagBits_VK_ACCESS_HOST_READ_BIT: VkAccessFlagBits = 8192;
pub const VkAccessFlagBits_VK_ACCESS_HOST_WRITE_BIT: VkAccessFlagBits = 16384;
pub const VkAccessFlagBits_VK_ACCESS_MEMORY_READ_BIT: VkAccessFlagBits = 32768;
pub const VkAccessFlagBits_VK_ACCESS_MEMORY_WRITE_BIT: VkAccessFlagBits = 65536;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: VkAccessFlagBits = 33554432;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: VkAccessFlagBits =
    67108864;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: VkAccessFlagBits =
    134217728;
pub const VkAccessFlagBits_VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT: VkAccessFlagBits = 1048576;
pub const VkAccessFlagBits_VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: VkAccessFlagBits =
    524288;
pub const VkAccessFlagBits_VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR: VkAccessFlagBits =
    2097152;
pub const VkAccessFlagBits_VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: VkAccessFlagBits =
    4194304;
pub const VkAccessFlagBits_VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits = 8388608;
pub const VkAccessFlagBits_VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: VkAccessFlagBits = 16777216;
pub const VkAccessFlagBits_VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV: VkAccessFlagBits = 131072;
pub const VkAccessFlagBits_VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV: VkAccessFlagBits = 262144;
pub const VkAccessFlagBits_VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits = 2097152;
pub const VkAccessFlagBits_VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits =
    4194304;
pub const VkAccessFlagBits_VK_ACCESS_FLAG_BITS_MAX_ENUM: VkAccessFlagBits = 2147483647;
pub type VkAccessFlagBits = ::std::os::raw::c_uint;
pub type VkAccessFlags = VkFlags;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_COLOR_BIT: VkImageAspectFlagBits = 1;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_DEPTH_BIT: VkImageAspectFlagBits = 2;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_STENCIL_BIT: VkImageAspectFlagBits = 4;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_METADATA_BIT: VkImageAspectFlagBits = 8;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_0_BIT: VkImageAspectFlagBits = 16;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_1_BIT: VkImageAspectFlagBits = 32;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_2_BIT: VkImageAspectFlagBits = 64;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT: VkImageAspectFlagBits = 128;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT: VkImageAspectFlagBits = 256;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT: VkImageAspectFlagBits = 512;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT: VkImageAspectFlagBits =
    1024;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_0_BIT_KHR: VkImageAspectFlagBits = 16;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_1_BIT_KHR: VkImageAspectFlagBits = 32;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_2_BIT_KHR: VkImageAspectFlagBits = 64;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM: VkImageAspectFlagBits =
    2147483647;
pub type VkImageAspectFlagBits = ::std::os::raw::c_uint;
pub type VkImageAspectFlags = VkFlags;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT: VkFormatFeatureFlagBits = 1;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT: VkFormatFeatureFlagBits = 2;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT:
    VkFormatFeatureFlagBits = 4;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT:
    VkFormatFeatureFlagBits = 8;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT:
    VkFormatFeatureFlagBits = 16;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT:
    VkFormatFeatureFlagBits = 32;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT: VkFormatFeatureFlagBits = 64;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT: VkFormatFeatureFlagBits =
    128;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT:
    VkFormatFeatureFlagBits = 256;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT:
    VkFormatFeatureFlagBits = 512;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_BLIT_SRC_BIT: VkFormatFeatureFlagBits = 1024;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_BLIT_DST_BIT: VkFormatFeatureFlagBits = 2048;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT:
    VkFormatFeatureFlagBits = 4096;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_TRANSFER_SRC_BIT: VkFormatFeatureFlagBits =
    16384;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_TRANSFER_DST_BIT: VkFormatFeatureFlagBits =
    32768;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT:
    VkFormatFeatureFlagBits = 131072;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT : VkFormatFeatureFlagBits = 262144 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT : VkFormatFeatureFlagBits = 524288 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT : VkFormatFeatureFlagBits = 1048576 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT : VkFormatFeatureFlagBits = 2097152 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_DISJOINT_BIT: VkFormatFeatureFlagBits = 4194304;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT:
    VkFormatFeatureFlagBits = 8388608;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT:
    VkFormatFeatureFlagBits = 65536;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG:
    VkFormatFeatureFlagBits = 8192;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR:
    VkFormatFeatureFlagBits = 536870912;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT:
    VkFormatFeatureFlagBits = 16777216;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR: VkFormatFeatureFlagBits =
    16384;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR: VkFormatFeatureFlagBits =
    32768;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT:
    VkFormatFeatureFlagBits = 65536;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR:
    VkFormatFeatureFlagBits = 131072;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR : VkFormatFeatureFlagBits = 262144 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR : VkFormatFeatureFlagBits = 524288 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR : VkFormatFeatureFlagBits = 1048576 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR : VkFormatFeatureFlagBits = 2097152 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_DISJOINT_BIT_KHR: VkFormatFeatureFlagBits =
    4194304;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR:
    VkFormatFeatureFlagBits = 8388608;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT:
    VkFormatFeatureFlagBits = 8192;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM: VkFormatFeatureFlagBits =
    2147483647;
pub type VkFormatFeatureFlagBits = ::std::os::raw::c_uint;
pub type VkFormatFeatureFlags = VkFlags;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPARSE_BINDING_BIT: VkImageCreateFlagBits = 1;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT: VkImageCreateFlagBits = 2;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPARSE_ALIASED_BIT: VkImageCreateFlagBits = 4;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT: VkImageCreateFlagBits = 8;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT: VkImageCreateFlagBits = 16;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_ALIAS_BIT: VkImageCreateFlagBits = 1024;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT:
    VkImageCreateFlagBits = 64;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT: VkImageCreateFlagBits = 32;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT:
    VkImageCreateFlagBits = 128;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_EXTENDED_USAGE_BIT: VkImageCreateFlagBits = 256;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_PROTECTED_BIT: VkImageCreateFlagBits = 2048;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_DISJOINT_BIT: VkImageCreateFlagBits = 512;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV: VkImageCreateFlagBits = 8192;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT:
    VkImageCreateFlagBits = 4096;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT: VkImageCreateFlagBits = 16384;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR:
    VkImageCreateFlagBits = 64;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR: VkImageCreateFlagBits =
    32;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR:
    VkImageCreateFlagBits = 128;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR: VkImageCreateFlagBits = 256;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_DISJOINT_BIT_KHR: VkImageCreateFlagBits = 512;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_ALIAS_BIT_KHR: VkImageCreateFlagBits = 1024;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM: VkImageCreateFlagBits =
    2147483647;
pub type VkImageCreateFlagBits = ::std::os::raw::c_uint;
pub type VkImageCreateFlags = VkFlags;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_1_BIT: VkSampleCountFlagBits = 1;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_2_BIT: VkSampleCountFlagBits = 2;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_4_BIT: VkSampleCountFlagBits = 4;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_8_BIT: VkSampleCountFlagBits = 8;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_16_BIT: VkSampleCountFlagBits = 16;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_32_BIT: VkSampleCountFlagBits = 32;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_64_BIT: VkSampleCountFlagBits = 64;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM: VkSampleCountFlagBits =
    2147483647;
pub type VkSampleCountFlagBits = ::std::os::raw::c_uint;
pub type VkSampleCountFlags = VkFlags;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_TRANSFER_SRC_BIT: VkImageUsageFlagBits = 1;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_TRANSFER_DST_BIT: VkImageUsageFlagBits = 2;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_SAMPLED_BIT: VkImageUsageFlagBits = 4;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_STORAGE_BIT: VkImageUsageFlagBits = 8;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT: VkImageUsageFlagBits = 16;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: VkImageUsageFlagBits =
    32;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT: VkImageUsageFlagBits = 64;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT: VkImageUsageFlagBits = 128;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV: VkImageUsageFlagBits = 256;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT: VkImageUsageFlagBits =
    512;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM: VkImageUsageFlagBits = 2147483647;
pub type VkImageUsageFlagBits = ::std::os::raw::c_uint;
pub type VkImageUsageFlags = VkFlags;
pub type VkInstanceCreateFlags = VkFlags;
pub const VkMemoryHeapFlagBits_VK_MEMORY_HEAP_DEVICE_LOCAL_BIT: VkMemoryHeapFlagBits = 1;
pub const VkMemoryHeapFlagBits_VK_MEMORY_HEAP_MULTI_INSTANCE_BIT: VkMemoryHeapFlagBits = 2;
pub const VkMemoryHeapFlagBits_VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR: VkMemoryHeapFlagBits = 2;
pub const VkMemoryHeapFlagBits_VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM: VkMemoryHeapFlagBits = 2147483647;
pub type VkMemoryHeapFlagBits = ::std::os::raw::c_uint;
pub type VkMemoryHeapFlags = VkFlags;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT: VkMemoryPropertyFlagBits =
    1;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT: VkMemoryPropertyFlagBits =
    2;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_HOST_COHERENT_BIT: VkMemoryPropertyFlagBits =
    4;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_HOST_CACHED_BIT: VkMemoryPropertyFlagBits = 8;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT:
    VkMemoryPropertyFlagBits = 16;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_PROTECTED_BIT: VkMemoryPropertyFlagBits = 32;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD:
    VkMemoryPropertyFlagBits = 64;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD:
    VkMemoryPropertyFlagBits = 128;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM: VkMemoryPropertyFlagBits =
    2147483647;
pub type VkMemoryPropertyFlagBits = ::std::os::raw::c_uint;
pub type VkMemoryPropertyFlags = VkFlags;
pub const VkQueueFlagBits_VK_QUEUE_GRAPHICS_BIT: VkQueueFlagBits = 1;
pub const VkQueueFlagBits_VK_QUEUE_COMPUTE_BIT: VkQueueFlagBits = 2;
pub const VkQueueFlagBits_VK_QUEUE_TRANSFER_BIT: VkQueueFlagBits = 4;
pub const VkQueueFlagBits_VK_QUEUE_SPARSE_BINDING_BIT: VkQueueFlagBits = 8;
pub const VkQueueFlagBits_VK_QUEUE_PROTECTED_BIT: VkQueueFlagBits = 16;
pub const VkQueueFlagBits_VK_QUEUE_FLAG_BITS_MAX_ENUM: VkQueueFlagBits = 2147483647;
pub type VkQueueFlagBits = ::std::os::raw::c_uint;
pub type VkQueueFlags = VkFlags;
pub type VkDeviceCreateFlags = VkFlags;
pub const VkDeviceQueueCreateFlagBits_VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT:
    VkDeviceQueueCreateFlagBits = 1;
pub const VkDeviceQueueCreateFlagBits_VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM:
    VkDeviceQueueCreateFlagBits = 2147483647;
pub type VkDeviceQueueCreateFlagBits = ::std::os::raw::c_uint;
pub type VkDeviceQueueCreateFlags = VkFlags;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT: VkPipelineStageFlagBits = 1;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT: VkPipelineStageFlagBits = 2;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_VERTEX_INPUT_BIT: VkPipelineStageFlagBits = 4;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_VERTEX_SHADER_BIT: VkPipelineStageFlagBits = 8;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT:
    VkPipelineStageFlagBits = 16;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT:
    VkPipelineStageFlagBits = 32;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT: VkPipelineStageFlagBits =
    64;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT: VkPipelineStageFlagBits =
    128;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT:
    VkPipelineStageFlagBits = 256;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT:
    VkPipelineStageFlagBits = 512;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT:
    VkPipelineStageFlagBits = 1024;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT: VkPipelineStageFlagBits =
    2048;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TRANSFER_BIT: VkPipelineStageFlagBits = 4096;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT: VkPipelineStageFlagBits =
    8192;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_HOST_BIT: VkPipelineStageFlagBits = 16384;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT: VkPipelineStageFlagBits =
    32768;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_ALL_COMMANDS_BIT: VkPipelineStageFlagBits =
    65536;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT:
    VkPipelineStageFlagBits = 16777216;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT:
    VkPipelineStageFlagBits = 262144;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR:
    VkPipelineStageFlagBits = 2097152;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR:
    VkPipelineStageFlagBits = 33554432;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV:
    VkPipelineStageFlagBits = 4194304;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits =
    524288;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits =
    1048576;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT:
    VkPipelineStageFlagBits = 8388608;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV:
    VkPipelineStageFlagBits = 131072;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV:
    VkPipelineStageFlagBits = 2097152;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV:
    VkPipelineStageFlagBits = 33554432;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM: VkPipelineStageFlagBits =
    2147483647;
pub type VkPipelineStageFlagBits = ::std::os::raw::c_uint;
pub type VkPipelineStageFlags = VkFlags;
pub type VkMemoryMapFlags = VkFlags;
pub const VkSparseMemoryBindFlagBits_VK_SPARSE_MEMORY_BIND_METADATA_BIT:
    VkSparseMemoryBindFlagBits = 1;
pub const VkSparseMemoryBindFlagBits_VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM:
    VkSparseMemoryBindFlagBits = 2147483647;
pub type VkSparseMemoryBindFlagBits = ::std::os::raw::c_uint;
pub type VkSparseMemoryBindFlags = VkFlags;
pub const VkSparseImageFormatFlagBits_VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT:
    VkSparseImageFormatFlagBits = 1;
pub const VkSparseImageFormatFlagBits_VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT:
    VkSparseImageFormatFlagBits = 2;
pub const VkSparseImageFormatFlagBits_VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT:
    VkSparseImageFormatFlagBits = 4;
pub const VkSparseImageFormatFlagBits_VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM:
    VkSparseImageFormatFlagBits = 2147483647;
pub type VkSparseImageFormatFlagBits = ::std::os::raw::c_uint;
pub type VkSparseImageFormatFlags = VkFlags;
pub const VkFenceCreateFlagBits_VK_FENCE_CREATE_SIGNALED_BIT: VkFenceCreateFlagBits = 1;
pub const VkFenceCreateFlagBits_VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM: VkFenceCreateFlagBits =
    2147483647;
pub type VkFenceCreateFlagBits = ::std::os::raw::c_uint;
pub type VkFenceCreateFlags = VkFlags;
pub type VkSemaphoreCreateFlags = VkFlags;
pub type VkEventCreateFlags = VkFlags;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT : VkQueryPipelineStatisticFlagBits = 1 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT : VkQueryPipelineStatisticFlagBits = 2 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 4 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 8 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT : VkQueryPipelineStatisticFlagBits = 16 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT:
    VkQueryPipelineStatisticFlagBits = 32;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT:
    VkQueryPipelineStatisticFlagBits = 64;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 128 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT : VkQueryPipelineStatisticFlagBits = 256 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 512 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 1024 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM:
    VkQueryPipelineStatisticFlagBits = 2147483647;
pub type VkQueryPipelineStatisticFlagBits = ::std::os::raw::c_uint;
pub type VkQueryPipelineStatisticFlags = VkFlags;
pub type VkQueryPoolCreateFlags = VkFlags;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_64_BIT: VkQueryResultFlagBits = 1;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_WAIT_BIT: VkQueryResultFlagBits = 2;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_WITH_AVAILABILITY_BIT: VkQueryResultFlagBits = 4;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_PARTIAL_BIT: VkQueryResultFlagBits = 8;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM: VkQueryResultFlagBits =
    2147483647;
pub type VkQueryResultFlagBits = ::std::os::raw::c_uint;
pub type VkQueryResultFlags = VkFlags;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_SPARSE_BINDING_BIT: VkBufferCreateFlagBits = 1;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT: VkBufferCreateFlagBits = 2;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_SPARSE_ALIASED_BIT: VkBufferCreateFlagBits = 4;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_PROTECTED_BIT: VkBufferCreateFlagBits = 8;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT:
    VkBufferCreateFlagBits = 16;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT:
    VkBufferCreateFlagBits = 16;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR:
    VkBufferCreateFlagBits = 16;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM: VkBufferCreateFlagBits =
    2147483647;
pub type VkBufferCreateFlagBits = ::std::os::raw::c_uint;
pub type VkBufferCreateFlags = VkFlags;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_TRANSFER_SRC_BIT: VkBufferUsageFlagBits = 1;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_TRANSFER_DST_BIT: VkBufferUsageFlagBits = 2;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits = 4;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits = 8;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT: VkBufferUsageFlagBits = 16;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_STORAGE_BUFFER_BIT: VkBufferUsageFlagBits = 32;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_INDEX_BUFFER_BIT: VkBufferUsageFlagBits = 64;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_VERTEX_BUFFER_BIT: VkBufferUsageFlagBits = 128;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT: VkBufferUsageFlagBits = 256;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT: VkBufferUsageFlagBits =
    131072;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT:
    VkBufferUsageFlagBits = 2048;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT:
    VkBufferUsageFlagBits = 4096;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT:
    VkBufferUsageFlagBits = 512;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_RAY_TRACING_BIT_KHR: VkBufferUsageFlagBits = 1024;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_RAY_TRACING_BIT_NV: VkBufferUsageFlagBits = 1024;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT:
    VkBufferUsageFlagBits = 131072;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR:
    VkBufferUsageFlagBits = 131072;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM: VkBufferUsageFlagBits =
    2147483647;
pub type VkBufferUsageFlagBits = ::std::os::raw::c_uint;
pub type VkBufferUsageFlags = VkFlags;
pub type VkBufferViewCreateFlags = VkFlags;
pub const VkImageViewCreateFlagBits_VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT:
    VkImageViewCreateFlagBits = 1;
pub const VkImageViewCreateFlagBits_VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT:
    VkImageViewCreateFlagBits = 2;
pub const VkImageViewCreateFlagBits_VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM:
    VkImageViewCreateFlagBits = 2147483647;
pub type VkImageViewCreateFlagBits = ::std::os::raw::c_uint;
pub type VkImageViewCreateFlags = VkFlags;
pub const VkShaderModuleCreateFlagBits_VK_SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM:
    VkShaderModuleCreateFlagBits = 2147483647;
pub type VkShaderModuleCreateFlagBits = ::std::os::raw::c_uint;
pub type VkShaderModuleCreateFlags = VkFlags;
pub const VkPipelineCacheCreateFlagBits_VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT:
    VkPipelineCacheCreateFlagBits = 1;
pub const VkPipelineCacheCreateFlagBits_VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM:
    VkPipelineCacheCreateFlagBits = 2147483647;
pub type VkPipelineCacheCreateFlagBits = ::std::os::raw::c_uint;
pub type VkPipelineCacheCreateFlags = VkFlags;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_R_BIT: VkColorComponentFlagBits = 1;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_G_BIT: VkColorComponentFlagBits = 2;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_B_BIT: VkColorComponentFlagBits = 4;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_A_BIT: VkColorComponentFlagBits = 8;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM: VkColorComponentFlagBits =
    2147483647;
pub type VkColorComponentFlagBits = ::std::os::raw::c_uint;
pub type VkColorComponentFlags = VkFlags;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT:
    VkPipelineCreateFlagBits = 1;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT:
    VkPipelineCreateFlagBits = 2;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DERIVATIVE_BIT: VkPipelineCreateFlagBits = 4;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT:
    VkPipelineCreateFlagBits = 8;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DISPATCH_BASE_BIT: VkPipelineCreateFlagBits =
    16;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR : VkPipelineCreateFlagBits = 16384 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR : VkPipelineCreateFlagBits = 32768 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR:
    VkPipelineCreateFlagBits = 65536;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR : VkPipelineCreateFlagBits = 131072 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR:
    VkPipelineCreateFlagBits = 4096;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR:
    VkPipelineCreateFlagBits = 8192;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV:
    VkPipelineCreateFlagBits = 32;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR:
    VkPipelineCreateFlagBits = 64;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR:
    VkPipelineCreateFlagBits = 128;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV:
    VkPipelineCreateFlagBits = 262144;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_LIBRARY_BIT_KHR: VkPipelineCreateFlagBits =
    2048;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT:
    VkPipelineCreateFlagBits = 256;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT:
    VkPipelineCreateFlagBits = 512;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DISPATCH_BASE: VkPipelineCreateFlagBits = 16;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR:
    VkPipelineCreateFlagBits = 8;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DISPATCH_BASE_KHR: VkPipelineCreateFlagBits =
    16;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM: VkPipelineCreateFlagBits =
    2147483647;
pub type VkPipelineCreateFlagBits = ::std::os::raw::c_uint;
pub type VkPipelineCreateFlags = VkFlags;
pub const VkPipelineShaderStageCreateFlagBits_VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT : VkPipelineShaderStageCreateFlagBits = 1 ;
pub const VkPipelineShaderStageCreateFlagBits_VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT : VkPipelineShaderStageCreateFlagBits = 2 ;
pub const VkPipelineShaderStageCreateFlagBits_VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM:
    VkPipelineShaderStageCreateFlagBits = 2147483647;
pub type VkPipelineShaderStageCreateFlagBits = ::std::os::raw::c_uint;
pub type VkPipelineShaderStageCreateFlags = VkFlags;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_VERTEX_BIT: VkShaderStageFlagBits = 1;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT: VkShaderStageFlagBits = 2;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT: VkShaderStageFlagBits =
    4;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_GEOMETRY_BIT: VkShaderStageFlagBits = 8;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_FRAGMENT_BIT: VkShaderStageFlagBits = 16;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_COMPUTE_BIT: VkShaderStageFlagBits = 32;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_ALL_GRAPHICS: VkShaderStageFlagBits = 31;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_ALL: VkShaderStageFlagBits = 2147483647;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_RAYGEN_BIT_KHR: VkShaderStageFlagBits = 256;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_ANY_HIT_BIT_KHR: VkShaderStageFlagBits = 512;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR: VkShaderStageFlagBits = 1024;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_MISS_BIT_KHR: VkShaderStageFlagBits = 2048;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_INTERSECTION_BIT_KHR: VkShaderStageFlagBits = 4096;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CALLABLE_BIT_KHR: VkShaderStageFlagBits = 8192;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_TASK_BIT_NV: VkShaderStageFlagBits = 64;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_MESH_BIT_NV: VkShaderStageFlagBits = 128;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_RAYGEN_BIT_NV: VkShaderStageFlagBits = 256;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_ANY_HIT_BIT_NV: VkShaderStageFlagBits = 512;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV: VkShaderStageFlagBits = 1024;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_MISS_BIT_NV: VkShaderStageFlagBits = 2048;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_INTERSECTION_BIT_NV: VkShaderStageFlagBits = 4096;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CALLABLE_BIT_NV: VkShaderStageFlagBits = 8192;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM: VkShaderStageFlagBits =
    2147483647;
pub type VkShaderStageFlagBits = ::std::os::raw::c_uint;
pub const VkCullModeFlagBits_VK_CULL_MODE_NONE: VkCullModeFlagBits = 0;
pub const VkCullModeFlagBits_VK_CULL_MODE_FRONT_BIT: VkCullModeFlagBits = 1;
pub const VkCullModeFlagBits_VK_CULL_MODE_BACK_BIT: VkCullModeFlagBits = 2;
pub const VkCullModeFlagBits_VK_CULL_MODE_FRONT_AND_BACK: VkCullModeFlagBits = 3;
pub const VkCullModeFlagBits_VK_CULL_MODE_FLAG_BITS_MAX_ENUM: VkCullModeFlagBits = 2147483647;
pub type VkCullModeFlagBits = ::std::os::raw::c_uint;
pub type VkCullModeFlags = VkFlags;
pub type VkPipelineVertexInputStateCreateFlags = VkFlags;
pub type VkPipelineInputAssemblyStateCreateFlags = VkFlags;
pub type VkPipelineTessellationStateCreateFlags = VkFlags;
pub type VkPipelineViewportStateCreateFlags = VkFlags;
pub type VkPipelineRasterizationStateCreateFlags = VkFlags;
pub type VkPipelineMultisampleStateCreateFlags = VkFlags;
pub type VkPipelineDepthStencilStateCreateFlags = VkFlags;
pub type VkPipelineColorBlendStateCreateFlags = VkFlags;
pub type VkPipelineDynamicStateCreateFlags = VkFlags;
pub type VkPipelineLayoutCreateFlags = VkFlags;
pub type VkShaderStageFlags = VkFlags;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT: VkSamplerCreateFlagBits = 1;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT:
    VkSamplerCreateFlagBits = 2;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM: VkSamplerCreateFlagBits =
    2147483647;
pub type VkSamplerCreateFlagBits = ::std::os::raw::c_uint;
pub type VkSamplerCreateFlags = VkFlags;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT:
    VkDescriptorPoolCreateFlagBits = 1;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT:
    VkDescriptorPoolCreateFlagBits = 2;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT:
    VkDescriptorPoolCreateFlagBits = 2;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM:
    VkDescriptorPoolCreateFlagBits = 2147483647;
pub type VkDescriptorPoolCreateFlagBits = ::std::os::raw::c_uint;
pub type VkDescriptorPoolCreateFlags = VkFlags;
pub type VkDescriptorPoolResetFlags = VkFlags;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT : VkDescriptorSetLayoutCreateFlagBits = 2 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR : VkDescriptorSetLayoutCreateFlagBits = 1 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT : VkDescriptorSetLayoutCreateFlagBits = 2 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM:
    VkDescriptorSetLayoutCreateFlagBits = 2147483647;
pub type VkDescriptorSetLayoutCreateFlagBits = ::std::os::raw::c_uint;
pub type VkDescriptorSetLayoutCreateFlags = VkFlags;
pub const VkAttachmentDescriptionFlagBits_VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT:
    VkAttachmentDescriptionFlagBits = 1;
pub const VkAttachmentDescriptionFlagBits_VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM:
    VkAttachmentDescriptionFlagBits = 2147483647;
pub type VkAttachmentDescriptionFlagBits = ::std::os::raw::c_uint;
pub type VkAttachmentDescriptionFlags = VkFlags;
pub const VkDependencyFlagBits_VK_DEPENDENCY_BY_REGION_BIT: VkDependencyFlagBits = 1;
pub const VkDependencyFlagBits_VK_DEPENDENCY_DEVICE_GROUP_BIT: VkDependencyFlagBits = 4;
pub const VkDependencyFlagBits_VK_DEPENDENCY_VIEW_LOCAL_BIT: VkDependencyFlagBits = 2;
pub const VkDependencyFlagBits_VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR: VkDependencyFlagBits = 2;
pub const VkDependencyFlagBits_VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR: VkDependencyFlagBits = 4;
pub const VkDependencyFlagBits_VK_DEPENDENCY_FLAG_BITS_MAX_ENUM: VkDependencyFlagBits = 2147483647;
pub type VkDependencyFlagBits = ::std::os::raw::c_uint;
pub type VkDependencyFlags = VkFlags;
pub const VkFramebufferCreateFlagBits_VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT:
    VkFramebufferCreateFlagBits = 1;
pub const VkFramebufferCreateFlagBits_VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR:
    VkFramebufferCreateFlagBits = 1;
pub const VkFramebufferCreateFlagBits_VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM:
    VkFramebufferCreateFlagBits = 2147483647;
pub type VkFramebufferCreateFlagBits = ::std::os::raw::c_uint;
pub type VkFramebufferCreateFlags = VkFlags;
pub const VkRenderPassCreateFlagBits_VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM:
    VkRenderPassCreateFlagBits = 2;
pub const VkRenderPassCreateFlagBits_VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM:
    VkRenderPassCreateFlagBits = 2147483647;
pub type VkRenderPassCreateFlagBits = ::std::os::raw::c_uint;
pub type VkRenderPassCreateFlags = VkFlags;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX:
    VkSubpassDescriptionFlagBits = 1;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX:
    VkSubpassDescriptionFlagBits = 2;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM:
    VkSubpassDescriptionFlagBits = 4;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM:
    VkSubpassDescriptionFlagBits = 8;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM:
    VkSubpassDescriptionFlagBits = 2147483647;
pub type VkSubpassDescriptionFlagBits = ::std::os::raw::c_uint;
pub type VkSubpassDescriptionFlags = VkFlags;
pub const VkCommandPoolCreateFlagBits_VK_COMMAND_POOL_CREATE_TRANSIENT_BIT:
    VkCommandPoolCreateFlagBits = 1;
pub const VkCommandPoolCreateFlagBits_VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT:
    VkCommandPoolCreateFlagBits = 2;
pub const VkCommandPoolCreateFlagBits_VK_COMMAND_POOL_CREATE_PROTECTED_BIT:
    VkCommandPoolCreateFlagBits = 4;
pub const VkCommandPoolCreateFlagBits_VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM:
    VkCommandPoolCreateFlagBits = 2147483647;
pub type VkCommandPoolCreateFlagBits = ::std::os::raw::c_uint;
pub type VkCommandPoolCreateFlags = VkFlags;
pub const VkCommandPoolResetFlagBits_VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT:
    VkCommandPoolResetFlagBits = 1;
pub const VkCommandPoolResetFlagBits_VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM:
    VkCommandPoolResetFlagBits = 2147483647;
pub type VkCommandPoolResetFlagBits = ::std::os::raw::c_uint;
pub type VkCommandPoolResetFlags = VkFlags;
pub const VkCommandBufferUsageFlagBits_VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT:
    VkCommandBufferUsageFlagBits = 1;
pub const VkCommandBufferUsageFlagBits_VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT:
    VkCommandBufferUsageFlagBits = 2;
pub const VkCommandBufferUsageFlagBits_VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT:
    VkCommandBufferUsageFlagBits = 4;
pub const VkCommandBufferUsageFlagBits_VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM:
    VkCommandBufferUsageFlagBits = 2147483647;
pub type VkCommandBufferUsageFlagBits = ::std::os::raw::c_uint;
pub type VkCommandBufferUsageFlags = VkFlags;
pub const VkQueryControlFlagBits_VK_QUERY_CONTROL_PRECISE_BIT: VkQueryControlFlagBits = 1;
pub const VkQueryControlFlagBits_VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM: VkQueryControlFlagBits =
    2147483647;
pub type VkQueryControlFlagBits = ::std::os::raw::c_uint;
pub type VkQueryControlFlags = VkFlags;
pub const VkCommandBufferResetFlagBits_VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT:
    VkCommandBufferResetFlagBits = 1;
pub const VkCommandBufferResetFlagBits_VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM:
    VkCommandBufferResetFlagBits = 2147483647;
pub type VkCommandBufferResetFlagBits = ::std::os::raw::c_uint;
pub type VkCommandBufferResetFlags = VkFlags;
pub const VkStencilFaceFlagBits_VK_STENCIL_FACE_FRONT_BIT: VkStencilFaceFlagBits = 1;
pub const VkStencilFaceFlagBits_VK_STENCIL_FACE_BACK_BIT: VkStencilFaceFlagBits = 2;
pub const VkStencilFaceFlagBits_VK_STENCIL_FACE_FRONT_AND_BACK: VkStencilFaceFlagBits = 3;
pub const VkStencilFaceFlagBits_VK_STENCIL_FRONT_AND_BACK: VkStencilFaceFlagBits = 3;
pub const VkStencilFaceFlagBits_VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM: VkStencilFaceFlagBits =
    2147483647;
pub type VkStencilFaceFlagBits = ::std::os::raw::c_uint;
pub type VkStencilFaceFlags = VkFlags;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkExtent2D {
    pub width: u32,
    pub height: u32,
}
#[test]
fn bindgen_test_layout_VkExtent2D() {
    assert_eq!(
        ::std::mem::size_of::<VkExtent2D>(),
        8usize,
        concat!("Size of: ", stringify!(VkExtent2D))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExtent2D>(),
        4usize,
        concat!("Alignment of ", stringify!(VkExtent2D))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkExtent2D>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtent2D),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkExtent2D>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtent2D),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkExtent3D {
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[test]
fn bindgen_test_layout_VkExtent3D() {
    assert_eq!(
        ::std::mem::size_of::<VkExtent3D>(),
        12usize,
        concat!("Size of: ", stringify!(VkExtent3D))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExtent3D>(),
        4usize,
        concat!("Alignment of ", stringify!(VkExtent3D))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkExtent3D>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtent3D),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkExtent3D>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtent3D),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkExtent3D>())).depth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtent3D),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkOffset2D {
    pub x: i32,
    pub y: i32,
}
#[test]
fn bindgen_test_layout_VkOffset2D() {
    assert_eq!(
        ::std::mem::size_of::<VkOffset2D>(),
        8usize,
        concat!("Size of: ", stringify!(VkOffset2D))
    );
    assert_eq!(
        ::std::mem::align_of::<VkOffset2D>(),
        4usize,
        concat!("Alignment of ", stringify!(VkOffset2D))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkOffset2D>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOffset2D),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkOffset2D>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOffset2D),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkOffset3D {
    pub x: i32,
    pub y: i32,
    pub z: i32,
}
#[test]
fn bindgen_test_layout_VkOffset3D() {
    assert_eq!(
        ::std::mem::size_of::<VkOffset3D>(),
        12usize,
        concat!("Size of: ", stringify!(VkOffset3D))
    );
    assert_eq!(
        ::std::mem::align_of::<VkOffset3D>(),
        4usize,
        concat!("Alignment of ", stringify!(VkOffset3D))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkOffset3D>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOffset3D),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkOffset3D>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOffset3D),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkOffset3D>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOffset3D),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkRect2D {
    pub offset: VkOffset2D,
    pub extent: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkRect2D() {
    assert_eq!(
        ::std::mem::size_of::<VkRect2D>(),
        16usize,
        concat!("Size of: ", stringify!(VkRect2D))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRect2D>(),
        4usize,
        concat!("Alignment of ", stringify!(VkRect2D))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkRect2D>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRect2D),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkRect2D>())).extent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRect2D),
            "::",
            stringify!(extent)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBaseInStructure {
    pub sType: VkStructureType,
    pub pNext: *const VkBaseInStructure,
}
#[test]
fn bindgen_test_layout_VkBaseInStructure() {
    assert_eq!(
        ::std::mem::size_of::<VkBaseInStructure>(),
        16usize,
        concat!("Size of: ", stringify!(VkBaseInStructure))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBaseInStructure>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBaseInStructure))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBaseInStructure>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBaseInStructure),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBaseInStructure>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBaseInStructure),
            "::",
            stringify!(pNext)
        )
    );
}
impl Default for VkBaseInStructure {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBaseOutStructure {
    pub sType: VkStructureType,
    pub pNext: *mut VkBaseOutStructure,
}
#[test]
fn bindgen_test_layout_VkBaseOutStructure() {
    assert_eq!(
        ::std::mem::size_of::<VkBaseOutStructure>(),
        16usize,
        concat!("Size of: ", stringify!(VkBaseOutStructure))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBaseOutStructure>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBaseOutStructure))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBaseOutStructure>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBaseOutStructure),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBaseOutStructure>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBaseOutStructure),
            "::",
            stringify!(pNext)
        )
    );
}
impl Default for VkBaseOutStructure {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferMemoryBarrier {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBufferMemoryBarrier() {
    assert_eq!(
        ::std::mem::size_of::<VkBufferMemoryBarrier>(),
        56usize,
        concat!("Size of: ", stringify!(VkBufferMemoryBarrier))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferMemoryBarrier>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferMemoryBarrier))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferMemoryBarrier>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferMemoryBarrier>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferMemoryBarrier>())).srcAccessMask as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(srcAccessMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferMemoryBarrier>())).dstAccessMask as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(dstAccessMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferMemoryBarrier>())).srcQueueFamilyIndex as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(srcQueueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferMemoryBarrier>())).dstQueueFamilyIndex as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(dstQueueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferMemoryBarrier>())).buffer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferMemoryBarrier>())).offset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferMemoryBarrier>())).size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(size)
        )
    );
}
impl Default for VkBufferMemoryBarrier {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDispatchIndirectCommand {
    pub x: u32,
    pub y: u32,
    pub z: u32,
}
#[test]
fn bindgen_test_layout_VkDispatchIndirectCommand() {
    assert_eq!(
        ::std::mem::size_of::<VkDispatchIndirectCommand>(),
        12usize,
        concat!("Size of: ", stringify!(VkDispatchIndirectCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDispatchIndirectCommand>(),
        4usize,
        concat!("Alignment of ", stringify!(VkDispatchIndirectCommand))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDispatchIndirectCommand>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDispatchIndirectCommand),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDispatchIndirectCommand>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDispatchIndirectCommand),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDispatchIndirectCommand>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDispatchIndirectCommand),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDrawIndexedIndirectCommand {
    pub indexCount: u32,
    pub instanceCount: u32,
    pub firstIndex: u32,
    pub vertexOffset: i32,
    pub firstInstance: u32,
}
#[test]
fn bindgen_test_layout_VkDrawIndexedIndirectCommand() {
    assert_eq!(
        ::std::mem::size_of::<VkDrawIndexedIndirectCommand>(),
        20usize,
        concat!("Size of: ", stringify!(VkDrawIndexedIndirectCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDrawIndexedIndirectCommand>(),
        4usize,
        concat!("Alignment of ", stringify!(VkDrawIndexedIndirectCommand))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrawIndexedIndirectCommand>())).indexCount as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndexedIndirectCommand),
            "::",
            stringify!(indexCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrawIndexedIndirectCommand>())).instanceCount as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndexedIndirectCommand),
            "::",
            stringify!(instanceCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrawIndexedIndirectCommand>())).firstIndex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndexedIndirectCommand),
            "::",
            stringify!(firstIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrawIndexedIndirectCommand>())).vertexOffset as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndexedIndirectCommand),
            "::",
            stringify!(vertexOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrawIndexedIndirectCommand>())).firstInstance as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndexedIndirectCommand),
            "::",
            stringify!(firstInstance)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDrawIndirectCommand {
    pub vertexCount: u32,
    pub instanceCount: u32,
    pub firstVertex: u32,
    pub firstInstance: u32,
}
#[test]
fn bindgen_test_layout_VkDrawIndirectCommand() {
    assert_eq!(
        ::std::mem::size_of::<VkDrawIndirectCommand>(),
        16usize,
        concat!("Size of: ", stringify!(VkDrawIndirectCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDrawIndirectCommand>(),
        4usize,
        concat!("Alignment of ", stringify!(VkDrawIndirectCommand))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrawIndirectCommand>())).vertexCount as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndirectCommand),
            "::",
            stringify!(vertexCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrawIndirectCommand>())).instanceCount as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndirectCommand),
            "::",
            stringify!(instanceCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrawIndirectCommand>())).firstVertex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndirectCommand),
            "::",
            stringify!(firstVertex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrawIndirectCommand>())).firstInstance as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndirectCommand),
            "::",
            stringify!(firstInstance)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageSubresourceRange {
    pub aspectMask: VkImageAspectFlags,
    pub baseMipLevel: u32,
    pub levelCount: u32,
    pub baseArrayLayer: u32,
    pub layerCount: u32,
}
#[test]
fn bindgen_test_layout_VkImageSubresourceRange() {
    assert_eq!(
        ::std::mem::size_of::<VkImageSubresourceRange>(),
        20usize,
        concat!("Size of: ", stringify!(VkImageSubresourceRange))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageSubresourceRange>(),
        4usize,
        concat!("Alignment of ", stringify!(VkImageSubresourceRange))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSubresourceRange>())).aspectMask as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceRange),
            "::",
            stringify!(aspectMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSubresourceRange>())).baseMipLevel as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceRange),
            "::",
            stringify!(baseMipLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSubresourceRange>())).levelCount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceRange),
            "::",
            stringify!(levelCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSubresourceRange>())).baseArrayLayer as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceRange),
            "::",
            stringify!(baseArrayLayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSubresourceRange>())).layerCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceRange),
            "::",
            stringify!(layerCount)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageMemoryBarrier {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub oldLayout: VkImageLayout,
    pub newLayout: VkImageLayout,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub image: VkImage,
    pub subresourceRange: VkImageSubresourceRange,
}
#[test]
fn bindgen_test_layout_VkImageMemoryBarrier() {
    assert_eq!(
        ::std::mem::size_of::<VkImageMemoryBarrier>(),
        72usize,
        concat!("Size of: ", stringify!(VkImageMemoryBarrier))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageMemoryBarrier>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageMemoryBarrier))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageMemoryBarrier>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageMemoryBarrier>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageMemoryBarrier>())).srcAccessMask as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(srcAccessMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageMemoryBarrier>())).dstAccessMask as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(dstAccessMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageMemoryBarrier>())).oldLayout as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(oldLayout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageMemoryBarrier>())).newLayout as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(newLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageMemoryBarrier>())).srcQueueFamilyIndex as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(srcQueueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageMemoryBarrier>())).dstQueueFamilyIndex as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(dstQueueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageMemoryBarrier>())).image as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageMemoryBarrier>())).subresourceRange as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(subresourceRange)
        )
    );
}
impl Default for VkImageMemoryBarrier {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryBarrier {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
}
#[test]
fn bindgen_test_layout_VkMemoryBarrier() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryBarrier>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryBarrier))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryBarrier>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryBarrier))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryBarrier>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryBarrier>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryBarrier>())).srcAccessMask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier),
            "::",
            stringify!(srcAccessMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryBarrier>())).dstAccessMask as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier),
            "::",
            stringify!(dstAccessMask)
        )
    );
}
impl Default for VkMemoryBarrier {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkAllocationFunction = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        size: size_t,
        alignment: size_t,
        allocationScope: VkSystemAllocationScope,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type PFN_vkFreeFunction = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pMemory: *mut ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkInternalAllocationNotification = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        size: size_t,
        allocationType: VkInternalAllocationType,
        allocationScope: VkSystemAllocationScope,
    ),
>;
pub type PFN_vkInternalFreeNotification = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        size: size_t,
        allocationType: VkInternalAllocationType,
        allocationScope: VkSystemAllocationScope,
    ),
>;
pub type PFN_vkReallocationFunction = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pOriginal: *mut ::std::os::raw::c_void,
        size: size_t,
        alignment: size_t,
        allocationScope: VkSystemAllocationScope,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type PFN_vkVoidFunction = ::std::option::Option<unsafe extern "system" fn()>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAllocationCallbacks {
    pub pUserData: *mut ::std::os::raw::c_void,
    pub pfnAllocation: PFN_vkAllocationFunction,
    pub pfnReallocation: PFN_vkReallocationFunction,
    pub pfnFree: PFN_vkFreeFunction,
    pub pfnInternalAllocation: PFN_vkInternalAllocationNotification,
    pub pfnInternalFree: PFN_vkInternalFreeNotification,
}
#[test]
fn bindgen_test_layout_VkAllocationCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<VkAllocationCallbacks>(),
        48usize,
        concat!("Size of: ", stringify!(VkAllocationCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAllocationCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAllocationCallbacks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAllocationCallbacks>())).pUserData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAllocationCallbacks>())).pfnAllocation as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnAllocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAllocationCallbacks>())).pfnReallocation as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnReallocation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAllocationCallbacks>())).pfnFree as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnFree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAllocationCallbacks>())).pfnInternalAllocation as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnInternalAllocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAllocationCallbacks>())).pfnInternalFree as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnInternalFree)
        )
    );
}
impl Default for VkAllocationCallbacks {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkApplicationInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pApplicationName: *const ::std::os::raw::c_char,
    pub applicationVersion: u32,
    pub pEngineName: *const ::std::os::raw::c_char,
    pub engineVersion: u32,
    pub apiVersion: u32,
}
#[test]
fn bindgen_test_layout_VkApplicationInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkApplicationInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkApplicationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkApplicationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkApplicationInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkApplicationInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkApplicationInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkApplicationInfo>())).pApplicationName as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(pApplicationName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkApplicationInfo>())).applicationVersion as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(applicationVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkApplicationInfo>())).pEngineName as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(pEngineName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkApplicationInfo>())).engineVersion as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(engineVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkApplicationInfo>())).apiVersion as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(apiVersion)
        )
    );
}
impl Default for VkApplicationInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkFormatProperties {
    pub linearTilingFeatures: VkFormatFeatureFlags,
    pub optimalTilingFeatures: VkFormatFeatureFlags,
    pub bufferFeatures: VkFormatFeatureFlags,
}
#[test]
fn bindgen_test_layout_VkFormatProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkFormatProperties>(),
        12usize,
        concat!("Size of: ", stringify!(VkFormatProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFormatProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(VkFormatProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFormatProperties>())).linearTilingFeatures as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties),
            "::",
            stringify!(linearTilingFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFormatProperties>())).optimalTilingFeatures as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties),
            "::",
            stringify!(optimalTilingFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFormatProperties>())).bufferFeatures as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties),
            "::",
            stringify!(bufferFeatures)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageFormatProperties {
    pub maxExtent: VkExtent3D,
    pub maxMipLevels: u32,
    pub maxArrayLayers: u32,
    pub sampleCounts: VkSampleCountFlags,
    pub maxResourceSize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkImageFormatProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkImageFormatProperties>(),
        32usize,
        concat!("Size of: ", stringify!(VkImageFormatProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageFormatProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageFormatProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageFormatProperties>())).maxExtent as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties),
            "::",
            stringify!(maxExtent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageFormatProperties>())).maxMipLevels as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties),
            "::",
            stringify!(maxMipLevels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageFormatProperties>())).maxArrayLayers as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties),
            "::",
            stringify!(maxArrayLayers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageFormatProperties>())).sampleCounts as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties),
            "::",
            stringify!(sampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageFormatProperties>())).maxResourceSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties),
            "::",
            stringify!(maxResourceSize)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInstanceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkInstanceCreateFlags,
    pub pApplicationInfo: *const VkApplicationInfo,
    pub enabledLayerCount: u32,
    pub ppEnabledLayerNames: *const *const ::std::os::raw::c_char,
    pub enabledExtensionCount: u32,
    pub ppEnabledExtensionNames: *const *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_VkInstanceCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkInstanceCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkInstanceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkInstanceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkInstanceCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkInstanceCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkInstanceCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkInstanceCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkInstanceCreateInfo>())).pApplicationInfo as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(pApplicationInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkInstanceCreateInfo>())).enabledLayerCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(enabledLayerCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkInstanceCreateInfo>())).ppEnabledLayerNames as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(ppEnabledLayerNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkInstanceCreateInfo>())).enabledExtensionCount as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(enabledExtensionCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkInstanceCreateInfo>())).ppEnabledExtensionNames as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(ppEnabledExtensionNames)
        )
    );
}
impl Default for VkInstanceCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkMemoryHeap {
    pub size: VkDeviceSize,
    pub flags: VkMemoryHeapFlags,
}
#[test]
fn bindgen_test_layout_VkMemoryHeap() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryHeap>(),
        16usize,
        concat!("Size of: ", stringify!(VkMemoryHeap))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryHeap>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryHeap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryHeap>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryHeap),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryHeap>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryHeap),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkMemoryType {
    pub propertyFlags: VkMemoryPropertyFlags,
    pub heapIndex: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryType() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryType>(),
        8usize,
        concat!("Size of: ", stringify!(VkMemoryType))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryType>(),
        4usize,
        concat!("Alignment of ", stringify!(VkMemoryType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryType>())).propertyFlags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryType),
            "::",
            stringify!(propertyFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryType>())).heapIndex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryType),
            "::",
            stringify!(heapIndex)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPhysicalDeviceFeatures {
    pub robustBufferAccess: VkBool32,
    pub fullDrawIndexUint32: VkBool32,
    pub imageCubeArray: VkBool32,
    pub independentBlend: VkBool32,
    pub geometryShader: VkBool32,
    pub tessellationShader: VkBool32,
    pub sampleRateShading: VkBool32,
    pub dualSrcBlend: VkBool32,
    pub logicOp: VkBool32,
    pub multiDrawIndirect: VkBool32,
    pub drawIndirectFirstInstance: VkBool32,
    pub depthClamp: VkBool32,
    pub depthBiasClamp: VkBool32,
    pub fillModeNonSolid: VkBool32,
    pub depthBounds: VkBool32,
    pub wideLines: VkBool32,
    pub largePoints: VkBool32,
    pub alphaToOne: VkBool32,
    pub multiViewport: VkBool32,
    pub samplerAnisotropy: VkBool32,
    pub textureCompressionETC2: VkBool32,
    pub textureCompressionASTC_LDR: VkBool32,
    pub textureCompressionBC: VkBool32,
    pub occlusionQueryPrecise: VkBool32,
    pub pipelineStatisticsQuery: VkBool32,
    pub vertexPipelineStoresAndAtomics: VkBool32,
    pub fragmentStoresAndAtomics: VkBool32,
    pub shaderTessellationAndGeometryPointSize: VkBool32,
    pub shaderImageGatherExtended: VkBool32,
    pub shaderStorageImageExtendedFormats: VkBool32,
    pub shaderStorageImageMultisample: VkBool32,
    pub shaderStorageImageReadWithoutFormat: VkBool32,
    pub shaderStorageImageWriteWithoutFormat: VkBool32,
    pub shaderUniformBufferArrayDynamicIndexing: VkBool32,
    pub shaderSampledImageArrayDynamicIndexing: VkBool32,
    pub shaderStorageBufferArrayDynamicIndexing: VkBool32,
    pub shaderStorageImageArrayDynamicIndexing: VkBool32,
    pub shaderClipDistance: VkBool32,
    pub shaderCullDistance: VkBool32,
    pub shaderFloat64: VkBool32,
    pub shaderInt64: VkBool32,
    pub shaderInt16: VkBool32,
    pub shaderResourceResidency: VkBool32,
    pub shaderResourceMinLod: VkBool32,
    pub sparseBinding: VkBool32,
    pub sparseResidencyBuffer: VkBool32,
    pub sparseResidencyImage2D: VkBool32,
    pub sparseResidencyImage3D: VkBool32,
    pub sparseResidency2Samples: VkBool32,
    pub sparseResidency4Samples: VkBool32,
    pub sparseResidency8Samples: VkBool32,
    pub sparseResidency16Samples: VkBool32,
    pub sparseResidencyAliased: VkBool32,
    pub variableMultisampleRate: VkBool32,
    pub inheritedQueries: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFeatures>(),
        220usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceFeatures))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFeatures>(),
        4usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceFeatures))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).robustBufferAccess as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(robustBufferAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).fullDrawIndexUint32 as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(fullDrawIndexUint32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).imageCubeArray as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(imageCubeArray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).independentBlend as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(independentBlend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).geometryShader as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(geometryShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).tessellationShader as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(tessellationShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).sampleRateShading as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sampleRateShading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).dualSrcBlend as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(dualSrcBlend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).logicOp as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(logicOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).multiDrawIndirect as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(multiDrawIndirect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).drawIndirectFirstInstance
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(drawIndirectFirstInstance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).depthClamp as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(depthClamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).depthBiasClamp as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(depthBiasClamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).fillModeNonSolid as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(fillModeNonSolid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).depthBounds as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(depthBounds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).wideLines as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(wideLines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).largePoints as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(largePoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).alphaToOne as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(alphaToOne)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).multiViewport as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(multiViewport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).samplerAnisotropy as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(samplerAnisotropy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).textureCompressionETC2 as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(textureCompressionETC2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).textureCompressionASTC_LDR
                as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(textureCompressionASTC_LDR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).textureCompressionBC as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(textureCompressionBC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).occlusionQueryPrecise as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(occlusionQueryPrecise)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).pipelineStatisticsQuery as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(pipelineStatisticsQuery)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).vertexPipelineStoresAndAtomics
                as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(vertexPipelineStoresAndAtomics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).fragmentStoresAndAtomics
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(fragmentStoresAndAtomics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>()))
                .shaderTessellationAndGeometryPointSize as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderTessellationAndGeometryPointSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).shaderImageGatherExtended
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderImageGatherExtended)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).shaderStorageImageExtendedFormats
                as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderStorageImageExtendedFormats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).shaderStorageImageMultisample
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderStorageImageMultisample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).shaderStorageImageReadWithoutFormat
                as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderStorageImageReadWithoutFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>()))
                .shaderStorageImageWriteWithoutFormat as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderStorageImageWriteWithoutFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>()))
                .shaderUniformBufferArrayDynamicIndexing as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderUniformBufferArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>()))
                .shaderSampledImageArrayDynamicIndexing as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderSampledImageArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>()))
                .shaderStorageBufferArrayDynamicIndexing as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderStorageBufferArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>()))
                .shaderStorageImageArrayDynamicIndexing as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderStorageImageArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).shaderClipDistance as *const _
                as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderClipDistance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).shaderCullDistance as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderCullDistance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).shaderFloat64 as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderFloat64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).shaderInt64 as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderInt64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).shaderInt16 as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderInt16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).shaderResourceResidency as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderResourceResidency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).shaderResourceMinLod as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderResourceMinLod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).sparseBinding as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseBinding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).sparseResidencyBuffer as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidencyBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).sparseResidencyImage2D as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidencyImage2D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).sparseResidencyImage3D as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidencyImage3D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).sparseResidency2Samples as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidency2Samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).sparseResidency4Samples as *const _
                as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidency4Samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).sparseResidency8Samples as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidency8Samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).sparseResidency16Samples
                as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidency16Samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).sparseResidencyAliased as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidencyAliased)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).variableMultisampleRate as *const _
                as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(variableMultisampleRate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures>())).inheritedQueries as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(inheritedQueries)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPhysicalDeviceLimits {
    pub maxImageDimension1D: u32,
    pub maxImageDimension2D: u32,
    pub maxImageDimension3D: u32,
    pub maxImageDimensionCube: u32,
    pub maxImageArrayLayers: u32,
    pub maxTexelBufferElements: u32,
    pub maxUniformBufferRange: u32,
    pub maxStorageBufferRange: u32,
    pub maxPushConstantsSize: u32,
    pub maxMemoryAllocationCount: u32,
    pub maxSamplerAllocationCount: u32,
    pub bufferImageGranularity: VkDeviceSize,
    pub sparseAddressSpaceSize: VkDeviceSize,
    pub maxBoundDescriptorSets: u32,
    pub maxPerStageDescriptorSamplers: u32,
    pub maxPerStageDescriptorUniformBuffers: u32,
    pub maxPerStageDescriptorStorageBuffers: u32,
    pub maxPerStageDescriptorSampledImages: u32,
    pub maxPerStageDescriptorStorageImages: u32,
    pub maxPerStageDescriptorInputAttachments: u32,
    pub maxPerStageResources: u32,
    pub maxDescriptorSetSamplers: u32,
    pub maxDescriptorSetUniformBuffers: u32,
    pub maxDescriptorSetUniformBuffersDynamic: u32,
    pub maxDescriptorSetStorageBuffers: u32,
    pub maxDescriptorSetStorageBuffersDynamic: u32,
    pub maxDescriptorSetSampledImages: u32,
    pub maxDescriptorSetStorageImages: u32,
    pub maxDescriptorSetInputAttachments: u32,
    pub maxVertexInputAttributes: u32,
    pub maxVertexInputBindings: u32,
    pub maxVertexInputAttributeOffset: u32,
    pub maxVertexInputBindingStride: u32,
    pub maxVertexOutputComponents: u32,
    pub maxTessellationGenerationLevel: u32,
    pub maxTessellationPatchSize: u32,
    pub maxTessellationControlPerVertexInputComponents: u32,
    pub maxTessellationControlPerVertexOutputComponents: u32,
    pub maxTessellationControlPerPatchOutputComponents: u32,
    pub maxTessellationControlTotalOutputComponents: u32,
    pub maxTessellationEvaluationInputComponents: u32,
    pub maxTessellationEvaluationOutputComponents: u32,
    pub maxGeometryShaderInvocations: u32,
    pub maxGeometryInputComponents: u32,
    pub maxGeometryOutputComponents: u32,
    pub maxGeometryOutputVertices: u32,
    pub maxGeometryTotalOutputComponents: u32,
    pub maxFragmentInputComponents: u32,
    pub maxFragmentOutputAttachments: u32,
    pub maxFragmentDualSrcAttachments: u32,
    pub maxFragmentCombinedOutputResources: u32,
    pub maxComputeSharedMemorySize: u32,
    pub maxComputeWorkGroupCount: [u32; 3usize],
    pub maxComputeWorkGroupInvocations: u32,
    pub maxComputeWorkGroupSize: [u32; 3usize],
    pub subPixelPrecisionBits: u32,
    pub subTexelPrecisionBits: u32,
    pub mipmapPrecisionBits: u32,
    pub maxDrawIndexedIndexValue: u32,
    pub maxDrawIndirectCount: u32,
    pub maxSamplerLodBias: f32,
    pub maxSamplerAnisotropy: f32,
    pub maxViewports: u32,
    pub maxViewportDimensions: [u32; 2usize],
    pub viewportBoundsRange: [f32; 2usize],
    pub viewportSubPixelBits: u32,
    pub minMemoryMapAlignment: size_t,
    pub minTexelBufferOffsetAlignment: VkDeviceSize,
    pub minUniformBufferOffsetAlignment: VkDeviceSize,
    pub minStorageBufferOffsetAlignment: VkDeviceSize,
    pub minTexelOffset: i32,
    pub maxTexelOffset: u32,
    pub minTexelGatherOffset: i32,
    pub maxTexelGatherOffset: u32,
    pub minInterpolationOffset: f32,
    pub maxInterpolationOffset: f32,
    pub subPixelInterpolationOffsetBits: u32,
    pub maxFramebufferWidth: u32,
    pub maxFramebufferHeight: u32,
    pub maxFramebufferLayers: u32,
    pub framebufferColorSampleCounts: VkSampleCountFlags,
    pub framebufferDepthSampleCounts: VkSampleCountFlags,
    pub framebufferStencilSampleCounts: VkSampleCountFlags,
    pub framebufferNoAttachmentsSampleCounts: VkSampleCountFlags,
    pub maxColorAttachments: u32,
    pub sampledImageColorSampleCounts: VkSampleCountFlags,
    pub sampledImageIntegerSampleCounts: VkSampleCountFlags,
    pub sampledImageDepthSampleCounts: VkSampleCountFlags,
    pub sampledImageStencilSampleCounts: VkSampleCountFlags,
    pub storageImageSampleCounts: VkSampleCountFlags,
    pub maxSampleMaskWords: u32,
    pub timestampComputeAndGraphics: VkBool32,
    pub timestampPeriod: f32,
    pub maxClipDistances: u32,
    pub maxCullDistances: u32,
    pub maxCombinedClipAndCullDistances: u32,
    pub discreteQueuePriorities: u32,
    pub pointSizeRange: [f32; 2usize],
    pub lineWidthRange: [f32; 2usize],
    pub pointSizeGranularity: f32,
    pub lineWidthGranularity: f32,
    pub strictLines: VkBool32,
    pub standardSampleLocations: VkBool32,
    pub optimalBufferCopyOffsetAlignment: VkDeviceSize,
    pub optimalBufferCopyRowPitchAlignment: VkDeviceSize,
    pub nonCoherentAtomSize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceLimits() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceLimits>(),
        504usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceLimits))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceLimits>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceLimits))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxImageDimension1D as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxImageDimension1D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxImageDimension2D as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxImageDimension2D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxImageDimension3D as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxImageDimension3D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxImageDimensionCube as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxImageDimensionCube)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxImageArrayLayers as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxImageArrayLayers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxTexelBufferElements as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTexelBufferElements)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxUniformBufferRange as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxUniformBufferRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxStorageBufferRange as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxStorageBufferRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxPushConstantsSize as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPushConstantsSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxMemoryAllocationCount as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxMemoryAllocationCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxSamplerAllocationCount as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxSamplerAllocationCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).bufferImageGranularity as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(bufferImageGranularity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).sparseAddressSpaceSize as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(sparseAddressSpaceSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxBoundDescriptorSets as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxBoundDescriptorSets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxPerStageDescriptorSamplers
                as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageDescriptorSamplers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxPerStageDescriptorUniformBuffers
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageDescriptorUniformBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxPerStageDescriptorStorageBuffers
                as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageDescriptorStorageBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxPerStageDescriptorSampledImages
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageDescriptorSampledImages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxPerStageDescriptorStorageImages
                as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageDescriptorStorageImages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxPerStageDescriptorInputAttachments
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageDescriptorInputAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxPerStageResources as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageResources)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxDescriptorSetSamplers as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetSamplers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxDescriptorSetUniformBuffers
                as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetUniformBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxDescriptorSetUniformBuffersDynamic
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetUniformBuffersDynamic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxDescriptorSetStorageBuffers
                as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetStorageBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxDescriptorSetStorageBuffersDynamic
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetStorageBuffersDynamic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxDescriptorSetSampledImages
                as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetSampledImages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxDescriptorSetStorageImages
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetStorageImages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxDescriptorSetInputAttachments
                as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetInputAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxVertexInputAttributes as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxVertexInputAttributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxVertexInputBindings as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxVertexInputBindings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxVertexInputAttributeOffset
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxVertexInputAttributeOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxVertexInputBindingStride
                as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxVertexInputBindingStride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxVertexOutputComponents as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxVertexOutputComponents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxTessellationGenerationLevel
                as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationGenerationLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxTessellationPatchSize as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationPatchSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>()))
                .maxTessellationControlPerVertexInputComponents as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationControlPerVertexInputComponents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>()))
                .maxTessellationControlPerVertexOutputComponents as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationControlPerVertexOutputComponents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>()))
                .maxTessellationControlPerPatchOutputComponents as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationControlPerPatchOutputComponents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>()))
                .maxTessellationControlTotalOutputComponents as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationControlTotalOutputComponents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>()))
                .maxTessellationEvaluationInputComponents as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationEvaluationInputComponents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>()))
                .maxTessellationEvaluationOutputComponents as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationEvaluationOutputComponents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxGeometryShaderInvocations
                as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxGeometryShaderInvocations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxGeometryInputComponents
                as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxGeometryInputComponents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxGeometryOutputComponents
                as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxGeometryOutputComponents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxGeometryOutputVertices as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxGeometryOutputVertices)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxGeometryTotalOutputComponents
                as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxGeometryTotalOutputComponents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxFragmentInputComponents
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFragmentInputComponents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxFragmentOutputAttachments
                as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFragmentOutputAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxFragmentDualSrcAttachments
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFragmentDualSrcAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxFragmentCombinedOutputResources
                as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFragmentCombinedOutputResources)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxComputeSharedMemorySize
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxComputeSharedMemorySize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxComputeWorkGroupCount as *const _
                as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxComputeWorkGroupCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxComputeWorkGroupInvocations
                as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxComputeWorkGroupInvocations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxComputeWorkGroupSize as *const _
                as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxComputeWorkGroupSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).subPixelPrecisionBits as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(subPixelPrecisionBits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).subTexelPrecisionBits as *const _
                as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(subTexelPrecisionBits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).mipmapPrecisionBits as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(mipmapPrecisionBits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxDrawIndexedIndexValue as *const _
                as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDrawIndexedIndexValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxDrawIndirectCount as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDrawIndirectCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxSamplerLodBias as *const _
                as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxSamplerLodBias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxSamplerAnisotropy as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxSamplerAnisotropy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxViewports as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxViewports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxViewportDimensions as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxViewportDimensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).viewportBoundsRange as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(viewportBoundsRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).viewportSubPixelBits as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(viewportSubPixelBits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).minMemoryMapAlignment as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minMemoryMapAlignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).minTexelBufferOffsetAlignment
                as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minTexelBufferOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).minUniformBufferOffsetAlignment
                as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minUniformBufferOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).minStorageBufferOffsetAlignment
                as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minStorageBufferOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).minTexelOffset as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minTexelOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxTexelOffset as *const _ as usize
        },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTexelOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).minTexelGatherOffset as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minTexelGatherOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxTexelGatherOffset as *const _
                as usize
        },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTexelGatherOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).minInterpolationOffset as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minInterpolationOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxInterpolationOffset as *const _
                as usize
        },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxInterpolationOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).subPixelInterpolationOffsetBits
                as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(subPixelInterpolationOffsetBits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxFramebufferWidth as *const _
                as usize
        },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFramebufferWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxFramebufferHeight as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFramebufferHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxFramebufferLayers as *const _
                as usize
        },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFramebufferLayers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).framebufferColorSampleCounts
                as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(framebufferColorSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).framebufferDepthSampleCounts
                as *const _ as usize
        },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(framebufferDepthSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).framebufferStencilSampleCounts
                as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(framebufferStencilSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).framebufferNoAttachmentsSampleCounts
                as *const _ as usize
        },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(framebufferNoAttachmentsSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxColorAttachments as *const _
                as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxColorAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).sampledImageColorSampleCounts
                as *const _ as usize
        },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(sampledImageColorSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).sampledImageIntegerSampleCounts
                as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(sampledImageIntegerSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).sampledImageDepthSampleCounts
                as *const _ as usize
        },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(sampledImageDepthSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).sampledImageStencilSampleCounts
                as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(sampledImageStencilSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).storageImageSampleCounts as *const _
                as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(storageImageSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxSampleMaskWords as *const _
                as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxSampleMaskWords)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).timestampComputeAndGraphics
                as *const _ as usize
        },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(timestampComputeAndGraphics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).timestampPeriod as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(timestampPeriod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxClipDistances as *const _ as usize
        },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxClipDistances)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxCullDistances as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxCullDistances)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).maxCombinedClipAndCullDistances
                as *const _ as usize
        },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxCombinedClipAndCullDistances)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).discreteQueuePriorities as *const _
                as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(discreteQueuePriorities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).pointSizeRange as *const _ as usize
        },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(pointSizeRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).lineWidthRange as *const _ as usize
        },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(lineWidthRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).pointSizeGranularity as *const _
                as usize
        },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(pointSizeGranularity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).lineWidthGranularity as *const _
                as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(lineWidthGranularity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).strictLines as *const _ as usize
        },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(strictLines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).standardSampleLocations as *const _
                as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(standardSampleLocations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).optimalBufferCopyOffsetAlignment
                as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(optimalBufferCopyOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).optimalBufferCopyRowPitchAlignment
                as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(optimalBufferCopyRowPitchAlignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLimits>())).nonCoherentAtomSize as *const _
                as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(nonCoherentAtomSize)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPhysicalDeviceMemoryProperties {
    pub memoryTypeCount: u32,
    pub memoryTypes: [VkMemoryType; 32usize],
    pub memoryHeapCount: u32,
    pub memoryHeaps: [VkMemoryHeap; 16usize],
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMemoryProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMemoryProperties>(),
        520usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceMemoryProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMemoryProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMemoryProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryProperties>())).memoryTypeCount as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties),
            "::",
            stringify!(memoryTypeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryProperties>())).memoryTypes as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties),
            "::",
            stringify!(memoryTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryProperties>())).memoryHeapCount as *const _
                as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties),
            "::",
            stringify!(memoryHeapCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryProperties>())).memoryHeaps as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties),
            "::",
            stringify!(memoryHeaps)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPhysicalDeviceSparseProperties {
    pub residencyStandard2DBlockShape: VkBool32,
    pub residencyStandard2DMultisampleBlockShape: VkBool32,
    pub residencyStandard3DBlockShape: VkBool32,
    pub residencyAlignedMipSize: VkBool32,
    pub residencyNonResidentStrict: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSparseProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSparseProperties>(),
        20usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceSparseProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSparseProperties>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSparseProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSparseProperties>()))
                .residencyStandard2DBlockShape as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseProperties),
            "::",
            stringify!(residencyStandard2DBlockShape)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSparseProperties>()))
                .residencyStandard2DMultisampleBlockShape as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseProperties),
            "::",
            stringify!(residencyStandard2DMultisampleBlockShape)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSparseProperties>()))
                .residencyStandard3DBlockShape as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseProperties),
            "::",
            stringify!(residencyStandard3DBlockShape)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSparseProperties>())).residencyAlignedMipSize
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseProperties),
            "::",
            stringify!(residencyAlignedMipSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSparseProperties>())).residencyNonResidentStrict
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseProperties),
            "::",
            stringify!(residencyNonResidentStrict)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProperties {
    pub apiVersion: u32,
    pub driverVersion: u32,
    pub vendorID: u32,
    pub deviceID: u32,
    pub deviceType: VkPhysicalDeviceType,
    pub deviceName: [::std::os::raw::c_char; 256usize],
    pub pipelineCacheUUID: [u8; 16usize],
    pub limits: VkPhysicalDeviceLimits,
    pub sparseProperties: VkPhysicalDeviceSparseProperties,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceProperties>(),
        824usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProperties>())).apiVersion as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(apiVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProperties>())).driverVersion as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(driverVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProperties>())).vendorID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(vendorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProperties>())).deviceID as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(deviceID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProperties>())).deviceType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(deviceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProperties>())).deviceName as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(deviceName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProperties>())).pipelineCacheUUID as *const _
                as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(pipelineCacheUUID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProperties>())).limits as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(limits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProperties>())).sparseProperties as *const _
                as usize
        },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(sparseProperties)
        )
    );
}
impl Default for VkPhysicalDeviceProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkQueueFamilyProperties {
    pub queueFlags: VkQueueFlags,
    pub queueCount: u32,
    pub timestampValidBits: u32,
    pub minImageTransferGranularity: VkExtent3D,
}
#[test]
fn bindgen_test_layout_VkQueueFamilyProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkQueueFamilyProperties>(),
        24usize,
        concat!("Size of: ", stringify!(VkQueueFamilyProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueueFamilyProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(VkQueueFamilyProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueueFamilyProperties>())).queueFlags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties),
            "::",
            stringify!(queueFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueueFamilyProperties>())).queueCount as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties),
            "::",
            stringify!(queueCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueueFamilyProperties>())).timestampValidBits as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties),
            "::",
            stringify!(timestampValidBits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueueFamilyProperties>())).minImageTransferGranularity
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties),
            "::",
            stringify!(minImageTransferGranularity)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceQueueCreateFlags,
    pub queueFamilyIndex: u32,
    pub queueCount: u32,
    pub pQueuePriorities: *const f32,
}
#[test]
fn bindgen_test_layout_VkDeviceQueueCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceQueueCreateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkDeviceQueueCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceQueueCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceQueueCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceQueueCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceQueueCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceQueueCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceQueueCreateInfo>())).queueFamilyIndex as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueCreateInfo),
            "::",
            stringify!(queueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceQueueCreateInfo>())).queueCount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueCreateInfo),
            "::",
            stringify!(queueCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceQueueCreateInfo>())).pQueuePriorities as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueCreateInfo),
            "::",
            stringify!(pQueuePriorities)
        )
    );
}
impl Default for VkDeviceQueueCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceCreateFlags,
    pub queueCreateInfoCount: u32,
    pub pQueueCreateInfos: *const VkDeviceQueueCreateInfo,
    pub enabledLayerCount: u32,
    pub ppEnabledLayerNames: *const *const ::std::os::raw::c_char,
    pub enabledExtensionCount: u32,
    pub ppEnabledExtensionNames: *const *const ::std::os::raw::c_char,
    pub pEnabledFeatures: *const VkPhysicalDeviceFeatures,
}
#[test]
fn bindgen_test_layout_VkDeviceCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceCreateInfo>(),
        72usize,
        concat!("Size of: ", stringify!(VkDeviceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceCreateInfo>())).queueCreateInfoCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(queueCreateInfoCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceCreateInfo>())).pQueueCreateInfos as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(pQueueCreateInfos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceCreateInfo>())).enabledLayerCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(enabledLayerCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceCreateInfo>())).ppEnabledLayerNames as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(ppEnabledLayerNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceCreateInfo>())).enabledExtensionCount as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(enabledExtensionCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceCreateInfo>())).ppEnabledExtensionNames as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(ppEnabledExtensionNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceCreateInfo>())).pEnabledFeatures as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(pEnabledFeatures)
        )
    );
}
impl Default for VkDeviceCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExtensionProperties {
    pub extensionName: [::std::os::raw::c_char; 256usize],
    pub specVersion: u32,
}
#[test]
fn bindgen_test_layout_VkExtensionProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkExtensionProperties>(),
        260usize,
        concat!("Size of: ", stringify!(VkExtensionProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExtensionProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(VkExtensionProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExtensionProperties>())).extensionName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtensionProperties),
            "::",
            stringify!(extensionName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExtensionProperties>())).specVersion as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtensionProperties),
            "::",
            stringify!(specVersion)
        )
    );
}
impl Default for VkExtensionProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLayerProperties {
    pub layerName: [::std::os::raw::c_char; 256usize],
    pub specVersion: u32,
    pub implementationVersion: u32,
    pub description: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_VkLayerProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkLayerProperties>(),
        520usize,
        concat!("Size of: ", stringify!(VkLayerProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(VkLayerProperties))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkLayerProperties>())).layerName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerProperties),
            "::",
            stringify!(layerName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkLayerProperties>())).specVersion as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerProperties),
            "::",
            stringify!(specVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkLayerProperties>())).implementationVersion as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerProperties),
            "::",
            stringify!(implementationVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkLayerProperties>())).description as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerProperties),
            "::",
            stringify!(description)
        )
    );
}
impl Default for VkLayerProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphores: *const VkSemaphore,
    pub pWaitDstStageMask: *const VkPipelineStageFlags,
    pub commandBufferCount: u32,
    pub pCommandBuffers: *const VkCommandBuffer,
    pub signalSemaphoreCount: u32,
    pub pSignalSemaphores: *const VkSemaphore,
}
#[test]
fn bindgen_test_layout_VkSubmitInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSubmitInfo>(),
        72usize,
        concat!("Size of: ", stringify!(VkSubmitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubmitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubmitInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubmitInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubmitInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubmitInfo>())).waitSemaphoreCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(waitSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubmitInfo>())).pWaitSemaphores as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(pWaitSemaphores)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubmitInfo>())).pWaitDstStageMask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(pWaitDstStageMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubmitInfo>())).commandBufferCount as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(commandBufferCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubmitInfo>())).pCommandBuffers as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(pCommandBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubmitInfo>())).signalSemaphoreCount as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(signalSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubmitInfo>())).pSignalSemaphores as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(pSignalSemaphores)
        )
    );
}
impl Default for VkSubmitInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMappedMemoryRange {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memory: VkDeviceMemory,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkMappedMemoryRange() {
    assert_eq!(
        ::std::mem::size_of::<VkMappedMemoryRange>(),
        40usize,
        concat!("Size of: ", stringify!(VkMappedMemoryRange))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMappedMemoryRange>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMappedMemoryRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMappedMemoryRange>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMappedMemoryRange),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMappedMemoryRange>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMappedMemoryRange),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMappedMemoryRange>())).memory as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMappedMemoryRange),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMappedMemoryRange>())).offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMappedMemoryRange),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMappedMemoryRange>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMappedMemoryRange),
            "::",
            stringify!(size)
        )
    );
}
impl Default for VkMappedMemoryRange {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub allocationSize: VkDeviceSize,
    pub memoryTypeIndex: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryAllocateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryAllocateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkMemoryAllocateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryAllocateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryAllocateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryAllocateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryAllocateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryAllocateInfo>())).allocationSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateInfo),
            "::",
            stringify!(allocationSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryAllocateInfo>())).memoryTypeIndex as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateInfo),
            "::",
            stringify!(memoryTypeIndex)
        )
    );
}
impl Default for VkMemoryAllocateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkMemoryRequirements {
    pub size: VkDeviceSize,
    pub alignment: VkDeviceSize,
    pub memoryTypeBits: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryRequirements() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryRequirements>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryRequirements))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryRequirements>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryRequirements))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryRequirements>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryRequirements>())).alignment as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryRequirements>())).memoryTypeBits as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements),
            "::",
            stringify!(memoryTypeBits)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseMemoryBind {
    pub resourceOffset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub flags: VkSparseMemoryBindFlags,
}
#[test]
fn bindgen_test_layout_VkSparseMemoryBind() {
    assert_eq!(
        ::std::mem::size_of::<VkSparseMemoryBind>(),
        40usize,
        concat!("Size of: ", stringify!(VkSparseMemoryBind))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseMemoryBind>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSparseMemoryBind))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseMemoryBind>())).resourceOffset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseMemoryBind),
            "::",
            stringify!(resourceOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSparseMemoryBind>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseMemoryBind),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSparseMemoryBind>())).memory as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseMemoryBind),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSparseMemoryBind>())).memoryOffset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseMemoryBind),
            "::",
            stringify!(memoryOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSparseMemoryBind>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseMemoryBind),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkSparseMemoryBind {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseBufferMemoryBindInfo {
    pub buffer: VkBuffer,
    pub bindCount: u32,
    pub pBinds: *const VkSparseMemoryBind,
}
#[test]
fn bindgen_test_layout_VkSparseBufferMemoryBindInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSparseBufferMemoryBindInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSparseBufferMemoryBindInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseBufferMemoryBindInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSparseBufferMemoryBindInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseBufferMemoryBindInfo>())).buffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseBufferMemoryBindInfo),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseBufferMemoryBindInfo>())).bindCount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseBufferMemoryBindInfo),
            "::",
            stringify!(bindCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseBufferMemoryBindInfo>())).pBinds as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseBufferMemoryBindInfo),
            "::",
            stringify!(pBinds)
        )
    );
}
impl Default for VkSparseBufferMemoryBindInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageOpaqueMemoryBindInfo {
    pub image: VkImage,
    pub bindCount: u32,
    pub pBinds: *const VkSparseMemoryBind,
}
#[test]
fn bindgen_test_layout_VkSparseImageOpaqueMemoryBindInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageOpaqueMemoryBindInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSparseImageOpaqueMemoryBindInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageOpaqueMemoryBindInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSparseImageOpaqueMemoryBindInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageOpaqueMemoryBindInfo>())).image as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageOpaqueMemoryBindInfo),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageOpaqueMemoryBindInfo>())).bindCount as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageOpaqueMemoryBindInfo),
            "::",
            stringify!(bindCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageOpaqueMemoryBindInfo>())).pBinds as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageOpaqueMemoryBindInfo),
            "::",
            stringify!(pBinds)
        )
    );
}
impl Default for VkSparseImageOpaqueMemoryBindInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageSubresource {
    pub aspectMask: VkImageAspectFlags,
    pub mipLevel: u32,
    pub arrayLayer: u32,
}
#[test]
fn bindgen_test_layout_VkImageSubresource() {
    assert_eq!(
        ::std::mem::size_of::<VkImageSubresource>(),
        12usize,
        concat!("Size of: ", stringify!(VkImageSubresource))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageSubresource>(),
        4usize,
        concat!("Alignment of ", stringify!(VkImageSubresource))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageSubresource>())).aspectMask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresource),
            "::",
            stringify!(aspectMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageSubresource>())).mipLevel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresource),
            "::",
            stringify!(mipLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageSubresource>())).arrayLayer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresource),
            "::",
            stringify!(arrayLayer)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryBind {
    pub subresource: VkImageSubresource,
    pub offset: VkOffset3D,
    pub extent: VkExtent3D,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub flags: VkSparseMemoryBindFlags,
}
#[test]
fn bindgen_test_layout_VkSparseImageMemoryBind() {
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageMemoryBind>(),
        64usize,
        concat!("Size of: ", stringify!(VkSparseImageMemoryBind))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageMemoryBind>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSparseImageMemoryBind))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageMemoryBind>())).subresource as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBind),
            "::",
            stringify!(subresource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSparseImageMemoryBind>())).offset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBind),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSparseImageMemoryBind>())).extent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBind),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSparseImageMemoryBind>())).memory as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBind),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageMemoryBind>())).memoryOffset as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBind),
            "::",
            stringify!(memoryOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSparseImageMemoryBind>())).flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBind),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkSparseImageMemoryBind {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryBindInfo {
    pub image: VkImage,
    pub bindCount: u32,
    pub pBinds: *const VkSparseImageMemoryBind,
}
#[test]
fn bindgen_test_layout_VkSparseImageMemoryBindInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageMemoryBindInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSparseImageMemoryBindInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageMemoryBindInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSparseImageMemoryBindInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageMemoryBindInfo>())).image as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBindInfo),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageMemoryBindInfo>())).bindCount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBindInfo),
            "::",
            stringify!(bindCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageMemoryBindInfo>())).pBinds as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBindInfo),
            "::",
            stringify!(pBinds)
        )
    );
}
impl Default for VkSparseImageMemoryBindInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindSparseInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphores: *const VkSemaphore,
    pub bufferBindCount: u32,
    pub pBufferBinds: *const VkSparseBufferMemoryBindInfo,
    pub imageOpaqueBindCount: u32,
    pub pImageOpaqueBinds: *const VkSparseImageOpaqueMemoryBindInfo,
    pub imageBindCount: u32,
    pub pImageBinds: *const VkSparseImageMemoryBindInfo,
    pub signalSemaphoreCount: u32,
    pub pSignalSemaphores: *const VkSemaphore,
}
#[test]
fn bindgen_test_layout_VkBindSparseInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkBindSparseInfo>(),
        96usize,
        concat!("Size of: ", stringify!(VkBindSparseInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindSparseInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBindSparseInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBindSparseInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBindSparseInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindSparseInfo>())).waitSemaphoreCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(waitSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindSparseInfo>())).pWaitSemaphores as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(pWaitSemaphores)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindSparseInfo>())).bufferBindCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(bufferBindCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBindSparseInfo>())).pBufferBinds as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(pBufferBinds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindSparseInfo>())).imageOpaqueBindCount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(imageOpaqueBindCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindSparseInfo>())).pImageOpaqueBinds as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(pImageOpaqueBinds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBindSparseInfo>())).imageBindCount as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(imageBindCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBindSparseInfo>())).pImageBinds as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(pImageBinds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindSparseInfo>())).signalSemaphoreCount as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(signalSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindSparseInfo>())).pSignalSemaphores as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(pSignalSemaphores)
        )
    );
}
impl Default for VkBindSparseInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSparseImageFormatProperties {
    pub aspectMask: VkImageAspectFlags,
    pub imageGranularity: VkExtent3D,
    pub flags: VkSparseImageFormatFlags,
}
#[test]
fn bindgen_test_layout_VkSparseImageFormatProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageFormatProperties>(),
        20usize,
        concat!("Size of: ", stringify!(VkSparseImageFormatProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageFormatProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(VkSparseImageFormatProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageFormatProperties>())).aspectMask as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageFormatProperties),
            "::",
            stringify!(aspectMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageFormatProperties>())).imageGranularity as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageFormatProperties),
            "::",
            stringify!(imageGranularity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageFormatProperties>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageFormatProperties),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSparseImageMemoryRequirements {
    pub formatProperties: VkSparseImageFormatProperties,
    pub imageMipTailFirstLod: u32,
    pub imageMipTailSize: VkDeviceSize,
    pub imageMipTailOffset: VkDeviceSize,
    pub imageMipTailStride: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkSparseImageMemoryRequirements() {
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageMemoryRequirements>(),
        48usize,
        concat!("Size of: ", stringify!(VkSparseImageMemoryRequirements))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageMemoryRequirements>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSparseImageMemoryRequirements))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageMemoryRequirements>())).formatProperties as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements),
            "::",
            stringify!(formatProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageMemoryRequirements>())).imageMipTailFirstLod
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements),
            "::",
            stringify!(imageMipTailFirstLod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageMemoryRequirements>())).imageMipTailSize as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements),
            "::",
            stringify!(imageMipTailSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageMemoryRequirements>())).imageMipTailOffset
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements),
            "::",
            stringify!(imageMipTailOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageMemoryRequirements>())).imageMipTailStride
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements),
            "::",
            stringify!(imageMipTailStride)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFenceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkFenceCreateFlags,
}
#[test]
fn bindgen_test_layout_VkFenceCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkFenceCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkFenceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFenceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFenceCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFenceCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFenceCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFenceCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceCreateInfo),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkFenceCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSemaphoreCreateFlags,
}
#[test]
fn bindgen_test_layout_VkSemaphoreCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSemaphoreCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSemaphoreCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSemaphoreCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSemaphoreCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreCreateInfo),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkSemaphoreCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkEventCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkEventCreateFlags,
}
#[test]
fn bindgen_test_layout_VkEventCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkEventCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkEventCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkEventCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkEventCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkEventCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEventCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkEventCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEventCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkEventCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEventCreateInfo),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkEventCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPoolCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkQueryPoolCreateFlags,
    pub queryType: VkQueryType,
    pub queryCount: u32,
    pub pipelineStatistics: VkQueryPipelineStatisticFlags,
}
#[test]
fn bindgen_test_layout_VkQueryPoolCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkQueryPoolCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkQueryPoolCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueryPoolCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkQueryPoolCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkQueryPoolCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkQueryPoolCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkQueryPoolCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkQueryPoolCreateInfo>())).queryType as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolCreateInfo),
            "::",
            stringify!(queryType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueryPoolCreateInfo>())).queryCount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolCreateInfo),
            "::",
            stringify!(queryCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueryPoolCreateInfo>())).pipelineStatistics as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolCreateInfo),
            "::",
            stringify!(pipelineStatistics)
        )
    );
}
impl Default for VkQueryPoolCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkBufferCreateFlags,
    pub size: VkDeviceSize,
    pub usage: VkBufferUsageFlags,
    pub sharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
}
#[test]
fn bindgen_test_layout_VkBufferCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkBufferCreateInfo>(),
        56usize,
        concat!("Size of: ", stringify!(VkBufferCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferCreateInfo>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferCreateInfo>())).usage as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferCreateInfo>())).sharingMode as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(sharingMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferCreateInfo>())).queueFamilyIndexCount as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(queueFamilyIndexCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferCreateInfo>())).pQueueFamilyIndices as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(pQueueFamilyIndices)
        )
    );
}
impl Default for VkBufferCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferViewCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkBufferViewCreateFlags,
    pub buffer: VkBuffer,
    pub format: VkFormat,
    pub offset: VkDeviceSize,
    pub range: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBufferViewCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkBufferViewCreateInfo>(),
        56usize,
        concat!("Size of: ", stringify!(VkBufferViewCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferViewCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferViewCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferViewCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferViewCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferViewCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferViewCreateInfo>())).buffer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferViewCreateInfo>())).format as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferViewCreateInfo>())).offset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferViewCreateInfo>())).range as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(range)
        )
    );
}
impl Default for VkBufferViewCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkImageCreateFlags,
    pub imageType: VkImageType,
    pub format: VkFormat,
    pub extent: VkExtent3D,
    pub mipLevels: u32,
    pub arrayLayers: u32,
    pub samples: VkSampleCountFlagBits,
    pub tiling: VkImageTiling,
    pub usage: VkImageUsageFlags,
    pub sharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
    pub initialLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkImageCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkImageCreateInfo>(),
        88usize,
        concat!("Size of: ", stringify!(VkImageCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCreateInfo>())).imageType as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(imageType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCreateInfo>())).format as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCreateInfo>())).extent as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCreateInfo>())).mipLevels as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(mipLevels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCreateInfo>())).arrayLayers as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(arrayLayers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCreateInfo>())).samples as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCreateInfo>())).tiling as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(tiling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCreateInfo>())).usage as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCreateInfo>())).sharingMode as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(sharingMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageCreateInfo>())).queueFamilyIndexCount as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(queueFamilyIndexCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageCreateInfo>())).pQueueFamilyIndices as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(pQueueFamilyIndices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCreateInfo>())).initialLayout as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(initialLayout)
        )
    );
}
impl Default for VkImageCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSubresourceLayout {
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub rowPitch: VkDeviceSize,
    pub arrayPitch: VkDeviceSize,
    pub depthPitch: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkSubresourceLayout() {
    assert_eq!(
        ::std::mem::size_of::<VkSubresourceLayout>(),
        40usize,
        concat!("Size of: ", stringify!(VkSubresourceLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubresourceLayout>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubresourceLayout))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubresourceLayout>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubresourceLayout),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubresourceLayout>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubresourceLayout),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubresourceLayout>())).rowPitch as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubresourceLayout),
            "::",
            stringify!(rowPitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubresourceLayout>())).arrayPitch as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubresourceLayout),
            "::",
            stringify!(arrayPitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubresourceLayout>())).depthPitch as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubresourceLayout),
            "::",
            stringify!(depthPitch)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkComponentMapping {
    pub r: VkComponentSwizzle,
    pub g: VkComponentSwizzle,
    pub b: VkComponentSwizzle,
    pub a: VkComponentSwizzle,
}
#[test]
fn bindgen_test_layout_VkComponentMapping() {
    assert_eq!(
        ::std::mem::size_of::<VkComponentMapping>(),
        16usize,
        concat!("Size of: ", stringify!(VkComponentMapping))
    );
    assert_eq!(
        ::std::mem::align_of::<VkComponentMapping>(),
        4usize,
        concat!("Alignment of ", stringify!(VkComponentMapping))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkComponentMapping>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComponentMapping),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkComponentMapping>())).g as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComponentMapping),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkComponentMapping>())).b as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComponentMapping),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkComponentMapping>())).a as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComponentMapping),
            "::",
            stringify!(a)
        )
    );
}
impl Default for VkComponentMapping {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkImageViewCreateFlags,
    pub image: VkImage,
    pub viewType: VkImageViewType,
    pub format: VkFormat,
    pub components: VkComponentMapping,
    pub subresourceRange: VkImageSubresourceRange,
}
#[test]
fn bindgen_test_layout_VkImageViewCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkImageViewCreateInfo>(),
        80usize,
        concat!("Size of: ", stringify!(VkImageViewCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageViewCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageViewCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageViewCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageViewCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageViewCreateInfo>())).image as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageViewCreateInfo>())).viewType as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(viewType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageViewCreateInfo>())).format as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewCreateInfo>())).components as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewCreateInfo>())).subresourceRange as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(subresourceRange)
        )
    );
}
impl Default for VkImageViewCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderModuleCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkShaderModuleCreateFlags,
    pub codeSize: size_t,
    pub pCode: *const u32,
}
#[test]
fn bindgen_test_layout_VkShaderModuleCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkShaderModuleCreateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkShaderModuleCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkShaderModuleCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkShaderModuleCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkShaderModuleCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkShaderModuleCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkShaderModuleCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderModuleCreateInfo>())).codeSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleCreateInfo),
            "::",
            stringify!(codeSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkShaderModuleCreateInfo>())).pCode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleCreateInfo),
            "::",
            stringify!(pCode)
        )
    );
}
impl Default for VkShaderModuleCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCacheCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCacheCreateFlags,
    pub initialDataSize: size_t,
    pub pInitialData: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkPipelineCacheCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCacheCreateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkPipelineCacheCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCacheCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineCacheCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPipelineCacheCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPipelineCacheCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPipelineCacheCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCacheCreateInfo>())).initialDataSize as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheCreateInfo),
            "::",
            stringify!(initialDataSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCacheCreateInfo>())).pInitialData as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheCreateInfo),
            "::",
            stringify!(pInitialData)
        )
    );
}
impl Default for VkPipelineCacheCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSpecializationMapEntry {
    pub constantID: u32,
    pub offset: u32,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_VkSpecializationMapEntry() {
    assert_eq!(
        ::std::mem::size_of::<VkSpecializationMapEntry>(),
        16usize,
        concat!("Size of: ", stringify!(VkSpecializationMapEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSpecializationMapEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSpecializationMapEntry))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSpecializationMapEntry>())).constantID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationMapEntry),
            "::",
            stringify!(constantID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSpecializationMapEntry>())).offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationMapEntry),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSpecializationMapEntry>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationMapEntry),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSpecializationInfo {
    pub mapEntryCount: u32,
    pub pMapEntries: *const VkSpecializationMapEntry,
    pub dataSize: size_t,
    pub pData: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkSpecializationInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSpecializationInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkSpecializationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSpecializationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSpecializationInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSpecializationInfo>())).mapEntryCount as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationInfo),
            "::",
            stringify!(mapEntryCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSpecializationInfo>())).pMapEntries as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationInfo),
            "::",
            stringify!(pMapEntries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSpecializationInfo>())).dataSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationInfo),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSpecializationInfo>())).pData as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationInfo),
            "::",
            stringify!(pData)
        )
    );
}
impl Default for VkSpecializationInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineShaderStageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineShaderStageCreateFlags,
    pub stage: VkShaderStageFlagBits,
    pub module: VkShaderModule,
    pub pName: *const ::std::os::raw::c_char,
    pub pSpecializationInfo: *const VkSpecializationInfo,
}
#[test]
fn bindgen_test_layout_VkPipelineShaderStageCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineShaderStageCreateInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkPipelineShaderStageCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineShaderStageCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineShaderStageCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineShaderStageCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineShaderStageCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineShaderStageCreateInfo>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineShaderStageCreateInfo>())).stage as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineShaderStageCreateInfo>())).module as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineShaderStageCreateInfo>())).pName as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(pName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineShaderStageCreateInfo>())).pSpecializationInfo
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(pSpecializationInfo)
        )
    );
}
impl Default for VkPipelineShaderStageCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkComputePipelineCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stage: VkPipelineShaderStageCreateInfo,
    pub layout: VkPipelineLayout,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[test]
fn bindgen_test_layout_VkComputePipelineCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkComputePipelineCreateInfo>(),
        96usize,
        concat!("Size of: ", stringify!(VkComputePipelineCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkComputePipelineCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkComputePipelineCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkComputePipelineCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkComputePipelineCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkComputePipelineCreateInfo>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkComputePipelineCreateInfo>())).stage as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkComputePipelineCreateInfo>())).layout as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkComputePipelineCreateInfo>())).basePipelineHandle as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(basePipelineHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkComputePipelineCreateInfo>())).basePipelineIndex as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(basePipelineIndex)
        )
    );
}
impl Default for VkComputePipelineCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputBindingDescription {
    pub binding: u32,
    pub stride: u32,
    pub inputRate: VkVertexInputRate,
}
#[test]
fn bindgen_test_layout_VkVertexInputBindingDescription() {
    assert_eq!(
        ::std::mem::size_of::<VkVertexInputBindingDescription>(),
        12usize,
        concat!("Size of: ", stringify!(VkVertexInputBindingDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVertexInputBindingDescription>(),
        4usize,
        concat!("Alignment of ", stringify!(VkVertexInputBindingDescription))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkVertexInputBindingDescription>())).binding as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDescription),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkVertexInputBindingDescription>())).stride as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDescription),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkVertexInputBindingDescription>())).inputRate as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDescription),
            "::",
            stringify!(inputRate)
        )
    );
}
impl Default for VkVertexInputBindingDescription {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputAttributeDescription {
    pub location: u32,
    pub binding: u32,
    pub format: VkFormat,
    pub offset: u32,
}
#[test]
fn bindgen_test_layout_VkVertexInputAttributeDescription() {
    assert_eq!(
        ::std::mem::size_of::<VkVertexInputAttributeDescription>(),
        16usize,
        concat!("Size of: ", stringify!(VkVertexInputAttributeDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVertexInputAttributeDescription>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkVertexInputAttributeDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkVertexInputAttributeDescription>())).location as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkVertexInputAttributeDescription>())).binding as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkVertexInputAttributeDescription>())).format as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkVertexInputAttributeDescription>())).offset as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription),
            "::",
            stringify!(offset)
        )
    );
}
impl Default for VkVertexInputAttributeDescription {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineVertexInputStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineVertexInputStateCreateFlags,
    pub vertexBindingDescriptionCount: u32,
    pub pVertexBindingDescriptions: *const VkVertexInputBindingDescription,
    pub vertexAttributeDescriptionCount: u32,
    pub pVertexAttributeDescriptions: *const VkVertexInputAttributeDescription,
}
#[test]
fn bindgen_test_layout_VkPipelineVertexInputStateCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineVertexInputStateCreateInfo>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineVertexInputStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineVertexInputStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineVertexInputStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineVertexInputStateCreateInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineVertexInputStateCreateInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineVertexInputStateCreateInfo>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineVertexInputStateCreateInfo>()))
                .vertexBindingDescriptionCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(vertexBindingDescriptionCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineVertexInputStateCreateInfo>()))
                .pVertexBindingDescriptions as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(pVertexBindingDescriptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineVertexInputStateCreateInfo>()))
                .vertexAttributeDescriptionCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(vertexAttributeDescriptionCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineVertexInputStateCreateInfo>()))
                .pVertexAttributeDescriptions as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(pVertexAttributeDescriptions)
        )
    );
}
impl Default for VkPipelineVertexInputStateCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineInputAssemblyStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineInputAssemblyStateCreateFlags,
    pub topology: VkPrimitiveTopology,
    pub primitiveRestartEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPipelineInputAssemblyStateCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineInputAssemblyStateCreateInfo>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineInputAssemblyStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineInputAssemblyStateCreateInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineInputAssemblyStateCreateInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineInputAssemblyStateCreateInfo>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineInputAssemblyStateCreateInfo>())).topology as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo),
            "::",
            stringify!(topology)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineInputAssemblyStateCreateInfo>()))
                .primitiveRestartEnable as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo),
            "::",
            stringify!(primitiveRestartEnable)
        )
    );
}
impl Default for VkPipelineInputAssemblyStateCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineTessellationStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineTessellationStateCreateFlags,
    pub patchControlPoints: u32,
}
#[test]
fn bindgen_test_layout_VkPipelineTessellationStateCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineTessellationStateCreateInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineTessellationStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineTessellationStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineTessellationStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineTessellationStateCreateInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineTessellationStateCreateInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineTessellationStateCreateInfo>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineTessellationStateCreateInfo>())).patchControlPoints
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationStateCreateInfo),
            "::",
            stringify!(patchControlPoints)
        )
    );
}
impl Default for VkPipelineTessellationStateCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkViewport {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
    pub minDepth: f32,
    pub maxDepth: f32,
}
#[test]
fn bindgen_test_layout_VkViewport() {
    assert_eq!(
        ::std::mem::size_of::<VkViewport>(),
        24usize,
        concat!("Size of: ", stringify!(VkViewport))
    );
    assert_eq!(
        ::std::mem::align_of::<VkViewport>(),
        4usize,
        concat!("Alignment of ", stringify!(VkViewport))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkViewport>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewport),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkViewport>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewport),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkViewport>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewport),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkViewport>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewport),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkViewport>())).minDepth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewport),
            "::",
            stringify!(minDepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkViewport>())).maxDepth as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewport),
            "::",
            stringify!(maxDepth)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineViewportStateCreateFlags,
    pub viewportCount: u32,
    pub pViewports: *const VkViewport,
    pub scissorCount: u32,
    pub pScissors: *const VkRect2D,
}
#[test]
fn bindgen_test_layout_VkPipelineViewportStateCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineViewportStateCreateInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkPipelineViewportStateCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineViewportStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineViewportStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportStateCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportStateCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportStateCreateInfo>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportStateCreateInfo>())).viewportCount as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(viewportCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportStateCreateInfo>())).pViewports as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(pViewports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportStateCreateInfo>())).scissorCount as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(scissorCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportStateCreateInfo>())).pScissors as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(pScissors)
        )
    );
}
impl Default for VkPipelineViewportStateCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineRasterizationStateCreateFlags,
    pub depthClampEnable: VkBool32,
    pub rasterizerDiscardEnable: VkBool32,
    pub polygonMode: VkPolygonMode,
    pub cullMode: VkCullModeFlags,
    pub frontFace: VkFrontFace,
    pub depthBiasEnable: VkBool32,
    pub depthBiasConstantFactor: f32,
    pub depthBiasClamp: f32,
    pub depthBiasSlopeFactor: f32,
    pub lineWidth: f32,
}
#[test]
fn bindgen_test_layout_VkPipelineRasterizationStateCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRasterizationStateCreateInfo>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRasterizationStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRasterizationStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRasterizationStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateCreateInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateCreateInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateCreateInfo>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateCreateInfo>())).depthClampEnable
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(depthClampEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateCreateInfo>()))
                .rasterizerDiscardEnable as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(rasterizerDiscardEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateCreateInfo>())).polygonMode
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(polygonMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateCreateInfo>())).cullMode as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(cullMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateCreateInfo>())).frontFace as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(frontFace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateCreateInfo>())).depthBiasEnable
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(depthBiasEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateCreateInfo>()))
                .depthBiasConstantFactor as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(depthBiasConstantFactor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateCreateInfo>())).depthBiasClamp
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(depthBiasClamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateCreateInfo>())).depthBiasSlopeFactor
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(depthBiasSlopeFactor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateCreateInfo>())).lineWidth as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(lineWidth)
        )
    );
}
impl Default for VkPipelineRasterizationStateCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineMultisampleStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineMultisampleStateCreateFlags,
    pub rasterizationSamples: VkSampleCountFlagBits,
    pub sampleShadingEnable: VkBool32,
    pub minSampleShading: f32,
    pub pSampleMask: *const VkSampleMask,
    pub alphaToCoverageEnable: VkBool32,
    pub alphaToOneEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPipelineMultisampleStateCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineMultisampleStateCreateInfo>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineMultisampleStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineMultisampleStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineMultisampleStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineMultisampleStateCreateInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineMultisampleStateCreateInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineMultisampleStateCreateInfo>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineMultisampleStateCreateInfo>())).rasterizationSamples
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(rasterizationSamples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineMultisampleStateCreateInfo>())).sampleShadingEnable
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(sampleShadingEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineMultisampleStateCreateInfo>())).minSampleShading
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(minSampleShading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineMultisampleStateCreateInfo>())).pSampleMask as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(pSampleMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineMultisampleStateCreateInfo>())).alphaToCoverageEnable
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(alphaToCoverageEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineMultisampleStateCreateInfo>())).alphaToOneEnable
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(alphaToOneEnable)
        )
    );
}
impl Default for VkPipelineMultisampleStateCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkStencilOpState {
    pub failOp: VkStencilOp,
    pub passOp: VkStencilOp,
    pub depthFailOp: VkStencilOp,
    pub compareOp: VkCompareOp,
    pub compareMask: u32,
    pub writeMask: u32,
    pub reference: u32,
}
#[test]
fn bindgen_test_layout_VkStencilOpState() {
    assert_eq!(
        ::std::mem::size_of::<VkStencilOpState>(),
        28usize,
        concat!("Size of: ", stringify!(VkStencilOpState))
    );
    assert_eq!(
        ::std::mem::align_of::<VkStencilOpState>(),
        4usize,
        concat!("Alignment of ", stringify!(VkStencilOpState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkStencilOpState>())).failOp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(failOp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkStencilOpState>())).passOp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(passOp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkStencilOpState>())).depthFailOp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(depthFailOp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkStencilOpState>())).compareOp as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(compareOp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkStencilOpState>())).compareMask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(compareMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkStencilOpState>())).writeMask as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(writeMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkStencilOpState>())).reference as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(reference)
        )
    );
}
impl Default for VkStencilOpState {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDepthStencilStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineDepthStencilStateCreateFlags,
    pub depthTestEnable: VkBool32,
    pub depthWriteEnable: VkBool32,
    pub depthCompareOp: VkCompareOp,
    pub depthBoundsTestEnable: VkBool32,
    pub stencilTestEnable: VkBool32,
    pub front: VkStencilOpState,
    pub back: VkStencilOpState,
    pub minDepthBounds: f32,
    pub maxDepthBounds: f32,
}
#[test]
fn bindgen_test_layout_VkPipelineDepthStencilStateCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineDepthStencilStateCreateInfo>(),
        104usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineDepthStencilStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineDepthStencilStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDepthStencilStateCreateInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDepthStencilStateCreateInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDepthStencilStateCreateInfo>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDepthStencilStateCreateInfo>())).depthTestEnable
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(depthTestEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDepthStencilStateCreateInfo>())).depthWriteEnable
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(depthWriteEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDepthStencilStateCreateInfo>())).depthCompareOp
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(depthCompareOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDepthStencilStateCreateInfo>())).depthBoundsTestEnable
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(depthBoundsTestEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDepthStencilStateCreateInfo>())).stencilTestEnable
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(stencilTestEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDepthStencilStateCreateInfo>())).front as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(front)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDepthStencilStateCreateInfo>())).back as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(back)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDepthStencilStateCreateInfo>())).minDepthBounds
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(minDepthBounds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDepthStencilStateCreateInfo>())).maxDepthBounds
                as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(maxDepthBounds)
        )
    );
}
impl Default for VkPipelineDepthStencilStateCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendAttachmentState {
    pub blendEnable: VkBool32,
    pub srcColorBlendFactor: VkBlendFactor,
    pub dstColorBlendFactor: VkBlendFactor,
    pub colorBlendOp: VkBlendOp,
    pub srcAlphaBlendFactor: VkBlendFactor,
    pub dstAlphaBlendFactor: VkBlendFactor,
    pub alphaBlendOp: VkBlendOp,
    pub colorWriteMask: VkColorComponentFlags,
}
#[test]
fn bindgen_test_layout_VkPipelineColorBlendAttachmentState() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineColorBlendAttachmentState>(),
        32usize,
        concat!("Size of: ", stringify!(VkPipelineColorBlendAttachmentState))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineColorBlendAttachmentState>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineColorBlendAttachmentState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendAttachmentState>())).blendEnable as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(blendEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendAttachmentState>())).srcColorBlendFactor
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(srcColorBlendFactor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendAttachmentState>())).dstColorBlendFactor
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(dstColorBlendFactor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendAttachmentState>())).colorBlendOp as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(colorBlendOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendAttachmentState>())).srcAlphaBlendFactor
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(srcAlphaBlendFactor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendAttachmentState>())).dstAlphaBlendFactor
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(dstAlphaBlendFactor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendAttachmentState>())).alphaBlendOp as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(alphaBlendOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendAttachmentState>())).colorWriteMask
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(colorWriteMask)
        )
    );
}
impl Default for VkPipelineColorBlendAttachmentState {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineColorBlendStateCreateFlags,
    pub logicOpEnable: VkBool32,
    pub logicOp: VkLogicOp,
    pub attachmentCount: u32,
    pub pAttachments: *const VkPipelineColorBlendAttachmentState,
    pub blendConstants: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_VkPipelineColorBlendStateCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineColorBlendStateCreateInfo>(),
        56usize,
        concat!("Size of: ", stringify!(VkPipelineColorBlendStateCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineColorBlendStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineColorBlendStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendStateCreateInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendStateCreateInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendStateCreateInfo>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendStateCreateInfo>())).logicOpEnable
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(logicOpEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendStateCreateInfo>())).logicOp as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(logicOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendStateCreateInfo>())).attachmentCount
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(attachmentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendStateCreateInfo>())).pAttachments as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(pAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendStateCreateInfo>())).blendConstants
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(blendConstants)
        )
    );
}
impl Default for VkPipelineColorBlendStateCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDynamicStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineDynamicStateCreateFlags,
    pub dynamicStateCount: u32,
    pub pDynamicStates: *const VkDynamicState,
}
#[test]
fn bindgen_test_layout_VkPipelineDynamicStateCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineDynamicStateCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkPipelineDynamicStateCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineDynamicStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineDynamicStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDynamicStateCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDynamicStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDynamicStateCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDynamicStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDynamicStateCreateInfo>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDynamicStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDynamicStateCreateInfo>())).dynamicStateCount
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDynamicStateCreateInfo),
            "::",
            stringify!(dynamicStateCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDynamicStateCreateInfo>())).pDynamicStates as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDynamicStateCreateInfo),
            "::",
            stringify!(pDynamicStates)
        )
    );
}
impl Default for VkPipelineDynamicStateCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGraphicsPipelineCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
    pub pInputAssemblyState: *const VkPipelineInputAssemblyStateCreateInfo,
    pub pTessellationState: *const VkPipelineTessellationStateCreateInfo,
    pub pViewportState: *const VkPipelineViewportStateCreateInfo,
    pub pRasterizationState: *const VkPipelineRasterizationStateCreateInfo,
    pub pMultisampleState: *const VkPipelineMultisampleStateCreateInfo,
    pub pDepthStencilState: *const VkPipelineDepthStencilStateCreateInfo,
    pub pColorBlendState: *const VkPipelineColorBlendStateCreateInfo,
    pub pDynamicState: *const VkPipelineDynamicStateCreateInfo,
    pub layout: VkPipelineLayout,
    pub renderPass: VkRenderPass,
    pub subpass: u32,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[test]
fn bindgen_test_layout_VkGraphicsPipelineCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkGraphicsPipelineCreateInfo>(),
        144usize,
        concat!("Size of: ", stringify!(VkGraphicsPipelineCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGraphicsPipelineCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkGraphicsPipelineCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).stageCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(stageCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).pStages as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pStages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).pVertexInputState as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pVertexInputState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).pInputAssemblyState as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pInputAssemblyState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).pTessellationState as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pTessellationState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).pViewportState as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pViewportState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).pRasterizationState as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pRasterizationState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).pMultisampleState as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pMultisampleState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).pDepthStencilState as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pDepthStencilState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).pColorBlendState as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pColorBlendState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).pDynamicState as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pDynamicState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).layout as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).renderPass as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(renderPass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).subpass as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(subpass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).basePipelineHandle as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(basePipelineHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineCreateInfo>())).basePipelineIndex as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(basePipelineIndex)
        )
    );
}
impl Default for VkGraphicsPipelineCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPushConstantRange {
    pub stageFlags: VkShaderStageFlags,
    pub offset: u32,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_VkPushConstantRange() {
    assert_eq!(
        ::std::mem::size_of::<VkPushConstantRange>(),
        12usize,
        concat!("Size of: ", stringify!(VkPushConstantRange))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPushConstantRange>(),
        4usize,
        concat!("Alignment of ", stringify!(VkPushConstantRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPushConstantRange>())).stageFlags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPushConstantRange),
            "::",
            stringify!(stageFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPushConstantRange>())).offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPushConstantRange),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPushConstantRange>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPushConstantRange),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineLayoutCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineLayoutCreateFlags,
    pub setLayoutCount: u32,
    pub pSetLayouts: *const VkDescriptorSetLayout,
    pub pushConstantRangeCount: u32,
    pub pPushConstantRanges: *const VkPushConstantRange,
}
#[test]
fn bindgen_test_layout_VkPipelineLayoutCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineLayoutCreateInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkPipelineLayoutCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineLayoutCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineLayoutCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineLayoutCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineLayoutCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineLayoutCreateInfo>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineLayoutCreateInfo>())).setLayoutCount as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(setLayoutCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineLayoutCreateInfo>())).pSetLayouts as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(pSetLayouts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineLayoutCreateInfo>())).pushConstantRangeCount
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(pushConstantRangeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineLayoutCreateInfo>())).pPushConstantRanges as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(pPushConstantRanges)
        )
    );
}
impl Default for VkPipelineLayoutCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSamplerCreateFlags,
    pub magFilter: VkFilter,
    pub minFilter: VkFilter,
    pub mipmapMode: VkSamplerMipmapMode,
    pub addressModeU: VkSamplerAddressMode,
    pub addressModeV: VkSamplerAddressMode,
    pub addressModeW: VkSamplerAddressMode,
    pub mipLodBias: f32,
    pub anisotropyEnable: VkBool32,
    pub maxAnisotropy: f32,
    pub compareEnable: VkBool32,
    pub compareOp: VkCompareOp,
    pub minLod: f32,
    pub maxLod: f32,
    pub borderColor: VkBorderColor,
    pub unnormalizedCoordinates: VkBool32,
}
#[test]
fn bindgen_test_layout_VkSamplerCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSamplerCreateInfo>(),
        80usize,
        concat!("Size of: ", stringify!(VkSamplerCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSamplerCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSamplerCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSamplerCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSamplerCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSamplerCreateInfo>())).magFilter as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(magFilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSamplerCreateInfo>())).minFilter as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(minFilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSamplerCreateInfo>())).mipmapMode as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(mipmapMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerCreateInfo>())).addressModeU as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(addressModeU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerCreateInfo>())).addressModeV as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(addressModeV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerCreateInfo>())).addressModeW as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(addressModeW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSamplerCreateInfo>())).mipLodBias as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(mipLodBias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerCreateInfo>())).anisotropyEnable as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(anisotropyEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerCreateInfo>())).maxAnisotropy as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(maxAnisotropy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerCreateInfo>())).compareEnable as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(compareEnable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSamplerCreateInfo>())).compareOp as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(compareOp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSamplerCreateInfo>())).minLod as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(minLod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSamplerCreateInfo>())).maxLod as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(maxLod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSamplerCreateInfo>())).borderColor as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(borderColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerCreateInfo>())).unnormalizedCoordinates as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(unnormalizedCoordinates)
        )
    );
}
impl Default for VkSamplerCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyDescriptorSet {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcSet: VkDescriptorSet,
    pub srcBinding: u32,
    pub srcArrayElement: u32,
    pub dstSet: VkDescriptorSet,
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
}
#[test]
fn bindgen_test_layout_VkCopyDescriptorSet() {
    assert_eq!(
        ::std::mem::size_of::<VkCopyDescriptorSet>(),
        56usize,
        concat!("Size of: ", stringify!(VkCopyDescriptorSet))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyDescriptorSet>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCopyDescriptorSet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCopyDescriptorSet>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCopyDescriptorSet>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCopyDescriptorSet>())).srcSet as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(srcSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCopyDescriptorSet>())).srcBinding as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(srcBinding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCopyDescriptorSet>())).srcArrayElement as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(srcArrayElement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCopyDescriptorSet>())).dstSet as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(dstSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCopyDescriptorSet>())).dstBinding as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(dstBinding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCopyDescriptorSet>())).dstArrayElement as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(dstArrayElement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCopyDescriptorSet>())).descriptorCount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(descriptorCount)
        )
    );
}
impl Default for VkCopyDescriptorSet {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorBufferInfo {
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub range: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkDescriptorBufferInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorBufferInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkDescriptorBufferInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorBufferInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorBufferInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDescriptorBufferInfo>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferInfo),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDescriptorBufferInfo>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferInfo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDescriptorBufferInfo>())).range as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferInfo),
            "::",
            stringify!(range)
        )
    );
}
impl Default for VkDescriptorBufferInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorImageInfo {
    pub sampler: VkSampler,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkDescriptorImageInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorImageInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkDescriptorImageInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorImageInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorImageInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDescriptorImageInfo>())).sampler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorImageInfo),
            "::",
            stringify!(sampler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDescriptorImageInfo>())).imageView as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorImageInfo),
            "::",
            stringify!(imageView)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorImageInfo>())).imageLayout as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorImageInfo),
            "::",
            stringify!(imageLayout)
        )
    );
}
impl Default for VkDescriptorImageInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolSize {
    pub type_: VkDescriptorType,
    pub descriptorCount: u32,
}
#[test]
fn bindgen_test_layout_VkDescriptorPoolSize() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorPoolSize>(),
        8usize,
        concat!("Size of: ", stringify!(VkDescriptorPoolSize))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorPoolSize>(),
        4usize,
        concat!("Alignment of ", stringify!(VkDescriptorPoolSize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDescriptorPoolSize>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolSize),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorPoolSize>())).descriptorCount as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolSize),
            "::",
            stringify!(descriptorCount)
        )
    );
}
impl Default for VkDescriptorPoolSize {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDescriptorPoolCreateFlags,
    pub maxSets: u32,
    pub poolSizeCount: u32,
    pub pPoolSizes: *const VkDescriptorPoolSize,
}
#[test]
fn bindgen_test_layout_VkDescriptorPoolCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorPoolCreateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkDescriptorPoolCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorPoolCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorPoolCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorPoolCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorPoolCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorPoolCreateInfo>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorPoolCreateInfo>())).maxSets as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolCreateInfo),
            "::",
            stringify!(maxSets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorPoolCreateInfo>())).poolSizeCount as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolCreateInfo),
            "::",
            stringify!(poolSizeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorPoolCreateInfo>())).pPoolSizes as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolCreateInfo),
            "::",
            stringify!(pPoolSizes)
        )
    );
}
impl Default for VkDescriptorPoolCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub descriptorPool: VkDescriptorPool,
    pub descriptorSetCount: u32,
    pub pSetLayouts: *const VkDescriptorSetLayout,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetAllocateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetAllocateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkDescriptorSetAllocateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetAllocateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorSetAllocateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetAllocateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetAllocateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetAllocateInfo>())).descriptorPool as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetAllocateInfo),
            "::",
            stringify!(descriptorPool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetAllocateInfo>())).descriptorSetCount as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetAllocateInfo),
            "::",
            stringify!(descriptorSetCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetAllocateInfo>())).pSetLayouts as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetAllocateInfo),
            "::",
            stringify!(pSetLayouts)
        )
    );
}
impl Default for VkDescriptorSetAllocateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutBinding {
    pub binding: u32,
    pub descriptorType: VkDescriptorType,
    pub descriptorCount: u32,
    pub stageFlags: VkShaderStageFlags,
    pub pImmutableSamplers: *const VkSampler,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetLayoutBinding() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetLayoutBinding>(),
        24usize,
        concat!("Size of: ", stringify!(VkDescriptorSetLayoutBinding))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetLayoutBinding>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorSetLayoutBinding))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutBinding>())).binding as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutBinding>())).descriptorType as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(descriptorType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutBinding>())).descriptorCount as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(descriptorCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutBinding>())).stageFlags as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(stageFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutBinding>())).pImmutableSamplers as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(pImmutableSamplers)
        )
    );
}
impl Default for VkDescriptorSetLayoutBinding {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDescriptorSetLayoutCreateFlags,
    pub bindingCount: u32,
    pub pBindings: *const VkDescriptorSetLayoutBinding,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetLayoutCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetLayoutCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkDescriptorSetLayoutCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetLayoutCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorSetLayoutCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutCreateInfo>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutCreateInfo>())).bindingCount as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(bindingCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutCreateInfo>())).pBindings as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(pBindings)
        )
    );
}
impl Default for VkDescriptorSetLayoutCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSet {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dstSet: VkDescriptorSet,
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
    pub descriptorType: VkDescriptorType,
    pub pImageInfo: *const VkDescriptorImageInfo,
    pub pBufferInfo: *const VkDescriptorBufferInfo,
    pub pTexelBufferView: *const VkBufferView,
}
#[test]
fn bindgen_test_layout_VkWriteDescriptorSet() {
    assert_eq!(
        ::std::mem::size_of::<VkWriteDescriptorSet>(),
        64usize,
        concat!("Size of: ", stringify!(VkWriteDescriptorSet))
    );
    assert_eq!(
        ::std::mem::align_of::<VkWriteDescriptorSet>(),
        8usize,
        concat!("Alignment of ", stringify!(VkWriteDescriptorSet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkWriteDescriptorSet>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkWriteDescriptorSet>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkWriteDescriptorSet>())).dstSet as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(dstSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkWriteDescriptorSet>())).dstBinding as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(dstBinding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkWriteDescriptorSet>())).dstArrayElement as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(dstArrayElement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkWriteDescriptorSet>())).descriptorCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(descriptorCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkWriteDescriptorSet>())).descriptorType as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(descriptorType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkWriteDescriptorSet>())).pImageInfo as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(pImageInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkWriteDescriptorSet>())).pBufferInfo as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(pBufferInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkWriteDescriptorSet>())).pTexelBufferView as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(pTexelBufferView)
        )
    );
}
impl Default for VkWriteDescriptorSet {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescription {
    pub flags: VkAttachmentDescriptionFlags,
    pub format: VkFormat,
    pub samples: VkSampleCountFlagBits,
    pub loadOp: VkAttachmentLoadOp,
    pub storeOp: VkAttachmentStoreOp,
    pub stencilLoadOp: VkAttachmentLoadOp,
    pub stencilStoreOp: VkAttachmentStoreOp,
    pub initialLayout: VkImageLayout,
    pub finalLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkAttachmentDescription() {
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentDescription>(),
        36usize,
        concat!("Size of: ", stringify!(VkAttachmentDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentDescription>(),
        4usize,
        concat!("Alignment of ", stringify!(VkAttachmentDescription))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentDescription>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentDescription>())).format as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentDescription>())).samples as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentDescription>())).loadOp as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(loadOp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentDescription>())).storeOp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(storeOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescription>())).stencilLoadOp as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(stencilLoadOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescription>())).stencilStoreOp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(stencilStoreOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescription>())).initialLayout as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(initialLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescription>())).finalLayout as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(finalLayout)
        )
    );
}
impl Default for VkAttachmentDescription {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReference {
    pub attachment: u32,
    pub layout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkAttachmentReference() {
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentReference>(),
        8usize,
        concat!("Size of: ", stringify!(VkAttachmentReference))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentReference>(),
        4usize,
        concat!("Alignment of ", stringify!(VkAttachmentReference))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentReference>())).attachment as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentReference>())).layout as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference),
            "::",
            stringify!(layout)
        )
    );
}
impl Default for VkAttachmentReference {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkFramebufferCreateFlags,
    pub renderPass: VkRenderPass,
    pub attachmentCount: u32,
    pub pAttachments: *const VkImageView,
    pub width: u32,
    pub height: u32,
    pub layers: u32,
}
#[test]
fn bindgen_test_layout_VkFramebufferCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkFramebufferCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkFramebufferCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFramebufferCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFramebufferCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFramebufferCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFramebufferCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFramebufferCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferCreateInfo>())).renderPass as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(renderPass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferCreateInfo>())).attachmentCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(attachmentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferCreateInfo>())).pAttachments as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(pAttachments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFramebufferCreateInfo>())).width as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFramebufferCreateInfo>())).height as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFramebufferCreateInfo>())).layers as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(layers)
        )
    );
}
impl Default for VkFramebufferCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescription {
    pub flags: VkSubpassDescriptionFlags,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub inputAttachmentCount: u32,
    pub pInputAttachments: *const VkAttachmentReference,
    pub colorAttachmentCount: u32,
    pub pColorAttachments: *const VkAttachmentReference,
    pub pResolveAttachments: *const VkAttachmentReference,
    pub pDepthStencilAttachment: *const VkAttachmentReference,
    pub preserveAttachmentCount: u32,
    pub pPreserveAttachments: *const u32,
}
#[test]
fn bindgen_test_layout_VkSubpassDescription() {
    assert_eq!(
        ::std::mem::size_of::<VkSubpassDescription>(),
        72usize,
        concat!("Size of: ", stringify!(VkSubpassDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassDescription>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubpassDescription))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassDescription>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription>())).pipelineBindPoint as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(pipelineBindPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription>())).inputAttachmentCount as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(inputAttachmentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription>())).pInputAttachments as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(pInputAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription>())).colorAttachmentCount as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(colorAttachmentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription>())).pColorAttachments as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(pColorAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription>())).pResolveAttachments as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(pResolveAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription>())).pDepthStencilAttachment as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(pDepthStencilAttachment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription>())).preserveAttachmentCount as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(preserveAttachmentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription>())).pPreserveAttachments as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(pPreserveAttachments)
        )
    );
}
impl Default for VkSubpassDescription {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSubpassDependency {
    pub srcSubpass: u32,
    pub dstSubpass: u32,
    pub srcStageMask: VkPipelineStageFlags,
    pub dstStageMask: VkPipelineStageFlags,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub dependencyFlags: VkDependencyFlags,
}
#[test]
fn bindgen_test_layout_VkSubpassDependency() {
    assert_eq!(
        ::std::mem::size_of::<VkSubpassDependency>(),
        28usize,
        concat!("Size of: ", stringify!(VkSubpassDependency))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassDependency>(),
        4usize,
        concat!("Alignment of ", stringify!(VkSubpassDependency))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassDependency>())).srcSubpass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(srcSubpass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassDependency>())).dstSubpass as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(dstSubpass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDependency>())).srcStageMask as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(srcStageMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDependency>())).dstStageMask as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(dstStageMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDependency>())).srcAccessMask as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(srcAccessMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDependency>())).dstAccessMask as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(dstAccessMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDependency>())).dependencyFlags as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(dependencyFlags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkRenderPassCreateFlags,
    pub attachmentCount: u32,
    pub pAttachments: *const VkAttachmentDescription,
    pub subpassCount: u32,
    pub pSubpasses: *const VkSubpassDescription,
    pub dependencyCount: u32,
    pub pDependencies: *const VkSubpassDependency,
}
#[test]
fn bindgen_test_layout_VkRenderPassCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkRenderPassCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRenderPassCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkRenderPassCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkRenderPassCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkRenderPassCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo>())).attachmentCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(attachmentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo>())).pAttachments as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(pAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo>())).subpassCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(subpassCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo>())).pSubpasses as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(pSubpasses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo>())).dependencyCount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(dependencyCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo>())).pDependencies as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(pDependencies)
        )
    );
}
impl Default for VkRenderPassCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandPoolCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkCommandPoolCreateFlags,
    pub queueFamilyIndex: u32,
}
#[test]
fn bindgen_test_layout_VkCommandPoolCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkCommandPoolCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkCommandPoolCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandPoolCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCommandPoolCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCommandPoolCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandPoolCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCommandPoolCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandPoolCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCommandPoolCreateInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandPoolCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandPoolCreateInfo>())).queueFamilyIndex as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandPoolCreateInfo),
            "::",
            stringify!(queueFamilyIndex)
        )
    );
}
impl Default for VkCommandPoolCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub commandPool: VkCommandPool,
    pub level: VkCommandBufferLevel,
    pub commandBufferCount: u32,
}
#[test]
fn bindgen_test_layout_VkCommandBufferAllocateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkCommandBufferAllocateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkCommandBufferAllocateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandBufferAllocateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCommandBufferAllocateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferAllocateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferAllocateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferAllocateInfo>())).commandPool as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferAllocateInfo),
            "::",
            stringify!(commandPool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferAllocateInfo>())).level as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferAllocateInfo),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferAllocateInfo>())).commandBufferCount as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferAllocateInfo),
            "::",
            stringify!(commandBufferCount)
        )
    );
}
impl Default for VkCommandBufferAllocateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub renderPass: VkRenderPass,
    pub subpass: u32,
    pub framebuffer: VkFramebuffer,
    pub occlusionQueryEnable: VkBool32,
    pub queryFlags: VkQueryControlFlags,
    pub pipelineStatistics: VkQueryPipelineStatisticFlags,
}
#[test]
fn bindgen_test_layout_VkCommandBufferInheritanceInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkCommandBufferInheritanceInfo>(),
        56usize,
        concat!("Size of: ", stringify!(VkCommandBufferInheritanceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandBufferInheritanceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCommandBufferInheritanceInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceInfo>())).renderPass as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(renderPass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceInfo>())).subpass as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(subpass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceInfo>())).framebuffer as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(framebuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceInfo>())).occlusionQueryEnable
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(occlusionQueryEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceInfo>())).queryFlags as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(queryFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceInfo>())).pipelineStatistics
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(pipelineStatistics)
        )
    );
}
impl Default for VkCommandBufferInheritanceInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkCommandBufferUsageFlags,
    pub pInheritanceInfo: *const VkCommandBufferInheritanceInfo,
}
#[test]
fn bindgen_test_layout_VkCommandBufferBeginInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkCommandBufferBeginInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkCommandBufferBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandBufferBeginInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCommandBufferBeginInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCommandBufferBeginInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferBeginInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCommandBufferBeginInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferBeginInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCommandBufferBeginInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferBeginInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferBeginInfo>())).pInheritanceInfo as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferBeginInfo),
            "::",
            stringify!(pInheritanceInfo)
        )
    );
}
impl Default for VkCommandBufferBeginInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkBufferCopy {
    pub srcOffset: VkDeviceSize,
    pub dstOffset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBufferCopy() {
    assert_eq!(
        ::std::mem::size_of::<VkBufferCopy>(),
        24usize,
        concat!("Size of: ", stringify!(VkBufferCopy))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferCopy>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferCopy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferCopy>())).srcOffset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCopy),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferCopy>())).dstOffset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCopy),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferCopy>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCopy),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageSubresourceLayers {
    pub aspectMask: VkImageAspectFlags,
    pub mipLevel: u32,
    pub baseArrayLayer: u32,
    pub layerCount: u32,
}
#[test]
fn bindgen_test_layout_VkImageSubresourceLayers() {
    assert_eq!(
        ::std::mem::size_of::<VkImageSubresourceLayers>(),
        16usize,
        concat!("Size of: ", stringify!(VkImageSubresourceLayers))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageSubresourceLayers>(),
        4usize,
        concat!("Alignment of ", stringify!(VkImageSubresourceLayers))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSubresourceLayers>())).aspectMask as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceLayers),
            "::",
            stringify!(aspectMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSubresourceLayers>())).mipLevel as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceLayers),
            "::",
            stringify!(mipLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSubresourceLayers>())).baseArrayLayer as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceLayers),
            "::",
            stringify!(baseArrayLayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSubresourceLayers>())).layerCount as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceLayers),
            "::",
            stringify!(layerCount)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkBufferImageCopy {
    pub bufferOffset: VkDeviceSize,
    pub bufferRowLength: u32,
    pub bufferImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[test]
fn bindgen_test_layout_VkBufferImageCopy() {
    assert_eq!(
        ::std::mem::size_of::<VkBufferImageCopy>(),
        56usize,
        concat!("Size of: ", stringify!(VkBufferImageCopy))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferImageCopy>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferImageCopy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferImageCopy>())).bufferOffset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy),
            "::",
            stringify!(bufferOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferImageCopy>())).bufferRowLength as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy),
            "::",
            stringify!(bufferRowLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferImageCopy>())).bufferImageHeight as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy),
            "::",
            stringify!(bufferImageHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferImageCopy>())).imageSubresource as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy),
            "::",
            stringify!(imageSubresource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferImageCopy>())).imageOffset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy),
            "::",
            stringify!(imageOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferImageCopy>())).imageExtent as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy),
            "::",
            stringify!(imageExtent)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearColorValue {
    pub float32: [f32; 4usize],
    pub int32: [i32; 4usize],
    pub uint32: [u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_VkClearColorValue() {
    assert_eq!(
        ::std::mem::size_of::<VkClearColorValue>(),
        16usize,
        concat!("Size of: ", stringify!(VkClearColorValue))
    );
    assert_eq!(
        ::std::mem::align_of::<VkClearColorValue>(),
        4usize,
        concat!("Alignment of ", stringify!(VkClearColorValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkClearColorValue>())).float32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearColorValue),
            "::",
            stringify!(float32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkClearColorValue>())).int32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearColorValue),
            "::",
            stringify!(int32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkClearColorValue>())).uint32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearColorValue),
            "::",
            stringify!(uint32)
        )
    );
}
impl Default for VkClearColorValue {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkClearDepthStencilValue {
    pub depth: f32,
    pub stencil: u32,
}
#[test]
fn bindgen_test_layout_VkClearDepthStencilValue() {
    assert_eq!(
        ::std::mem::size_of::<VkClearDepthStencilValue>(),
        8usize,
        concat!("Size of: ", stringify!(VkClearDepthStencilValue))
    );
    assert_eq!(
        ::std::mem::align_of::<VkClearDepthStencilValue>(),
        4usize,
        concat!("Alignment of ", stringify!(VkClearDepthStencilValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkClearDepthStencilValue>())).depth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearDepthStencilValue),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkClearDepthStencilValue>())).stencil as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearDepthStencilValue),
            "::",
            stringify!(stencil)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearValue {
    pub color: VkClearColorValue,
    pub depthStencil: VkClearDepthStencilValue,
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_VkClearValue() {
    assert_eq!(
        ::std::mem::size_of::<VkClearValue>(),
        16usize,
        concat!("Size of: ", stringify!(VkClearValue))
    );
    assert_eq!(
        ::std::mem::align_of::<VkClearValue>(),
        4usize,
        concat!("Alignment of ", stringify!(VkClearValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkClearValue>())).color as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearValue),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkClearValue>())).depthStencil as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearValue),
            "::",
            stringify!(depthStencil)
        )
    );
}
impl Default for VkClearValue {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClearAttachment {
    pub aspectMask: VkImageAspectFlags,
    pub colorAttachment: u32,
    pub clearValue: VkClearValue,
}
#[test]
fn bindgen_test_layout_VkClearAttachment() {
    assert_eq!(
        ::std::mem::size_of::<VkClearAttachment>(),
        24usize,
        concat!("Size of: ", stringify!(VkClearAttachment))
    );
    assert_eq!(
        ::std::mem::align_of::<VkClearAttachment>(),
        4usize,
        concat!("Alignment of ", stringify!(VkClearAttachment))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkClearAttachment>())).aspectMask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearAttachment),
            "::",
            stringify!(aspectMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkClearAttachment>())).colorAttachment as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearAttachment),
            "::",
            stringify!(colorAttachment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkClearAttachment>())).clearValue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearAttachment),
            "::",
            stringify!(clearValue)
        )
    );
}
impl Default for VkClearAttachment {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkClearRect {
    pub rect: VkRect2D,
    pub baseArrayLayer: u32,
    pub layerCount: u32,
}
#[test]
fn bindgen_test_layout_VkClearRect() {
    assert_eq!(
        ::std::mem::size_of::<VkClearRect>(),
        24usize,
        concat!("Size of: ", stringify!(VkClearRect))
    );
    assert_eq!(
        ::std::mem::align_of::<VkClearRect>(),
        4usize,
        concat!("Alignment of ", stringify!(VkClearRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkClearRect>())).rect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearRect),
            "::",
            stringify!(rect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkClearRect>())).baseArrayLayer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearRect),
            "::",
            stringify!(baseArrayLayer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkClearRect>())).layerCount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearRect),
            "::",
            stringify!(layerCount)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageBlit {
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffsets: [VkOffset3D; 2usize],
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffsets: [VkOffset3D; 2usize],
}
#[test]
fn bindgen_test_layout_VkImageBlit() {
    assert_eq!(
        ::std::mem::size_of::<VkImageBlit>(),
        80usize,
        concat!("Size of: ", stringify!(VkImageBlit))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageBlit>(),
        4usize,
        concat!("Alignment of ", stringify!(VkImageBlit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageBlit>())).srcSubresource as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit),
            "::",
            stringify!(srcSubresource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageBlit>())).srcOffsets as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit),
            "::",
            stringify!(srcOffsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageBlit>())).dstSubresource as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit),
            "::",
            stringify!(dstSubresource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageBlit>())).dstOffsets as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit),
            "::",
            stringify!(dstOffsets)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageCopy {
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[test]
fn bindgen_test_layout_VkImageCopy() {
    assert_eq!(
        ::std::mem::size_of::<VkImageCopy>(),
        68usize,
        concat!("Size of: ", stringify!(VkImageCopy))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageCopy>(),
        4usize,
        concat!("Alignment of ", stringify!(VkImageCopy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCopy>())).srcSubresource as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy),
            "::",
            stringify!(srcSubresource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCopy>())).srcOffset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCopy>())).dstSubresource as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy),
            "::",
            stringify!(dstSubresource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCopy>())).dstOffset as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageCopy>())).extent as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy),
            "::",
            stringify!(extent)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageResolve {
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[test]
fn bindgen_test_layout_VkImageResolve() {
    assert_eq!(
        ::std::mem::size_of::<VkImageResolve>(),
        68usize,
        concat!("Size of: ", stringify!(VkImageResolve))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageResolve>(),
        4usize,
        concat!("Alignment of ", stringify!(VkImageResolve))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageResolve>())).srcSubresource as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve),
            "::",
            stringify!(srcSubresource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageResolve>())).srcOffset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageResolve>())).dstSubresource as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve),
            "::",
            stringify!(dstSubresource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageResolve>())).dstOffset as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageResolve>())).extent as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve),
            "::",
            stringify!(extent)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub renderPass: VkRenderPass,
    pub framebuffer: VkFramebuffer,
    pub renderArea: VkRect2D,
    pub clearValueCount: u32,
    pub pClearValues: *const VkClearValue,
}
#[test]
fn bindgen_test_layout_VkRenderPassBeginInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassBeginInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkRenderPassBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassBeginInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRenderPassBeginInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkRenderPassBeginInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkRenderPassBeginInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassBeginInfo>())).renderPass as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(renderPass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassBeginInfo>())).framebuffer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(framebuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassBeginInfo>())).renderArea as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(renderArea)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassBeginInfo>())).clearValueCount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(clearValueCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassBeginInfo>())).pClearValues as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(pClearValues)
        )
    );
}
impl Default for VkRenderPassBeginInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCreateInstance = ::std::option::Option<
    unsafe extern "system" fn(
        pCreateInfo: *const VkInstanceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pInstance: *mut VkInstance,
    ) -> VkResult,
>;
pub type PFN_vkDestroyInstance = ::std::option::Option<
    unsafe extern "system" fn(instance: VkInstance, pAllocator: *const VkAllocationCallbacks),
>;
pub type PFN_vkEnumeratePhysicalDevices = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pPhysicalDeviceCount: *mut u32,
        pPhysicalDevices: *mut VkPhysicalDevice,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceFeatures = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFormatProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceImageFormatProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        pImageFormatProperties: *mut VkImageFormatProperties,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMemoryProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties,
    ),
>;
pub type PFN_vkGetInstanceProcAddr = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction,
>;
pub type PFN_vkGetDeviceProcAddr = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction,
>;
pub type PFN_vkCreateDevice = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pCreateInfo: *const VkDeviceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDevice: *mut VkDevice,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDevice = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pAllocator: *const VkAllocationCallbacks),
>;
pub type PFN_vkEnumerateInstanceExtensionProperties = ::std::option::Option<
    unsafe extern "system" fn(
        pLayerName: *const ::std::os::raw::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult,
>;
pub type PFN_vkEnumerateDeviceExtensionProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pLayerName: *const ::std::os::raw::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult,
>;
pub type PFN_vkEnumerateInstanceLayerProperties = ::std::option::Option<
    unsafe extern "system" fn(pPropertyCount: *mut u32, pProperties: *mut VkLayerProperties) -> VkResult,
>;
pub type PFN_vkEnumerateDeviceLayerProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkLayerProperties,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceQueue = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queueFamilyIndex: u32,
        queueIndex: u32,
        pQueue: *mut VkQueue,
    ),
>;
pub type PFN_vkQueueSubmit = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo,
        fence: VkFence,
    ) -> VkResult,
>;
pub type PFN_vkQueueWaitIdle =
    ::std::option::Option<unsafe extern "system" fn(queue: VkQueue) -> VkResult>;
pub type PFN_vkDeviceWaitIdle =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice) -> VkResult>;
pub type PFN_vkAllocateMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAllocateInfo: *const VkMemoryAllocateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pMemory: *mut VkDeviceMemory,
    ) -> VkResult,
>;
pub type PFN_vkFreeMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memory: VkDeviceMemory,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkMapMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memory: VkDeviceMemory,
        offset: VkDeviceSize,
        size: VkDeviceSize,
        flags: VkMemoryMapFlags,
        ppData: *mut *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkUnmapMemory =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, memory: VkDeviceMemory)>;
pub type PFN_vkFlushMappedMemoryRanges = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult,
>;
pub type PFN_vkInvalidateMappedMemoryRanges = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceMemoryCommitment = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memory: VkDeviceMemory,
        pCommittedMemoryInBytes: *mut VkDeviceSize,
    ),
>;
pub type PFN_vkBindBufferMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        buffer: VkBuffer,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult,
>;
pub type PFN_vkBindImageMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult,
>;
pub type PFN_vkGetBufferMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        buffer: VkBuffer,
        pMemoryRequirements: *mut VkMemoryRequirements,
    ),
>;
pub type PFN_vkGetImageMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pMemoryRequirements: *mut VkMemoryRequirements,
    ),
>;
pub type PFN_vkGetImageSparseMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        samples: VkSampleCountFlagBits,
        usage: VkImageUsageFlags,
        tiling: VkImageTiling,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties,
    ),
>;
pub type PFN_vkQueueBindSparse = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        bindInfoCount: u32,
        pBindInfo: *const VkBindSparseInfo,
        fence: VkFence,
    ) -> VkResult,
>;
pub type PFN_vkCreateFence = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkFenceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult,
>;
pub type PFN_vkDestroyFence = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        fence: VkFence,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkResetFences = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, fenceCount: u32, pFences: *const VkFence) -> VkResult,
>;
pub type PFN_vkGetFenceStatus =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, fence: VkFence) -> VkResult>;
pub type PFN_vkWaitForFences = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        fenceCount: u32,
        pFences: *const VkFence,
        waitAll: VkBool32,
        timeout: u64,
    ) -> VkResult,
>;
pub type PFN_vkCreateSemaphore = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSemaphoreCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSemaphore: *mut VkSemaphore,
    ) -> VkResult,
>;
pub type PFN_vkDestroySemaphore = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        semaphore: VkSemaphore,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateEvent = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkEventCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pEvent: *mut VkEvent,
    ) -> VkResult,
>;
pub type PFN_vkDestroyEvent = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        event: VkEvent,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetEventStatus =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, event: VkEvent) -> VkResult>;
pub type PFN_vkSetEvent =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, event: VkEvent) -> VkResult>;
pub type PFN_vkResetEvent =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, event: VkEvent) -> VkResult>;
pub type PFN_vkCreateQueryPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkQueryPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pQueryPool: *mut VkQueryPool,
    ) -> VkResult,
>;
pub type PFN_vkDestroyQueryPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetQueryPoolResults = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dataSize: size_t,
        pData: *mut ::std::os::raw::c_void,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    ) -> VkResult,
>;
pub type PFN_vkCreateBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkBufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pBuffer: *mut VkBuffer,
    ) -> VkResult,
>;
pub type PFN_vkDestroyBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        buffer: VkBuffer,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateBufferView = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkBufferViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkBufferView,
    ) -> VkResult,
>;
pub type PFN_vkDestroyBufferView = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bufferView: VkBufferView,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateImage = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkImageCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pImage: *mut VkImage,
    ) -> VkResult,
>;
pub type PFN_vkDestroyImage = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetImageSubresourceLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource,
        pLayout: *mut VkSubresourceLayout,
    ),
>;
pub type PFN_vkCreateImageView = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkImageViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkImageView,
    ) -> VkResult,
>;
pub type PFN_vkDestroyImageView = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        imageView: VkImageView,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateShaderModule = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkShaderModuleCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pShaderModule: *mut VkShaderModule,
    ) -> VkResult,
>;
pub type PFN_vkDestroyShaderModule = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        shaderModule: VkShaderModule,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreatePipelineCache = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkPipelineCacheCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineCache: *mut VkPipelineCache,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipelineCache = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetPipelineCacheData = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pDataSize: *mut size_t,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkMergePipelineCaches = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        dstCache: VkPipelineCache,
        srcCacheCount: u32,
        pSrcCaches: *const VkPipelineCache,
    ) -> VkResult,
>;
pub type PFN_vkCreateGraphicsPipelines = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkGraphicsPipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkCreateComputePipelines = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkComputePipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipeline = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreatePipelineLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkPipelineLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineLayout: *mut VkPipelineLayout,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipelineLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineLayout: VkPipelineLayout,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateSampler = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSamplerCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSampler: *mut VkSampler,
    ) -> VkResult,
>;
pub type PFN_vkDestroySampler = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        sampler: VkSampler,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateDescriptorSetLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSetLayout: *mut VkDescriptorSetLayout,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorSetLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorSetLayout: VkDescriptorSetLayout,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateDescriptorPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorPool: *mut VkDescriptorPool,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkResetDescriptorPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        flags: VkDescriptorPoolResetFlags,
    ) -> VkResult,
>;
pub type PFN_vkAllocateDescriptorSets = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAllocateInfo: *const VkDescriptorSetAllocateInfo,
        pDescriptorSets: *mut VkDescriptorSet,
    ) -> VkResult,
>;
pub type PFN_vkFreeDescriptorSets = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
    ) -> VkResult,
>;
pub type PFN_vkUpdateDescriptorSets = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
        descriptorCopyCount: u32,
        pDescriptorCopies: *const VkCopyDescriptorSet,
    ),
>;
pub type PFN_vkCreateFramebuffer = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkFramebufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFramebuffer: *mut VkFramebuffer,
    ) -> VkResult,
>;
pub type PFN_vkDestroyFramebuffer = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        framebuffer: VkFramebuffer,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateRenderPass = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult,
>;
pub type PFN_vkDestroyRenderPass = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        renderPass: VkRenderPass,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetRenderAreaGranularity = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, renderPass: VkRenderPass, pGranularity: *mut VkExtent2D),
>;
pub type PFN_vkCreateCommandPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkCommandPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pCommandPool: *mut VkCommandPool,
    ) -> VkResult,
>;
pub type PFN_vkDestroyCommandPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkResetCommandPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolResetFlags,
    ) -> VkResult,
>;
pub type PFN_vkAllocateCommandBuffers = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAllocateInfo: *const VkCommandBufferAllocateInfo,
        pCommandBuffers: *mut VkCommandBuffer,
    ) -> VkResult,
>;
pub type PFN_vkFreeCommandBuffers = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    ),
>;
pub type PFN_vkBeginCommandBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pBeginInfo: *const VkCommandBufferBeginInfo,
    ) -> VkResult,
>;
pub type PFN_vkEndCommandBuffer =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer) -> VkResult>;
pub type PFN_vkResetCommandBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        flags: VkCommandBufferResetFlags,
    ) -> VkResult,
>;
pub type PFN_vkCmdBindPipeline = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
    ),
>;
pub type PFN_vkCmdSetViewport = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewports: *const VkViewport,
    ),
>;
pub type PFN_vkCmdSetScissor = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstScissor: u32,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdSetLineWidth =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer, lineWidth: f32)>;
pub type PFN_vkCmdSetDepthBias = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        depthBiasConstantFactor: f32,
        depthBiasClamp: f32,
        depthBiasSlopeFactor: f32,
    ),
>;
pub type PFN_vkCmdSetBlendConstants = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, blendConstants: *const f32),
>;
pub type PFN_vkCmdSetDepthBounds = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, minDepthBounds: f32, maxDepthBounds: f32),
>;
pub type PFN_vkCmdSetStencilCompareMask = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        compareMask: u32,
    ),
>;
pub type PFN_vkCmdSetStencilWriteMask = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        writeMask: u32,
    ),
>;
pub type PFN_vkCmdSetStencilReference = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        reference: u32,
    ),
>;
pub type PFN_vkCmdBindDescriptorSets = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        firstSet: u32,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
        dynamicOffsetCount: u32,
        pDynamicOffsets: *const u32,
    ),
>;
pub type PFN_vkCmdBindIndexBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        indexType: VkIndexType,
    ),
>;
pub type PFN_vkCmdBindVertexBuffers = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdDraw = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexed = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        vertexOffset: i32,
        firstInstance: u32,
    ),
>;
pub type PFN_vkCmdDrawIndirect = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirect = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDispatch = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkCmdDispatchIndirect = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize),
>;
pub type PFN_vkCmdCopyBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferCopy,
    ),
>;
pub type PFN_vkCmdCopyImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageCopy,
    ),
>;
pub type PFN_vkCmdBlitImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageBlit,
        filter: VkFilter,
    ),
>;
pub type PFN_vkCmdCopyBufferToImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    ),
>;
pub type PFN_vkCmdCopyImageToBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    ),
>;
pub type PFN_vkCmdUpdateBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        dataSize: VkDeviceSize,
        pData: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkCmdFillBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        size: VkDeviceSize,
        data: u32,
    ),
>;
pub type PFN_vkCmdClearColorImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pColor: *const VkClearColorValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    ),
>;
pub type PFN_vkCmdClearDepthStencilImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pDepthStencil: *const VkClearDepthStencilValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    ),
>;
pub type PFN_vkCmdClearAttachments = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        attachmentCount: u32,
        pAttachments: *const VkClearAttachment,
        rectCount: u32,
        pRects: *const VkClearRect,
    ),
>;
pub type PFN_vkCmdResolveImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageResolve,
    ),
>;
pub type PFN_vkCmdSetEvent = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    ),
>;
pub type PFN_vkCmdResetEvent = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    ),
>;
pub type PFN_vkCmdWaitEvents = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    ),
>;
pub type PFN_vkCmdPipelineBarrier = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        dependencyFlags: VkDependencyFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    ),
>;
pub type PFN_vkCmdBeginQuery = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
    ),
>;
pub type PFN_vkCmdEndQuery = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32),
>;
pub type PFN_vkCmdResetQueryPool = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    ),
>;
pub type PFN_vkCmdWriteTimestamp = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        queryPool: VkQueryPool,
        query: u32,
    ),
>;
pub type PFN_vkCmdCopyQueryPoolResults = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    ),
>;
pub type PFN_vkCmdPushConstants = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        layout: VkPipelineLayout,
        stageFlags: VkShaderStageFlags,
        offset: u32,
        size: u32,
        pValues: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkCmdBeginRenderPass = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        contents: VkSubpassContents,
    ),
>;
pub type PFN_vkCmdNextSubpass = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, contents: VkSubpassContents),
>;
pub type PFN_vkCmdEndRenderPass =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdExecuteCommands = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    ),
>;
extern "system" {
    pub fn vkCreateInstance(
        pCreateInfo: *const VkInstanceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pInstance: *mut VkInstance,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyInstance(instance: VkInstance, pAllocator: *const VkAllocationCallbacks);
}
extern "system" {
    pub fn vkEnumeratePhysicalDevices(
        instance: VkInstance,
        pPhysicalDeviceCount: *mut u32,
        pPhysicalDevices: *mut VkPhysicalDevice,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceFeatures(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceFormatProperties(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceImageFormatProperties(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        pImageFormatProperties: *mut VkImageFormatProperties,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceProperties(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceQueueFamilyProperties(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceMemoryProperties(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties,
    );
}
extern "system" {
    pub fn vkGetInstanceProcAddr(
        instance: VkInstance,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction;
}
extern "system" {
    pub fn vkGetDeviceProcAddr(
        device: VkDevice,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction;
}
extern "system" {
    pub fn vkCreateDevice(
        physicalDevice: VkPhysicalDevice,
        pCreateInfo: *const VkDeviceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDevice: *mut VkDevice,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDevice(device: VkDevice, pAllocator: *const VkAllocationCallbacks);
}
extern "system" {
    pub fn vkEnumerateInstanceExtensionProperties(
        pLayerName: *const ::std::os::raw::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult;
}
extern "system" {
    pub fn vkEnumerateDeviceExtensionProperties(
        physicalDevice: VkPhysicalDevice,
        pLayerName: *const ::std::os::raw::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult;
}
extern "system" {
    pub fn vkEnumerateInstanceLayerProperties(
        pPropertyCount: *mut u32,
        pProperties: *mut VkLayerProperties,
    ) -> VkResult;
}
extern "system" {
    pub fn vkEnumerateDeviceLayerProperties(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkLayerProperties,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDeviceQueue(
        device: VkDevice,
        queueFamilyIndex: u32,
        queueIndex: u32,
        pQueue: *mut VkQueue,
    );
}
extern "system" {
    pub fn vkQueueSubmit(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo,
        fence: VkFence,
    ) -> VkResult;
}
extern "system" {
    pub fn vkQueueWaitIdle(queue: VkQueue) -> VkResult;
}
extern "system" {
    pub fn vkDeviceWaitIdle(device: VkDevice) -> VkResult;
}
extern "system" {
    pub fn vkAllocateMemory(
        device: VkDevice,
        pAllocateInfo: *const VkMemoryAllocateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pMemory: *mut VkDeviceMemory,
    ) -> VkResult;
}
extern "system" {
    pub fn vkFreeMemory(
        device: VkDevice,
        memory: VkDeviceMemory,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkMapMemory(
        device: VkDevice,
        memory: VkDeviceMemory,
        offset: VkDeviceSize,
        size: VkDeviceSize,
        flags: VkMemoryMapFlags,
        ppData: *mut *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkUnmapMemory(device: VkDevice, memory: VkDeviceMemory);
}
extern "system" {
    pub fn vkFlushMappedMemoryRanges(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult;
}
extern "system" {
    pub fn vkInvalidateMappedMemoryRanges(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDeviceMemoryCommitment(
        device: VkDevice,
        memory: VkDeviceMemory,
        pCommittedMemoryInBytes: *mut VkDeviceSize,
    );
}
extern "system" {
    pub fn vkBindBufferMemory(
        device: VkDevice,
        buffer: VkBuffer,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult;
}
extern "system" {
    pub fn vkBindImageMemory(
        device: VkDevice,
        image: VkImage,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetBufferMemoryRequirements(
        device: VkDevice,
        buffer: VkBuffer,
        pMemoryRequirements: *mut VkMemoryRequirements,
    );
}
extern "system" {
    pub fn vkGetImageMemoryRequirements(
        device: VkDevice,
        image: VkImage,
        pMemoryRequirements: *mut VkMemoryRequirements,
    );
}
extern "system" {
    pub fn vkGetImageSparseMemoryRequirements(
        device: VkDevice,
        image: VkImage,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceSparseImageFormatProperties(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        samples: VkSampleCountFlagBits,
        usage: VkImageUsageFlags,
        tiling: VkImageTiling,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties,
    );
}
extern "system" {
    pub fn vkQueueBindSparse(
        queue: VkQueue,
        bindInfoCount: u32,
        pBindInfo: *const VkBindSparseInfo,
        fence: VkFence,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateFence(
        device: VkDevice,
        pCreateInfo: *const VkFenceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyFence(
        device: VkDevice,
        fence: VkFence,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkResetFences(device: VkDevice, fenceCount: u32, pFences: *const VkFence) -> VkResult;
}
extern "system" {
    pub fn vkGetFenceStatus(device: VkDevice, fence: VkFence) -> VkResult;
}
extern "system" {
    pub fn vkWaitForFences(
        device: VkDevice,
        fenceCount: u32,
        pFences: *const VkFence,
        waitAll: VkBool32,
        timeout: u64,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateSemaphore(
        device: VkDevice,
        pCreateInfo: *const VkSemaphoreCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSemaphore: *mut VkSemaphore,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroySemaphore(
        device: VkDevice,
        semaphore: VkSemaphore,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateEvent(
        device: VkDevice,
        pCreateInfo: *const VkEventCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pEvent: *mut VkEvent,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyEvent(
        device: VkDevice,
        event: VkEvent,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetEventStatus(device: VkDevice, event: VkEvent) -> VkResult;
}
extern "system" {
    pub fn vkSetEvent(device: VkDevice, event: VkEvent) -> VkResult;
}
extern "system" {
    pub fn vkResetEvent(device: VkDevice, event: VkEvent) -> VkResult;
}
extern "system" {
    pub fn vkCreateQueryPool(
        device: VkDevice,
        pCreateInfo: *const VkQueryPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pQueryPool: *mut VkQueryPool,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyQueryPool(
        device: VkDevice,
        queryPool: VkQueryPool,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetQueryPoolResults(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dataSize: size_t,
        pData: *mut ::std::os::raw::c_void,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateBuffer(
        device: VkDevice,
        pCreateInfo: *const VkBufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pBuffer: *mut VkBuffer,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyBuffer(
        device: VkDevice,
        buffer: VkBuffer,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateBufferView(
        device: VkDevice,
        pCreateInfo: *const VkBufferViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkBufferView,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyBufferView(
        device: VkDevice,
        bufferView: VkBufferView,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateImage(
        device: VkDevice,
        pCreateInfo: *const VkImageCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pImage: *mut VkImage,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyImage(
        device: VkDevice,
        image: VkImage,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetImageSubresourceLayout(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource,
        pLayout: *mut VkSubresourceLayout,
    );
}
extern "system" {
    pub fn vkCreateImageView(
        device: VkDevice,
        pCreateInfo: *const VkImageViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkImageView,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyImageView(
        device: VkDevice,
        imageView: VkImageView,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateShaderModule(
        device: VkDevice,
        pCreateInfo: *const VkShaderModuleCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pShaderModule: *mut VkShaderModule,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyShaderModule(
        device: VkDevice,
        shaderModule: VkShaderModule,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreatePipelineCache(
        device: VkDevice,
        pCreateInfo: *const VkPipelineCacheCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineCache: *mut VkPipelineCache,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyPipelineCache(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetPipelineCacheData(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pDataSize: *mut size_t,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkMergePipelineCaches(
        device: VkDevice,
        dstCache: VkPipelineCache,
        srcCacheCount: u32,
        pSrcCaches: *const VkPipelineCache,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateGraphicsPipelines(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkGraphicsPipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateComputePipelines(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkComputePipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyPipeline(
        device: VkDevice,
        pipeline: VkPipeline,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreatePipelineLayout(
        device: VkDevice,
        pCreateInfo: *const VkPipelineLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineLayout: *mut VkPipelineLayout,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyPipelineLayout(
        device: VkDevice,
        pipelineLayout: VkPipelineLayout,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateSampler(
        device: VkDevice,
        pCreateInfo: *const VkSamplerCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSampler: *mut VkSampler,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroySampler(
        device: VkDevice,
        sampler: VkSampler,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateDescriptorSetLayout(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSetLayout: *mut VkDescriptorSetLayout,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDescriptorSetLayout(
        device: VkDevice,
        descriptorSetLayout: VkDescriptorSetLayout,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateDescriptorPool(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorPool: *mut VkDescriptorPool,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDescriptorPool(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkResetDescriptorPool(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        flags: VkDescriptorPoolResetFlags,
    ) -> VkResult;
}
extern "system" {
    pub fn vkAllocateDescriptorSets(
        device: VkDevice,
        pAllocateInfo: *const VkDescriptorSetAllocateInfo,
        pDescriptorSets: *mut VkDescriptorSet,
    ) -> VkResult;
}
extern "system" {
    pub fn vkFreeDescriptorSets(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
    ) -> VkResult;
}
extern "system" {
    pub fn vkUpdateDescriptorSets(
        device: VkDevice,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
        descriptorCopyCount: u32,
        pDescriptorCopies: *const VkCopyDescriptorSet,
    );
}
extern "system" {
    pub fn vkCreateFramebuffer(
        device: VkDevice,
        pCreateInfo: *const VkFramebufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFramebuffer: *mut VkFramebuffer,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyFramebuffer(
        device: VkDevice,
        framebuffer: VkFramebuffer,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateRenderPass(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyRenderPass(
        device: VkDevice,
        renderPass: VkRenderPass,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetRenderAreaGranularity(
        device: VkDevice,
        renderPass: VkRenderPass,
        pGranularity: *mut VkExtent2D,
    );
}
extern "system" {
    pub fn vkCreateCommandPool(
        device: VkDevice,
        pCreateInfo: *const VkCommandPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pCommandPool: *mut VkCommandPool,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyCommandPool(
        device: VkDevice,
        commandPool: VkCommandPool,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkResetCommandPool(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolResetFlags,
    ) -> VkResult;
}
extern "system" {
    pub fn vkAllocateCommandBuffers(
        device: VkDevice,
        pAllocateInfo: *const VkCommandBufferAllocateInfo,
        pCommandBuffers: *mut VkCommandBuffer,
    ) -> VkResult;
}
extern "system" {
    pub fn vkFreeCommandBuffers(
        device: VkDevice,
        commandPool: VkCommandPool,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    );
}
extern "system" {
    pub fn vkBeginCommandBuffer(
        commandBuffer: VkCommandBuffer,
        pBeginInfo: *const VkCommandBufferBeginInfo,
    ) -> VkResult;
}
extern "system" {
    pub fn vkEndCommandBuffer(commandBuffer: VkCommandBuffer) -> VkResult;
}
extern "system" {
    pub fn vkResetCommandBuffer(
        commandBuffer: VkCommandBuffer,
        flags: VkCommandBufferResetFlags,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdBindPipeline(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
    );
}
extern "system" {
    pub fn vkCmdSetViewport(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewports: *const VkViewport,
    );
}
extern "system" {
    pub fn vkCmdSetScissor(
        commandBuffer: VkCommandBuffer,
        firstScissor: u32,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    );
}
extern "system" {
    pub fn vkCmdSetLineWidth(commandBuffer: VkCommandBuffer, lineWidth: f32);
}
extern "system" {
    pub fn vkCmdSetDepthBias(
        commandBuffer: VkCommandBuffer,
        depthBiasConstantFactor: f32,
        depthBiasClamp: f32,
        depthBiasSlopeFactor: f32,
    );
}
extern "system" {
    pub fn vkCmdSetBlendConstants(commandBuffer: VkCommandBuffer, blendConstants: *const f32);
}
extern "system" {
    pub fn vkCmdSetDepthBounds(
        commandBuffer: VkCommandBuffer,
        minDepthBounds: f32,
        maxDepthBounds: f32,
    );
}
extern "system" {
    pub fn vkCmdSetStencilCompareMask(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        compareMask: u32,
    );
}
extern "system" {
    pub fn vkCmdSetStencilWriteMask(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        writeMask: u32,
    );
}
extern "system" {
    pub fn vkCmdSetStencilReference(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        reference: u32,
    );
}
extern "system" {
    pub fn vkCmdBindDescriptorSets(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        firstSet: u32,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
        dynamicOffsetCount: u32,
        pDynamicOffsets: *const u32,
    );
}
extern "system" {
    pub fn vkCmdBindIndexBuffer(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        indexType: VkIndexType,
    );
}
extern "system" {
    pub fn vkCmdBindVertexBuffers(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdDraw(
        commandBuffer: VkCommandBuffer,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndexed(
        commandBuffer: VkCommandBuffer,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        vertexOffset: i32,
        firstInstance: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndirect(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndexedIndirect(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDispatch(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    );
}
extern "system" {
    pub fn vkCmdDispatchIndirect(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdCopyBuffer(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferCopy,
    );
}
extern "system" {
    pub fn vkCmdCopyImage(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageCopy,
    );
}
extern "system" {
    pub fn vkCmdBlitImage(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageBlit,
        filter: VkFilter,
    );
}
extern "system" {
    pub fn vkCmdCopyBufferToImage(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    );
}
extern "system" {
    pub fn vkCmdCopyImageToBuffer(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    );
}
extern "system" {
    pub fn vkCmdUpdateBuffer(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        dataSize: VkDeviceSize,
        pData: *const ::std::os::raw::c_void,
    );
}
extern "system" {
    pub fn vkCmdFillBuffer(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        size: VkDeviceSize,
        data: u32,
    );
}
extern "system" {
    pub fn vkCmdClearColorImage(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pColor: *const VkClearColorValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    );
}
extern "system" {
    pub fn vkCmdClearDepthStencilImage(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pDepthStencil: *const VkClearDepthStencilValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    );
}
extern "system" {
    pub fn vkCmdClearAttachments(
        commandBuffer: VkCommandBuffer,
        attachmentCount: u32,
        pAttachments: *const VkClearAttachment,
        rectCount: u32,
        pRects: *const VkClearRect,
    );
}
extern "system" {
    pub fn vkCmdResolveImage(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageResolve,
    );
}
extern "system" {
    pub fn vkCmdSetEvent(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    );
}
extern "system" {
    pub fn vkCmdResetEvent(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    );
}
extern "system" {
    pub fn vkCmdWaitEvents(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    );
}
extern "system" {
    pub fn vkCmdPipelineBarrier(
        commandBuffer: VkCommandBuffer,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        dependencyFlags: VkDependencyFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    );
}
extern "system" {
    pub fn vkCmdBeginQuery(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
    );
}
extern "system" {
    pub fn vkCmdEndQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32);
}
extern "system" {
    pub fn vkCmdResetQueryPool(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    );
}
extern "system" {
    pub fn vkCmdWriteTimestamp(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        queryPool: VkQueryPool,
        query: u32,
    );
}
extern "system" {
    pub fn vkCmdCopyQueryPoolResults(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    );
}
extern "system" {
    pub fn vkCmdPushConstants(
        commandBuffer: VkCommandBuffer,
        layout: VkPipelineLayout,
        stageFlags: VkShaderStageFlags,
        offset: u32,
        size: u32,
        pValues: *const ::std::os::raw::c_void,
    );
}
extern "system" {
    pub fn vkCmdBeginRenderPass(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        contents: VkSubpassContents,
    );
}
extern "system" {
    pub fn vkCmdNextSubpass(commandBuffer: VkCommandBuffer, contents: VkSubpassContents);
}
extern "system" {
    pub fn vkCmdEndRenderPass(commandBuffer: VkCommandBuffer);
}
extern "system" {
    pub fn vkCmdExecuteCommands(
        commandBuffer: VkCommandBuffer,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversion_T {
    _unused: [u8; 0],
}
pub type VkSamplerYcbcrConversion = *mut VkSamplerYcbcrConversion_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorUpdateTemplate_T {
    _unused: [u8; 0],
}
pub type VkDescriptorUpdateTemplate = *mut VkDescriptorUpdateTemplate_T;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES:
    VkPointClippingBehavior = 0;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY:
    VkPointClippingBehavior = 1;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR:
    VkPointClippingBehavior = 0;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR:
    VkPointClippingBehavior = 1;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM: VkPointClippingBehavior =
    2147483647;
pub type VkPointClippingBehavior = ::std::os::raw::c_uint;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT:
    VkTessellationDomainOrigin = 0;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT:
    VkTessellationDomainOrigin = 1;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR:
    VkTessellationDomainOrigin = 0;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR:
    VkTessellationDomainOrigin = 1;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM:
    VkTessellationDomainOrigin = 2147483647;
pub type VkTessellationDomainOrigin = ::std::os::raw::c_uint;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY:
    VkSamplerYcbcrModelConversion = 0;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY:
    VkSamplerYcbcrModelConversion = 1;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709:
    VkSamplerYcbcrModelConversion = 2;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601:
    VkSamplerYcbcrModelConversion = 3;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020:
    VkSamplerYcbcrModelConversion = 4;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR:
    VkSamplerYcbcrModelConversion = 0;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR:
    VkSamplerYcbcrModelConversion = 1;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR:
    VkSamplerYcbcrModelConversion = 2;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR:
    VkSamplerYcbcrModelConversion = 3;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR:
    VkSamplerYcbcrModelConversion = 4;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM:
    VkSamplerYcbcrModelConversion = 2147483647;
pub type VkSamplerYcbcrModelConversion = ::std::os::raw::c_uint;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_FULL: VkSamplerYcbcrRange = 0;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: VkSamplerYcbcrRange = 1;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: VkSamplerYcbcrRange = 0;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: VkSamplerYcbcrRange = 1;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_MAX_ENUM: VkSamplerYcbcrRange = 2147483647;
pub type VkSamplerYcbcrRange = ::std::os::raw::c_uint;
pub const VkChromaLocation_VK_CHROMA_LOCATION_COSITED_EVEN: VkChromaLocation = 0;
pub const VkChromaLocation_VK_CHROMA_LOCATION_MIDPOINT: VkChromaLocation = 1;
pub const VkChromaLocation_VK_CHROMA_LOCATION_COSITED_EVEN_KHR: VkChromaLocation = 0;
pub const VkChromaLocation_VK_CHROMA_LOCATION_MIDPOINT_KHR: VkChromaLocation = 1;
pub const VkChromaLocation_VK_CHROMA_LOCATION_MAX_ENUM: VkChromaLocation = 2147483647;
pub type VkChromaLocation = ::std::os::raw::c_uint;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET:
    VkDescriptorUpdateTemplateType = 0;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR:
    VkDescriptorUpdateTemplateType = 1;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR:
    VkDescriptorUpdateTemplateType = 0;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM:
    VkDescriptorUpdateTemplateType = 2147483647;
pub type VkDescriptorUpdateTemplateType = ::std::os::raw::c_uint;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_BASIC_BIT: VkSubgroupFeatureFlagBits = 1;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_VOTE_BIT: VkSubgroupFeatureFlagBits = 2;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_ARITHMETIC_BIT: VkSubgroupFeatureFlagBits =
    4;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_BALLOT_BIT: VkSubgroupFeatureFlagBits = 8;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_SHUFFLE_BIT: VkSubgroupFeatureFlagBits = 16;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT:
    VkSubgroupFeatureFlagBits = 32;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_CLUSTERED_BIT: VkSubgroupFeatureFlagBits =
    64;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_QUAD_BIT: VkSubgroupFeatureFlagBits = 128;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV:
    VkSubgroupFeatureFlagBits = 256;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM:
    VkSubgroupFeatureFlagBits = 2147483647;
pub type VkSubgroupFeatureFlagBits = ::std::os::raw::c_uint;
pub type VkSubgroupFeatureFlags = VkFlags;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT:
    VkPeerMemoryFeatureFlagBits = 1;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_COPY_DST_BIT:
    VkPeerMemoryFeatureFlagBits = 2;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT:
    VkPeerMemoryFeatureFlagBits = 4;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT:
    VkPeerMemoryFeatureFlagBits = 8;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR:
    VkPeerMemoryFeatureFlagBits = 1;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR:
    VkPeerMemoryFeatureFlagBits = 2;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR:
    VkPeerMemoryFeatureFlagBits = 4;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR:
    VkPeerMemoryFeatureFlagBits = 8;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM:
    VkPeerMemoryFeatureFlagBits = 2147483647;
pub type VkPeerMemoryFeatureFlagBits = ::std::os::raw::c_uint;
pub type VkPeerMemoryFeatureFlags = VkFlags;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT: VkMemoryAllocateFlagBits = 1;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT: VkMemoryAllocateFlagBits =
    2;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT:
    VkMemoryAllocateFlagBits = 4;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR:
    VkMemoryAllocateFlagBits = 1;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR:
    VkMemoryAllocateFlagBits = 2;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR:
    VkMemoryAllocateFlagBits = 4;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM: VkMemoryAllocateFlagBits =
    2147483647;
pub type VkMemoryAllocateFlagBits = ::std::os::raw::c_uint;
pub type VkMemoryAllocateFlags = VkFlags;
pub type VkCommandPoolTrimFlags = VkFlags;
pub type VkDescriptorUpdateTemplateCreateFlags = VkFlags;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT:
    VkExternalMemoryHandleTypeFlagBits = 1;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT:
    VkExternalMemoryHandleTypeFlagBits = 2;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT:
    VkExternalMemoryHandleTypeFlagBits = 4;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT:
    VkExternalMemoryHandleTypeFlagBits = 8;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT : VkExternalMemoryHandleTypeFlagBits = 16 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT:
    VkExternalMemoryHandleTypeFlagBits = 32;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT:
    VkExternalMemoryHandleTypeFlagBits = 64;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT:
    VkExternalMemoryHandleTypeFlagBits = 512;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID : VkExternalMemoryHandleTypeFlagBits = 1024 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT : VkExternalMemoryHandleTypeFlagBits = 128 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT : VkExternalMemoryHandleTypeFlagBits = 256 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR:
    VkExternalMemoryHandleTypeFlagBits = 1;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR:
    VkExternalMemoryHandleTypeFlagBits = 2;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR : VkExternalMemoryHandleTypeFlagBits = 4 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR : VkExternalMemoryHandleTypeFlagBits = 8 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR : VkExternalMemoryHandleTypeFlagBits = 16 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR:
    VkExternalMemoryHandleTypeFlagBits = 32;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR : VkExternalMemoryHandleTypeFlagBits = 64 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM:
    VkExternalMemoryHandleTypeFlagBits = 2147483647;
pub type VkExternalMemoryHandleTypeFlagBits = ::std::os::raw::c_uint;
pub type VkExternalMemoryHandleTypeFlags = VkFlags;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT:
    VkExternalMemoryFeatureFlagBits = 1;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT:
    VkExternalMemoryFeatureFlagBits = 2;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT:
    VkExternalMemoryFeatureFlagBits = 4;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR:
    VkExternalMemoryFeatureFlagBits = 1;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR:
    VkExternalMemoryFeatureFlagBits = 2;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR:
    VkExternalMemoryFeatureFlagBits = 4;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM:
    VkExternalMemoryFeatureFlagBits = 2147483647;
pub type VkExternalMemoryFeatureFlagBits = ::std::os::raw::c_uint;
pub type VkExternalMemoryFeatureFlags = VkFlags;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT:
    VkExternalFenceHandleTypeFlagBits = 1;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT:
    VkExternalFenceHandleTypeFlagBits = 2;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT:
    VkExternalFenceHandleTypeFlagBits = 4;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT:
    VkExternalFenceHandleTypeFlagBits = 8;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR:
    VkExternalFenceHandleTypeFlagBits = 1;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR:
    VkExternalFenceHandleTypeFlagBits = 2;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR : VkExternalFenceHandleTypeFlagBits = 4 ;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR:
    VkExternalFenceHandleTypeFlagBits = 8;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM:
    VkExternalFenceHandleTypeFlagBits = 2147483647;
pub type VkExternalFenceHandleTypeFlagBits = ::std::os::raw::c_uint;
pub type VkExternalFenceHandleTypeFlags = VkFlags;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT:
    VkExternalFenceFeatureFlagBits = 1;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT:
    VkExternalFenceFeatureFlagBits = 2;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR:
    VkExternalFenceFeatureFlagBits = 1;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR:
    VkExternalFenceFeatureFlagBits = 2;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM:
    VkExternalFenceFeatureFlagBits = 2147483647;
pub type VkExternalFenceFeatureFlagBits = ::std::os::raw::c_uint;
pub type VkExternalFenceFeatureFlags = VkFlags;
pub const VkFenceImportFlagBits_VK_FENCE_IMPORT_TEMPORARY_BIT: VkFenceImportFlagBits = 1;
pub const VkFenceImportFlagBits_VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: VkFenceImportFlagBits = 1;
pub const VkFenceImportFlagBits_VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM: VkFenceImportFlagBits =
    2147483647;
pub type VkFenceImportFlagBits = ::std::os::raw::c_uint;
pub type VkFenceImportFlags = VkFlags;
pub const VkSemaphoreImportFlagBits_VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: VkSemaphoreImportFlagBits =
    1;
pub const VkSemaphoreImportFlagBits_VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR:
    VkSemaphoreImportFlagBits = 1;
pub const VkSemaphoreImportFlagBits_VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM:
    VkSemaphoreImportFlagBits = 2147483647;
pub type VkSemaphoreImportFlagBits = ::std::os::raw::c_uint;
pub type VkSemaphoreImportFlags = VkFlags;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT:
    VkExternalSemaphoreHandleTypeFlagBits = 1;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT : VkExternalSemaphoreHandleTypeFlagBits = 2 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT : VkExternalSemaphoreHandleTypeFlagBits = 4 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT : VkExternalSemaphoreHandleTypeFlagBits = 8 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT:
    VkExternalSemaphoreHandleTypeFlagBits = 16;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT : VkExternalSemaphoreHandleTypeFlagBits = 8 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 1 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 2 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 4 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 8 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 16 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM : VkExternalSemaphoreHandleTypeFlagBits = 2147483647 ;
pub type VkExternalSemaphoreHandleTypeFlagBits = ::std::os::raw::c_uint;
pub type VkExternalSemaphoreHandleTypeFlags = VkFlags;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT:
    VkExternalSemaphoreFeatureFlagBits = 1;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT:
    VkExternalSemaphoreFeatureFlagBits = 2;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR:
    VkExternalSemaphoreFeatureFlagBits = 1;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR:
    VkExternalSemaphoreFeatureFlagBits = 2;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM:
    VkExternalSemaphoreFeatureFlagBits = 2147483647;
pub type VkExternalSemaphoreFeatureFlagBits = ::std::os::raw::c_uint;
pub type VkExternalSemaphoreFeatureFlags = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subgroupSize: u32,
    pub supportedStages: VkShaderStageFlags,
    pub supportedOperations: VkSubgroupFeatureFlags,
    pub quadOperationsInAllStages: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSubgroupProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSubgroupProperties>(),
        32usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceSubgroupProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSubgroupProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSubgroupProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupProperties>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupProperties>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupProperties>())).subgroupSize as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupProperties),
            "::",
            stringify!(subgroupSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupProperties>())).supportedStages
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupProperties),
            "::",
            stringify!(supportedStages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupProperties>())).supportedOperations
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupProperties),
            "::",
            stringify!(supportedOperations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupProperties>())).quadOperationsInAllStages
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupProperties),
            "::",
            stringify!(quadOperationsInAllStages)
        )
    );
}
impl Default for VkPhysicalDeviceSubgroupProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindBufferMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBindBufferMemoryInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkBindBufferMemoryInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkBindBufferMemoryInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindBufferMemoryInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBindBufferMemoryInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBindBufferMemoryInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBindBufferMemoryInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBindBufferMemoryInfo>())).buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBindBufferMemoryInfo>())).memory as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindBufferMemoryInfo>())).memoryOffset as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(memoryOffset)
        )
    );
}
impl Default for VkBindBufferMemoryInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBindImageMemoryInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkBindImageMemoryInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkBindImageMemoryInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindImageMemoryInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBindImageMemoryInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBindImageMemoryInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBindImageMemoryInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBindImageMemoryInfo>())).image as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBindImageMemoryInfo>())).memory as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImageMemoryInfo>())).memoryOffset as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(memoryOffset)
        )
    );
}
impl Default for VkBindImageMemoryInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice16BitStorageFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub storageBuffer16BitAccess: VkBool32,
    pub uniformAndStorageBuffer16BitAccess: VkBool32,
    pub storagePushConstant16: VkBool32,
    pub storageInputOutput16: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevice16BitStorageFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevice16BitStorageFeatures>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevice16BitStorageFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevice16BitStorageFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevice16BitStorageFeatures>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevice16BitStorageFeatures>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevice16BitStorageFeatures>()))
                .storageBuffer16BitAccess as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures),
            "::",
            stringify!(storageBuffer16BitAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevice16BitStorageFeatures>()))
                .uniformAndStorageBuffer16BitAccess as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures),
            "::",
            stringify!(uniformAndStorageBuffer16BitAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevice16BitStorageFeatures>())).storagePushConstant16
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures),
            "::",
            stringify!(storagePushConstant16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevice16BitStorageFeatures>())).storageInputOutput16
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures),
            "::",
            stringify!(storageInputOutput16)
        )
    );
}
impl Default for VkPhysicalDevice16BitStorageFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryDedicatedRequirements {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub prefersDedicatedAllocation: VkBool32,
    pub requiresDedicatedAllocation: VkBool32,
}
#[test]
fn bindgen_test_layout_VkMemoryDedicatedRequirements() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryDedicatedRequirements>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryDedicatedRequirements))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryDedicatedRequirements>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryDedicatedRequirements))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryDedicatedRequirements>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedRequirements),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryDedicatedRequirements>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedRequirements),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryDedicatedRequirements>())).prefersDedicatedAllocation
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedRequirements),
            "::",
            stringify!(prefersDedicatedAllocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryDedicatedRequirements>())).requiresDedicatedAllocation
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedRequirements),
            "::",
            stringify!(requiresDedicatedAllocation)
        )
    );
}
impl Default for VkMemoryDedicatedRequirements {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryDedicatedAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
    pub buffer: VkBuffer,
}
#[test]
fn bindgen_test_layout_VkMemoryDedicatedAllocateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryDedicatedAllocateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkMemoryDedicatedAllocateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryDedicatedAllocateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryDedicatedAllocateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryDedicatedAllocateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryDedicatedAllocateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryDedicatedAllocateInfo>())).image as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedAllocateInfo),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryDedicatedAllocateInfo>())).buffer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedAllocateInfo),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for VkMemoryDedicatedAllocateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryAllocateFlagsInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkMemoryAllocateFlags,
    pub deviceMask: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryAllocateFlagsInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryAllocateFlagsInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryAllocateFlagsInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryAllocateFlagsInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryAllocateFlagsInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryAllocateFlagsInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateFlagsInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryAllocateFlagsInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateFlagsInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryAllocateFlagsInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateFlagsInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryAllocateFlagsInfo>())).deviceMask as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateFlagsInfo),
            "::",
            stringify!(deviceMask)
        )
    );
}
impl Default for VkMemoryAllocateFlagsInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupRenderPassBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceMask: u32,
    pub deviceRenderAreaCount: u32,
    pub pDeviceRenderAreas: *const VkRect2D,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupRenderPassBeginInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupRenderPassBeginInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkDeviceGroupRenderPassBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupRenderPassBeginInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceGroupRenderPassBeginInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupRenderPassBeginInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupRenderPassBeginInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupRenderPassBeginInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupRenderPassBeginInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupRenderPassBeginInfo>())).deviceMask as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupRenderPassBeginInfo),
            "::",
            stringify!(deviceMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupRenderPassBeginInfo>())).deviceRenderAreaCount
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupRenderPassBeginInfo),
            "::",
            stringify!(deviceRenderAreaCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupRenderPassBeginInfo>())).pDeviceRenderAreas
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupRenderPassBeginInfo),
            "::",
            stringify!(pDeviceRenderAreas)
        )
    );
}
impl Default for VkDeviceGroupRenderPassBeginInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupCommandBufferBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceMask: u32,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupCommandBufferBeginInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupCommandBufferBeginInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkDeviceGroupCommandBufferBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupCommandBufferBeginInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceGroupCommandBufferBeginInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupCommandBufferBeginInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupCommandBufferBeginInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupCommandBufferBeginInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupCommandBufferBeginInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupCommandBufferBeginInfo>())).deviceMask as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupCommandBufferBeginInfo),
            "::",
            stringify!(deviceMask)
        )
    );
}
impl Default for VkDeviceGroupCommandBufferBeginInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphoreDeviceIndices: *const u32,
    pub commandBufferCount: u32,
    pub pCommandBufferDeviceMasks: *const u32,
    pub signalSemaphoreCount: u32,
    pub pSignalSemaphoreDeviceIndices: *const u32,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupSubmitInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupSubmitInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkDeviceGroupSubmitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupSubmitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceGroupSubmitInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceGroupSubmitInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceGroupSubmitInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupSubmitInfo>())).waitSemaphoreCount as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(waitSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupSubmitInfo>())).pWaitSemaphoreDeviceIndices
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(pWaitSemaphoreDeviceIndices)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupSubmitInfo>())).commandBufferCount as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(commandBufferCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupSubmitInfo>())).pCommandBufferDeviceMasks
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(pCommandBufferDeviceMasks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupSubmitInfo>())).signalSemaphoreCount as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(signalSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupSubmitInfo>())).pSignalSemaphoreDeviceIndices
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(pSignalSemaphoreDeviceIndices)
        )
    );
}
impl Default for VkDeviceGroupSubmitInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupBindSparseInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub resourceDeviceIndex: u32,
    pub memoryDeviceIndex: u32,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupBindSparseInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupBindSparseInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkDeviceGroupBindSparseInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupBindSparseInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceGroupBindSparseInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupBindSparseInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupBindSparseInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupBindSparseInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupBindSparseInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupBindSparseInfo>())).resourceDeviceIndex as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupBindSparseInfo),
            "::",
            stringify!(resourceDeviceIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupBindSparseInfo>())).memoryDeviceIndex as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupBindSparseInfo),
            "::",
            stringify!(memoryDeviceIndex)
        )
    );
}
impl Default for VkDeviceGroupBindSparseInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindBufferMemoryDeviceGroupInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceIndexCount: u32,
    pub pDeviceIndices: *const u32,
}
#[test]
fn bindgen_test_layout_VkBindBufferMemoryDeviceGroupInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkBindBufferMemoryDeviceGroupInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkBindBufferMemoryDeviceGroupInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindBufferMemoryDeviceGroupInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindBufferMemoryDeviceGroupInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindBufferMemoryDeviceGroupInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryDeviceGroupInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindBufferMemoryDeviceGroupInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryDeviceGroupInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindBufferMemoryDeviceGroupInfo>())).deviceIndexCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryDeviceGroupInfo),
            "::",
            stringify!(deviceIndexCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindBufferMemoryDeviceGroupInfo>())).pDeviceIndices as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryDeviceGroupInfo),
            "::",
            stringify!(pDeviceIndices)
        )
    );
}
impl Default for VkBindBufferMemoryDeviceGroupInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemoryDeviceGroupInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceIndexCount: u32,
    pub pDeviceIndices: *const u32,
    pub splitInstanceBindRegionCount: u32,
    pub pSplitInstanceBindRegions: *const VkRect2D,
}
#[test]
fn bindgen_test_layout_VkBindImageMemoryDeviceGroupInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkBindImageMemoryDeviceGroupInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkBindImageMemoryDeviceGroupInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindImageMemoryDeviceGroupInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindImageMemoryDeviceGroupInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImageMemoryDeviceGroupInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryDeviceGroupInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImageMemoryDeviceGroupInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryDeviceGroupInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImageMemoryDeviceGroupInfo>())).deviceIndexCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryDeviceGroupInfo),
            "::",
            stringify!(deviceIndexCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImageMemoryDeviceGroupInfo>())).pDeviceIndices as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryDeviceGroupInfo),
            "::",
            stringify!(pDeviceIndices)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImageMemoryDeviceGroupInfo>()))
                .splitInstanceBindRegionCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryDeviceGroupInfo),
            "::",
            stringify!(splitInstanceBindRegionCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImageMemoryDeviceGroupInfo>())).pSplitInstanceBindRegions
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryDeviceGroupInfo),
            "::",
            stringify!(pSplitInstanceBindRegions)
        )
    );
}
impl Default for VkBindImageMemoryDeviceGroupInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceGroupProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub physicalDeviceCount: u32,
    pub physicalDevices: [VkPhysicalDevice; 32usize],
    pub subsetAllocation: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceGroupProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceGroupProperties>(),
        288usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceGroupProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceGroupProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceGroupProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceGroupProperties>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGroupProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceGroupProperties>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGroupProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceGroupProperties>())).physicalDeviceCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGroupProperties),
            "::",
            stringify!(physicalDeviceCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceGroupProperties>())).physicalDevices as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGroupProperties),
            "::",
            stringify!(physicalDevices)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceGroupProperties>())).subsetAllocation as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGroupProperties),
            "::",
            stringify!(subsetAllocation)
        )
    );
}
impl Default for VkPhysicalDeviceGroupProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupDeviceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub physicalDeviceCount: u32,
    pub pPhysicalDevices: *const VkPhysicalDevice,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupDeviceCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupDeviceCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkDeviceGroupDeviceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupDeviceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceGroupDeviceCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupDeviceCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupDeviceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupDeviceCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupDeviceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupDeviceCreateInfo>())).physicalDeviceCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupDeviceCreateInfo),
            "::",
            stringify!(physicalDeviceCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupDeviceCreateInfo>())).pPhysicalDevices as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupDeviceCreateInfo),
            "::",
            stringify!(pPhysicalDevices)
        )
    );
}
impl Default for VkDeviceGroupDeviceCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
}
#[test]
fn bindgen_test_layout_VkBufferMemoryRequirementsInfo2() {
    assert_eq!(
        ::std::mem::size_of::<VkBufferMemoryRequirementsInfo2>(),
        24usize,
        concat!("Size of: ", stringify!(VkBufferMemoryRequirementsInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferMemoryRequirementsInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferMemoryRequirementsInfo2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferMemoryRequirementsInfo2>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryRequirementsInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferMemoryRequirementsInfo2>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryRequirementsInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferMemoryRequirementsInfo2>())).buffer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryRequirementsInfo2),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for VkBufferMemoryRequirementsInfo2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
}
#[test]
fn bindgen_test_layout_VkImageMemoryRequirementsInfo2() {
    assert_eq!(
        ::std::mem::size_of::<VkImageMemoryRequirementsInfo2>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageMemoryRequirementsInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageMemoryRequirementsInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageMemoryRequirementsInfo2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageMemoryRequirementsInfo2>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryRequirementsInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageMemoryRequirementsInfo2>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryRequirementsInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageMemoryRequirementsInfo2>())).image as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryRequirementsInfo2),
            "::",
            stringify!(image)
        )
    );
}
impl Default for VkImageMemoryRequirementsInfo2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSparseMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
}
#[test]
fn bindgen_test_layout_VkImageSparseMemoryRequirementsInfo2() {
    assert_eq!(
        ::std::mem::size_of::<VkImageSparseMemoryRequirementsInfo2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkImageSparseMemoryRequirementsInfo2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageSparseMemoryRequirementsInfo2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImageSparseMemoryRequirementsInfo2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSparseMemoryRequirementsInfo2>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSparseMemoryRequirementsInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSparseMemoryRequirementsInfo2>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSparseMemoryRequirementsInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSparseMemoryRequirementsInfo2>())).image as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSparseMemoryRequirementsInfo2),
            "::",
            stringify!(image)
        )
    );
}
impl Default for VkImageSparseMemoryRequirementsInfo2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryRequirements2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryRequirements: VkMemoryRequirements,
}
#[test]
fn bindgen_test_layout_VkMemoryRequirements2() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryRequirements2>(),
        40usize,
        concat!("Size of: ", stringify!(VkMemoryRequirements2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryRequirements2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryRequirements2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryRequirements2>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryRequirements2>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryRequirements2>())).memoryRequirements as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements2),
            "::",
            stringify!(memoryRequirements)
        )
    );
}
impl Default for VkMemoryRequirements2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryRequirements2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryRequirements: VkSparseImageMemoryRequirements,
}
#[test]
fn bindgen_test_layout_VkSparseImageMemoryRequirements2() {
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageMemoryRequirements2>(),
        64usize,
        concat!("Size of: ", stringify!(VkSparseImageMemoryRequirements2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageMemoryRequirements2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSparseImageMemoryRequirements2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageMemoryRequirements2>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageMemoryRequirements2>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageMemoryRequirements2>())).memoryRequirements
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements2),
            "::",
            stringify!(memoryRequirements)
        )
    );
}
impl Default for VkSparseImageMemoryRequirements2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFeatures2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub features: VkPhysicalDeviceFeatures,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFeatures2() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFeatures2>(),
        240usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceFeatures2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFeatures2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceFeatures2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPhysicalDeviceFeatures2>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPhysicalDeviceFeatures2>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFeatures2>())).features as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures2),
            "::",
            stringify!(features)
        )
    );
}
impl Default for VkPhysicalDeviceFeatures2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub properties: VkPhysicalDeviceProperties,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceProperties2() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceProperties2>(),
        840usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceProperties2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceProperties2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceProperties2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProperties2>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProperties2>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProperties2>())).properties as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties2),
            "::",
            stringify!(properties)
        )
    );
}
impl Default for VkPhysicalDeviceProperties2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFormatProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub formatProperties: VkFormatProperties,
}
#[test]
fn bindgen_test_layout_VkFormatProperties2() {
    assert_eq!(
        ::std::mem::size_of::<VkFormatProperties2>(),
        32usize,
        concat!("Size of: ", stringify!(VkFormatProperties2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFormatProperties2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFormatProperties2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFormatProperties2>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFormatProperties2>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFormatProperties2>())).formatProperties as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties2),
            "::",
            stringify!(formatProperties)
        )
    );
}
impl Default for VkFormatProperties2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageFormatProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageFormatProperties: VkImageFormatProperties,
}
#[test]
fn bindgen_test_layout_VkImageFormatProperties2() {
    assert_eq!(
        ::std::mem::size_of::<VkImageFormatProperties2>(),
        48usize,
        concat!("Size of: ", stringify!(VkImageFormatProperties2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageFormatProperties2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageFormatProperties2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageFormatProperties2>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageFormatProperties2>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageFormatProperties2>())).imageFormatProperties as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties2),
            "::",
            stringify!(imageFormatProperties)
        )
    );
}
impl Default for VkImageFormatProperties2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageFormatInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub format: VkFormat,
    pub type_: VkImageType,
    pub tiling: VkImageTiling,
    pub usage: VkImageUsageFlags,
    pub flags: VkImageCreateFlags,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageFormatInfo2() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageFormatInfo2>(),
        40usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceImageFormatInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageFormatInfo2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageFormatInfo2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageFormatInfo2>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageFormatInfo2>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageFormatInfo2>())).format as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageFormatInfo2>())).type_ as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageFormatInfo2>())).tiling as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(tiling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageFormatInfo2>())).usage as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageFormatInfo2>())).flags as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkPhysicalDeviceImageFormatInfo2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub queueFamilyProperties: VkQueueFamilyProperties,
}
#[test]
fn bindgen_test_layout_VkQueueFamilyProperties2() {
    assert_eq!(
        ::std::mem::size_of::<VkQueueFamilyProperties2>(),
        40usize,
        concat!("Size of: ", stringify!(VkQueueFamilyProperties2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueueFamilyProperties2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkQueueFamilyProperties2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkQueueFamilyProperties2>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkQueueFamilyProperties2>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueueFamilyProperties2>())).queueFamilyProperties as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties2),
            "::",
            stringify!(queueFamilyProperties)
        )
    );
}
impl Default for VkQueueFamilyProperties2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryProperties: VkPhysicalDeviceMemoryProperties,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMemoryProperties2() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMemoryProperties2>(),
        536usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceMemoryProperties2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMemoryProperties2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMemoryProperties2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryProperties2>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryProperties2>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryProperties2>())).memoryProperties
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties2),
            "::",
            stringify!(memoryProperties)
        )
    );
}
impl Default for VkPhysicalDeviceMemoryProperties2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageFormatProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub properties: VkSparseImageFormatProperties,
}
#[test]
fn bindgen_test_layout_VkSparseImageFormatProperties2() {
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageFormatProperties2>(),
        40usize,
        concat!("Size of: ", stringify!(VkSparseImageFormatProperties2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageFormatProperties2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSparseImageFormatProperties2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageFormatProperties2>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageFormatProperties2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageFormatProperties2>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageFormatProperties2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSparseImageFormatProperties2>())).properties as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageFormatProperties2),
            "::",
            stringify!(properties)
        )
    );
}
impl Default for VkSparseImageFormatProperties2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSparseImageFormatInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub format: VkFormat,
    pub type_: VkImageType,
    pub samples: VkSampleCountFlagBits,
    pub usage: VkImageUsageFlags,
    pub tiling: VkImageTiling,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSparseImageFormatInfo2() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSparseImageFormatInfo2>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSparseImageFormatInfo2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSparseImageFormatInfo2>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSparseImageFormatInfo2>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSparseImageFormatInfo2>())).format as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSparseImageFormatInfo2>())).type_ as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSparseImageFormatInfo2>())).samples as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSparseImageFormatInfo2>())).usage as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSparseImageFormatInfo2>())).tiling as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(tiling)
        )
    );
}
impl Default for VkPhysicalDeviceSparseImageFormatInfo2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePointClippingProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pointClippingBehavior: VkPointClippingBehavior,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePointClippingProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePointClippingProperties>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePointClippingProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePointClippingProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePointClippingProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePointClippingProperties>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePointClippingProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePointClippingProperties>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePointClippingProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePointClippingProperties>()))
                .pointClippingBehavior as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePointClippingProperties),
            "::",
            stringify!(pointClippingBehavior)
        )
    );
}
impl Default for VkPhysicalDevicePointClippingProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkInputAttachmentAspectReference {
    pub subpass: u32,
    pub inputAttachmentIndex: u32,
    pub aspectMask: VkImageAspectFlags,
}
#[test]
fn bindgen_test_layout_VkInputAttachmentAspectReference() {
    assert_eq!(
        ::std::mem::size_of::<VkInputAttachmentAspectReference>(),
        12usize,
        concat!("Size of: ", stringify!(VkInputAttachmentAspectReference))
    );
    assert_eq!(
        ::std::mem::align_of::<VkInputAttachmentAspectReference>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkInputAttachmentAspectReference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkInputAttachmentAspectReference>())).subpass as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInputAttachmentAspectReference),
            "::",
            stringify!(subpass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkInputAttachmentAspectReference>())).inputAttachmentIndex
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInputAttachmentAspectReference),
            "::",
            stringify!(inputAttachmentIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkInputAttachmentAspectReference>())).aspectMask as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInputAttachmentAspectReference),
            "::",
            stringify!(aspectMask)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassInputAttachmentAspectCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub aspectReferenceCount: u32,
    pub pAspectReferences: *const VkInputAttachmentAspectReference,
}
#[test]
fn bindgen_test_layout_VkRenderPassInputAttachmentAspectCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassInputAttachmentAspectCreateInfo>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkRenderPassInputAttachmentAspectCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassInputAttachmentAspectCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderPassInputAttachmentAspectCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassInputAttachmentAspectCreateInfo>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassInputAttachmentAspectCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassInputAttachmentAspectCreateInfo>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassInputAttachmentAspectCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassInputAttachmentAspectCreateInfo>()))
                .aspectReferenceCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassInputAttachmentAspectCreateInfo),
            "::",
            stringify!(aspectReferenceCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassInputAttachmentAspectCreateInfo>()))
                .pAspectReferences as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassInputAttachmentAspectCreateInfo),
            "::",
            stringify!(pAspectReferences)
        )
    );
}
impl Default for VkRenderPassInputAttachmentAspectCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewUsageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub usage: VkImageUsageFlags,
}
#[test]
fn bindgen_test_layout_VkImageViewUsageCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkImageViewUsageCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageViewUsageCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewUsageCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageViewUsageCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewUsageCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewUsageCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewUsageCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewUsageCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewUsageCreateInfo>())).usage as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewUsageCreateInfo),
            "::",
            stringify!(usage)
        )
    );
}
impl Default for VkImageViewUsageCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub domainOrigin: VkTessellationDomainOrigin,
}
#[test]
fn bindgen_test_layout_VkPipelineTessellationDomainOriginStateCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineTessellationDomainOriginStateCreateInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineTessellationDomainOriginStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineTessellationDomainOriginStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineTessellationDomainOriginStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineTessellationDomainOriginStateCreateInfo>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationDomainOriginStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineTessellationDomainOriginStateCreateInfo>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationDomainOriginStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineTessellationDomainOriginStateCreateInfo>()))
                .domainOrigin as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationDomainOriginStateCreateInfo),
            "::",
            stringify!(domainOrigin)
        )
    );
}
impl Default for VkPipelineTessellationDomainOriginStateCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassMultiviewCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub subpassCount: u32,
    pub pViewMasks: *const u32,
    pub dependencyCount: u32,
    pub pViewOffsets: *const i32,
    pub correlationMaskCount: u32,
    pub pCorrelationMasks: *const u32,
}
#[test]
fn bindgen_test_layout_VkRenderPassMultiviewCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassMultiviewCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkRenderPassMultiviewCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassMultiviewCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRenderPassMultiviewCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassMultiviewCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassMultiviewCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassMultiviewCreateInfo>())).subpassCount as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(subpassCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassMultiviewCreateInfo>())).pViewMasks as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(pViewMasks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassMultiviewCreateInfo>())).dependencyCount as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(dependencyCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassMultiviewCreateInfo>())).pViewOffsets as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(pViewOffsets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassMultiviewCreateInfo>())).correlationMaskCount
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(correlationMaskCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassMultiviewCreateInfo>())).pCorrelationMasks
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(pCorrelationMasks)
        )
    );
}
impl Default for VkRenderPassMultiviewCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub multiview: VkBool32,
    pub multiviewGeometryShader: VkBool32,
    pub multiviewTessellationShader: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMultiviewFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMultiviewFeatures>(),
        32usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceMultiviewFeatures))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMultiviewFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMultiviewFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMultiviewFeatures>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMultiviewFeatures>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMultiviewFeatures>())).multiview as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewFeatures),
            "::",
            stringify!(multiview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMultiviewFeatures>())).multiviewGeometryShader
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewFeatures),
            "::",
            stringify!(multiviewGeometryShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMultiviewFeatures>()))
                .multiviewTessellationShader as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewFeatures),
            "::",
            stringify!(multiviewTessellationShader)
        )
    );
}
impl Default for VkPhysicalDeviceMultiviewFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxMultiviewViewCount: u32,
    pub maxMultiviewInstanceIndex: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMultiviewProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMultiviewProperties>(),
        24usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceMultiviewProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMultiviewProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMultiviewProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMultiviewProperties>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMultiviewProperties>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMultiviewProperties>())).maxMultiviewViewCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewProperties),
            "::",
            stringify!(maxMultiviewViewCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMultiviewProperties>()))
                .maxMultiviewInstanceIndex as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewProperties),
            "::",
            stringify!(maxMultiviewInstanceIndex)
        )
    );
}
impl Default for VkPhysicalDeviceMultiviewProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVariablePointersFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub variablePointersStorageBuffer: VkBool32,
    pub variablePointers: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVariablePointersFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVariablePointersFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceVariablePointersFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVariablePointersFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVariablePointersFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVariablePointersFeatures>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVariablePointersFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVariablePointersFeatures>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVariablePointersFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVariablePointersFeatures>()))
                .variablePointersStorageBuffer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVariablePointersFeatures),
            "::",
            stringify!(variablePointersStorageBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVariablePointersFeatures>())).variablePointers
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVariablePointersFeatures),
            "::",
            stringify!(variablePointers)
        )
    );
}
impl Default for VkPhysicalDeviceVariablePointersFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProtectedMemoryFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub protectedMemory: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceProtectedMemoryFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceProtectedMemoryFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceProtectedMemoryFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceProtectedMemoryFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceProtectedMemoryFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProtectedMemoryFeatures>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProtectedMemoryFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProtectedMemoryFeatures>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProtectedMemoryFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProtectedMemoryFeatures>())).protectedMemory
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProtectedMemoryFeatures),
            "::",
            stringify!(protectedMemory)
        )
    );
}
impl Default for VkPhysicalDeviceProtectedMemoryFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProtectedMemoryProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub protectedNoFault: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceProtectedMemoryProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceProtectedMemoryProperties>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceProtectedMemoryProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceProtectedMemoryProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceProtectedMemoryProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProtectedMemoryProperties>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProtectedMemoryProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProtectedMemoryProperties>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProtectedMemoryProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceProtectedMemoryProperties>())).protectedNoFault
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProtectedMemoryProperties),
            "::",
            stringify!(protectedNoFault)
        )
    );
}
impl Default for VkPhysicalDeviceProtectedMemoryProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceQueueCreateFlags,
    pub queueFamilyIndex: u32,
    pub queueIndex: u32,
}
#[test]
fn bindgen_test_layout_VkDeviceQueueInfo2() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceQueueInfo2>(),
        32usize,
        concat!("Size of: ", stringify!(VkDeviceQueueInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceQueueInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceQueueInfo2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceQueueInfo2>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceQueueInfo2>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceQueueInfo2>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueInfo2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceQueueInfo2>())).queueFamilyIndex as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueInfo2),
            "::",
            stringify!(queueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceQueueInfo2>())).queueIndex as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueInfo2),
            "::",
            stringify!(queueIndex)
        )
    );
}
impl Default for VkDeviceQueueInfo2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkProtectedSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub protectedSubmit: VkBool32,
}
#[test]
fn bindgen_test_layout_VkProtectedSubmitInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkProtectedSubmitInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkProtectedSubmitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkProtectedSubmitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkProtectedSubmitInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkProtectedSubmitInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkProtectedSubmitInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkProtectedSubmitInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkProtectedSubmitInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkProtectedSubmitInfo>())).protectedSubmit as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkProtectedSubmitInfo),
            "::",
            stringify!(protectedSubmit)
        )
    );
}
impl Default for VkProtectedSubmitInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub format: VkFormat,
    pub ycbcrModel: VkSamplerYcbcrModelConversion,
    pub ycbcrRange: VkSamplerYcbcrRange,
    pub components: VkComponentMapping,
    pub xChromaOffset: VkChromaLocation,
    pub yChromaOffset: VkChromaLocation,
    pub chromaFilter: VkFilter,
    pub forceExplicitReconstruction: VkBool32,
}
#[test]
fn bindgen_test_layout_VkSamplerYcbcrConversionCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSamplerYcbcrConversionCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkSamplerYcbcrConversionCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerYcbcrConversionCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSamplerYcbcrConversionCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionCreateInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionCreateInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionCreateInfo>())).format as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionCreateInfo>())).ycbcrModel as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(ycbcrModel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionCreateInfo>())).ycbcrRange as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(ycbcrRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionCreateInfo>())).components as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionCreateInfo>())).xChromaOffset as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(xChromaOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionCreateInfo>())).yChromaOffset as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(yChromaOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionCreateInfo>())).chromaFilter as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(chromaFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionCreateInfo>()))
                .forceExplicitReconstruction as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(forceExplicitReconstruction)
        )
    );
}
impl Default for VkSamplerYcbcrConversionCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub conversion: VkSamplerYcbcrConversion,
}
#[test]
fn bindgen_test_layout_VkSamplerYcbcrConversionInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSamplerYcbcrConversionInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSamplerYcbcrConversionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerYcbcrConversionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSamplerYcbcrConversionInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionInfo>())).conversion as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionInfo),
            "::",
            stringify!(conversion)
        )
    );
}
impl Default for VkSamplerYcbcrConversionInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImagePlaneMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub planeAspect: VkImageAspectFlagBits,
}
#[test]
fn bindgen_test_layout_VkBindImagePlaneMemoryInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkBindImagePlaneMemoryInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkBindImagePlaneMemoryInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindImagePlaneMemoryInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBindImagePlaneMemoryInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImagePlaneMemoryInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImagePlaneMemoryInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImagePlaneMemoryInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImagePlaneMemoryInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImagePlaneMemoryInfo>())).planeAspect as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImagePlaneMemoryInfo),
            "::",
            stringify!(planeAspect)
        )
    );
}
impl Default for VkBindImagePlaneMemoryInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImagePlaneMemoryRequirementsInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub planeAspect: VkImageAspectFlagBits,
}
#[test]
fn bindgen_test_layout_VkImagePlaneMemoryRequirementsInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkImagePlaneMemoryRequirementsInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkImagePlaneMemoryRequirementsInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImagePlaneMemoryRequirementsInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImagePlaneMemoryRequirementsInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImagePlaneMemoryRequirementsInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImagePlaneMemoryRequirementsInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImagePlaneMemoryRequirementsInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImagePlaneMemoryRequirementsInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImagePlaneMemoryRequirementsInfo>())).planeAspect as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImagePlaneMemoryRequirementsInfo),
            "::",
            stringify!(planeAspect)
        )
    );
}
impl Default for VkImagePlaneMemoryRequirementsInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub samplerYcbcrConversion: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSamplerYcbcrConversionFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSamplerYcbcrConversionFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSamplerYcbcrConversionFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSamplerYcbcrConversionFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSamplerYcbcrConversionFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSamplerYcbcrConversionFeatures>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerYcbcrConversionFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSamplerYcbcrConversionFeatures>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerYcbcrConversionFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSamplerYcbcrConversionFeatures>()))
                .samplerYcbcrConversion as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerYcbcrConversionFeatures),
            "::",
            stringify!(samplerYcbcrConversion)
        )
    );
}
impl Default for VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionImageFormatProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub combinedImageSamplerDescriptorCount: u32,
}
#[test]
fn bindgen_test_layout_VkSamplerYcbcrConversionImageFormatProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkSamplerYcbcrConversionImageFormatProperties>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkSamplerYcbcrConversionImageFormatProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerYcbcrConversionImageFormatProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSamplerYcbcrConversionImageFormatProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionImageFormatProperties>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionImageFormatProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionImageFormatProperties>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionImageFormatProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerYcbcrConversionImageFormatProperties>()))
                .combinedImageSamplerDescriptorCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionImageFormatProperties),
            "::",
            stringify!(combinedImageSamplerDescriptorCount)
        )
    );
}
impl Default for VkSamplerYcbcrConversionImageFormatProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorUpdateTemplateEntry {
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
    pub descriptorType: VkDescriptorType,
    pub offset: size_t,
    pub stride: size_t,
}
#[test]
fn bindgen_test_layout_VkDescriptorUpdateTemplateEntry() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorUpdateTemplateEntry>(),
        32usize,
        concat!("Size of: ", stringify!(VkDescriptorUpdateTemplateEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorUpdateTemplateEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorUpdateTemplateEntry))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateEntry>())).dstBinding as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(dstBinding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateEntry>())).dstArrayElement as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(dstArrayElement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateEntry>())).descriptorCount as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(descriptorCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateEntry>())).descriptorType as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(descriptorType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateEntry>())).offset as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateEntry>())).stride as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(stride)
        )
    );
}
impl Default for VkDescriptorUpdateTemplateEntry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorUpdateTemplateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDescriptorUpdateTemplateCreateFlags,
    pub descriptorUpdateEntryCount: u32,
    pub pDescriptorUpdateEntries: *const VkDescriptorUpdateTemplateEntry,
    pub templateType: VkDescriptorUpdateTemplateType,
    pub descriptorSetLayout: VkDescriptorSetLayout,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipelineLayout: VkPipelineLayout,
    pub set: u32,
}
#[test]
fn bindgen_test_layout_VkDescriptorUpdateTemplateCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorUpdateTemplateCreateInfo>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorUpdateTemplateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateCreateInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateCreateInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateCreateInfo>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateCreateInfo>()))
                .descriptorUpdateEntryCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(descriptorUpdateEntryCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateCreateInfo>()))
                .pDescriptorUpdateEntries as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(pDescriptorUpdateEntries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateCreateInfo>())).templateType
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(templateType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateCreateInfo>())).descriptorSetLayout
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(descriptorSetLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateCreateInfo>())).pipelineBindPoint
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(pipelineBindPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateCreateInfo>())).pipelineLayout
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(pipelineLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorUpdateTemplateCreateInfo>())).set as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(set)
        )
    );
}
impl Default for VkDescriptorUpdateTemplateCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkExternalMemoryProperties {
    pub externalMemoryFeatures: VkExternalMemoryFeatureFlags,
    pub exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags,
    pub compatibleHandleTypes: VkExternalMemoryHandleTypeFlags,
}
#[test]
fn bindgen_test_layout_VkExternalMemoryProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkExternalMemoryProperties>(),
        12usize,
        concat!("Size of: ", stringify!(VkExternalMemoryProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalMemoryProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(VkExternalMemoryProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalMemoryProperties>())).externalMemoryFeatures
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryProperties),
            "::",
            stringify!(externalMemoryFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalMemoryProperties>())).exportFromImportedHandleTypes
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryProperties),
            "::",
            stringify!(exportFromImportedHandleTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalMemoryProperties>())).compatibleHandleTypes as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryProperties),
            "::",
            stringify!(compatibleHandleTypes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalImageFormatInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExternalImageFormatInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExternalImageFormatInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExternalImageFormatInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExternalImageFormatInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExternalImageFormatInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalImageFormatInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalImageFormatInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalImageFormatInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalImageFormatInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalImageFormatInfo>())).handleType
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalImageFormatInfo),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkPhysicalDeviceExternalImageFormatInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalImageFormatProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub externalMemoryProperties: VkExternalMemoryProperties,
}
#[test]
fn bindgen_test_layout_VkExternalImageFormatProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkExternalImageFormatProperties>(),
        32usize,
        concat!("Size of: ", stringify!(VkExternalImageFormatProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalImageFormatProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExternalImageFormatProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalImageFormatProperties>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalImageFormatProperties>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalImageFormatProperties>())).externalMemoryProperties
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatProperties),
            "::",
            stringify!(externalMemoryProperties)
        )
    );
}
impl Default for VkExternalImageFormatProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalBufferInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkBufferCreateFlags,
    pub usage: VkBufferUsageFlags,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExternalBufferInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExternalBufferInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceExternalBufferInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExternalBufferInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExternalBufferInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalBufferInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalBufferInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalBufferInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalBufferInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalBufferInfo>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalBufferInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalBufferInfo>())).usage as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalBufferInfo),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalBufferInfo>())).handleType as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalBufferInfo),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkPhysicalDeviceExternalBufferInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalBufferProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub externalMemoryProperties: VkExternalMemoryProperties,
}
#[test]
fn bindgen_test_layout_VkExternalBufferProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkExternalBufferProperties>(),
        32usize,
        concat!("Size of: ", stringify!(VkExternalBufferProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalBufferProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExternalBufferProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalBufferProperties>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalBufferProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalBufferProperties>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalBufferProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalBufferProperties>())).externalMemoryProperties
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalBufferProperties),
            "::",
            stringify!(externalMemoryProperties)
        )
    );
}
impl Default for VkExternalBufferProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceIDProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceUUID: [u8; 16usize],
    pub driverUUID: [u8; 16usize],
    pub deviceLUID: [u8; 8usize],
    pub deviceNodeMask: u32,
    pub deviceLUIDValid: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceIDProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceIDProperties>(),
        64usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceIDProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceIDProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceIDProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceIDProperties>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceIDProperties>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceIDProperties>())).deviceUUID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(deviceUUID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceIDProperties>())).driverUUID as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(driverUUID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceIDProperties>())).deviceLUID as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(deviceLUID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceIDProperties>())).deviceNodeMask as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(deviceNodeMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceIDProperties>())).deviceLUIDValid as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(deviceLUIDValid)
        )
    );
}
impl Default for VkPhysicalDeviceIDProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryImageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[test]
fn bindgen_test_layout_VkExternalMemoryImageCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkExternalMemoryImageCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkExternalMemoryImageCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalMemoryImageCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExternalMemoryImageCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalMemoryImageCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryImageCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalMemoryImageCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryImageCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalMemoryImageCreateInfo>())).handleTypes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryImageCreateInfo),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExternalMemoryImageCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryBufferCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[test]
fn bindgen_test_layout_VkExternalMemoryBufferCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkExternalMemoryBufferCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkExternalMemoryBufferCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalMemoryBufferCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkExternalMemoryBufferCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalMemoryBufferCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryBufferCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalMemoryBufferCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryBufferCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalMemoryBufferCreateInfo>())).handleTypes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryBufferCreateInfo),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExternalMemoryBufferCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportMemoryAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[test]
fn bindgen_test_layout_VkExportMemoryAllocateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkExportMemoryAllocateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkExportMemoryAllocateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExportMemoryAllocateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExportMemoryAllocateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExportMemoryAllocateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportMemoryAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExportMemoryAllocateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportMemoryAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExportMemoryAllocateInfo>())).handleTypes as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportMemoryAllocateInfo),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExportMemoryAllocateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalFenceInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalFenceHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExternalFenceInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExternalFenceInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceExternalFenceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExternalFenceInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExternalFenceInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalFenceInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalFenceInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalFenceInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalFenceInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalFenceInfo>())).handleType as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalFenceInfo),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkPhysicalDeviceExternalFenceInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalFenceProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags,
    pub compatibleHandleTypes: VkExternalFenceHandleTypeFlags,
    pub externalFenceFeatures: VkExternalFenceFeatureFlags,
}
#[test]
fn bindgen_test_layout_VkExternalFenceProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkExternalFenceProperties>(),
        32usize,
        concat!("Size of: ", stringify!(VkExternalFenceProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalFenceProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExternalFenceProperties))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkExternalFenceProperties>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalFenceProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkExternalFenceProperties>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalFenceProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalFenceProperties>())).exportFromImportedHandleTypes
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalFenceProperties),
            "::",
            stringify!(exportFromImportedHandleTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalFenceProperties>())).compatibleHandleTypes as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalFenceProperties),
            "::",
            stringify!(compatibleHandleTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalFenceProperties>())).externalFenceFeatures as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalFenceProperties),
            "::",
            stringify!(externalFenceFeatures)
        )
    );
}
impl Default for VkExternalFenceProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportFenceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalFenceHandleTypeFlags,
}
#[test]
fn bindgen_test_layout_VkExportFenceCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkExportFenceCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkExportFenceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExportFenceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExportFenceCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkExportFenceCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportFenceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkExportFenceCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportFenceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExportFenceCreateInfo>())).handleTypes as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportFenceCreateInfo),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExportFenceCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportSemaphoreCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalSemaphoreHandleTypeFlags,
}
#[test]
fn bindgen_test_layout_VkExportSemaphoreCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkExportSemaphoreCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkExportSemaphoreCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExportSemaphoreCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExportSemaphoreCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExportSemaphoreCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportSemaphoreCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExportSemaphoreCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportSemaphoreCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExportSemaphoreCreateInfo>())).handleTypes as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportSemaphoreCreateInfo),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExportSemaphoreCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalSemaphoreInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExternalSemaphoreInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExternalSemaphoreInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExternalSemaphoreInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExternalSemaphoreInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExternalSemaphoreInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalSemaphoreInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalSemaphoreInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalSemaphoreInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalSemaphoreInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalSemaphoreInfo>())).handleType as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalSemaphoreInfo),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkPhysicalDeviceExternalSemaphoreInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalSemaphoreProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    pub compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    pub externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags,
}
#[test]
fn bindgen_test_layout_VkExternalSemaphoreProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkExternalSemaphoreProperties>(),
        32usize,
        concat!("Size of: ", stringify!(VkExternalSemaphoreProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalSemaphoreProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExternalSemaphoreProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalSemaphoreProperties>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalSemaphoreProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalSemaphoreProperties>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalSemaphoreProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalSemaphoreProperties>())).exportFromImportedHandleTypes
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalSemaphoreProperties),
            "::",
            stringify!(exportFromImportedHandleTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalSemaphoreProperties>())).compatibleHandleTypes
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalSemaphoreProperties),
            "::",
            stringify!(compatibleHandleTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalSemaphoreProperties>())).externalSemaphoreFeatures
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalSemaphoreProperties),
            "::",
            stringify!(externalSemaphoreFeatures)
        )
    );
}
impl Default for VkExternalSemaphoreProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance3Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxPerSetDescriptors: u32,
    pub maxMemoryAllocationSize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMaintenance3Properties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMaintenance3Properties>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMaintenance3Properties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMaintenance3Properties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMaintenance3Properties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMaintenance3Properties>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance3Properties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMaintenance3Properties>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance3Properties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMaintenance3Properties>())).maxPerSetDescriptors
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance3Properties),
            "::",
            stringify!(maxPerSetDescriptors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMaintenance3Properties>()))
                .maxMemoryAllocationSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance3Properties),
            "::",
            stringify!(maxMemoryAllocationSize)
        )
    );
}
impl Default for VkPhysicalDeviceMaintenance3Properties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutSupport {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supported: VkBool32,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetLayoutSupport() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetLayoutSupport>(),
        24usize,
        concat!("Size of: ", stringify!(VkDescriptorSetLayoutSupport))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetLayoutSupport>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorSetLayoutSupport))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutSupport>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutSupport),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutSupport>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutSupport),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutSupport>())).supported as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutSupport),
            "::",
            stringify!(supported)
        )
    );
}
impl Default for VkDescriptorSetLayoutSupport {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderDrawParametersFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderDrawParameters: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderDrawParametersFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderDrawParametersFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderDrawParametersFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderDrawParametersFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderDrawParametersFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderDrawParametersFeatures>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderDrawParametersFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderDrawParametersFeatures>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderDrawParametersFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderDrawParametersFeatures>()))
                .shaderDrawParameters as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderDrawParametersFeatures),
            "::",
            stringify!(shaderDrawParameters)
        )
    );
}
impl Default for VkPhysicalDeviceShaderDrawParametersFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;
pub type PFN_vkEnumerateInstanceVersion =
    ::std::option::Option<unsafe extern "system" fn(pApiVersion: *mut u32) -> VkResult>;
pub type PFN_vkBindBufferMemory2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkBindImageMemory2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceGroupPeerMemoryFeatures = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    ),
>;
pub type PFN_vkCmdSetDeviceMask =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer, deviceMask: u32)>;
pub type PFN_vkCmdDispatchBase = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkEnumeratePhysicalDeviceGroups = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult,
>;
pub type PFN_vkGetImageMemoryRequirements2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetBufferMemoryRequirements2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetImageSparseMemoryRequirements2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFeatures2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFormatProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceImageFormatProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMemoryProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    ),
>;
pub type PFN_vkTrimCommandPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    ),
>;
pub type PFN_vkGetDeviceQueue2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pQueueInfo: *const VkDeviceQueueInfo2,
        pQueue: *mut VkQueue,
    ),
>;
pub type PFN_vkCreateSamplerYcbcrConversion = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult,
>;
pub type PFN_vkDestroySamplerYcbcrConversion = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateDescriptorUpdateTemplate = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorUpdateTemplate = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkUpdateDescriptorSetWithTemplate = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkGetPhysicalDeviceExternalBufferProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceExternalFenceProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    ),
>;
pub type PFN_vkGetDescriptorSetLayoutSupport = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    ),
>;
extern "system" {
    pub fn vkEnumerateInstanceVersion(pApiVersion: *mut u32) -> VkResult;
}
extern "system" {
    pub fn vkBindBufferMemory2(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult;
}
extern "system" {
    pub fn vkBindImageMemory2(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDeviceGroupPeerMemoryFeatures(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    );
}
extern "system" {
    pub fn vkCmdSetDeviceMask(commandBuffer: VkCommandBuffer, deviceMask: u32);
}
extern "system" {
    pub fn vkCmdDispatchBase(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    );
}
extern "system" {
    pub fn vkEnumeratePhysicalDeviceGroups(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetImageMemoryRequirements2(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetBufferMemoryRequirements2(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetImageSparseMemoryRequirements2(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceFeatures2(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceProperties2(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceFormatProperties2(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceImageFormatProperties2(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceQueueFamilyProperties2(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceMemoryProperties2(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceSparseImageFormatProperties2(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    );
}
extern "system" {
    pub fn vkTrimCommandPool(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    );
}
extern "system" {
    pub fn vkGetDeviceQueue2(
        device: VkDevice,
        pQueueInfo: *const VkDeviceQueueInfo2,
        pQueue: *mut VkQueue,
    );
}
extern "system" {
    pub fn vkCreateSamplerYcbcrConversion(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroySamplerYcbcrConversion(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateDescriptorUpdateTemplate(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDescriptorUpdateTemplate(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkUpdateDescriptorSetWithTemplate(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::std::os::raw::c_void,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceExternalBufferProperties(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceExternalFenceProperties(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceExternalSemaphoreProperties(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    );
}
extern "system" {
    pub fn vkGetDescriptorSetLayoutSupport(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    );
}
pub const VkDriverId_VK_DRIVER_ID_AMD_PROPRIETARY: VkDriverId = 1;
pub const VkDriverId_VK_DRIVER_ID_AMD_OPEN_SOURCE: VkDriverId = 2;
pub const VkDriverId_VK_DRIVER_ID_MESA_RADV: VkDriverId = 3;
pub const VkDriverId_VK_DRIVER_ID_NVIDIA_PROPRIETARY: VkDriverId = 4;
pub const VkDriverId_VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS: VkDriverId = 5;
pub const VkDriverId_VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA: VkDriverId = 6;
pub const VkDriverId_VK_DRIVER_ID_IMAGINATION_PROPRIETARY: VkDriverId = 7;
pub const VkDriverId_VK_DRIVER_ID_QUALCOMM_PROPRIETARY: VkDriverId = 8;
pub const VkDriverId_VK_DRIVER_ID_ARM_PROPRIETARY: VkDriverId = 9;
pub const VkDriverId_VK_DRIVER_ID_GOOGLE_SWIFTSHADER: VkDriverId = 10;
pub const VkDriverId_VK_DRIVER_ID_GGP_PROPRIETARY: VkDriverId = 11;
pub const VkDriverId_VK_DRIVER_ID_BROADCOM_PROPRIETARY: VkDriverId = 12;
pub const VkDriverId_VK_DRIVER_ID_MESA_LLVMPIPE: VkDriverId = 13;
pub const VkDriverId_VK_DRIVER_ID_MOLTENVK: VkDriverId = 14;
pub const VkDriverId_VK_DRIVER_ID_AMD_PROPRIETARY_KHR: VkDriverId = 1;
pub const VkDriverId_VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR: VkDriverId = 2;
pub const VkDriverId_VK_DRIVER_ID_MESA_RADV_KHR: VkDriverId = 3;
pub const VkDriverId_VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR: VkDriverId = 4;
pub const VkDriverId_VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR: VkDriverId = 5;
pub const VkDriverId_VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR: VkDriverId = 6;
pub const VkDriverId_VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR: VkDriverId = 7;
pub const VkDriverId_VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR: VkDriverId = 8;
pub const VkDriverId_VK_DRIVER_ID_ARM_PROPRIETARY_KHR: VkDriverId = 9;
pub const VkDriverId_VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR: VkDriverId = 10;
pub const VkDriverId_VK_DRIVER_ID_GGP_PROPRIETARY_KHR: VkDriverId = 11;
pub const VkDriverId_VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR: VkDriverId = 12;
pub const VkDriverId_VK_DRIVER_ID_MAX_ENUM: VkDriverId = 2147483647;
pub type VkDriverId = ::std::os::raw::c_uint;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY:
    VkShaderFloatControlsIndependence = 0;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL:
    VkShaderFloatControlsIndependence = 1;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE:
    VkShaderFloatControlsIndependence = 2;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR : VkShaderFloatControlsIndependence = 0 ;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR:
    VkShaderFloatControlsIndependence = 1;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR:
    VkShaderFloatControlsIndependence = 2;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM:
    VkShaderFloatControlsIndependence = 2147483647;
pub type VkShaderFloatControlsIndependence = ::std::os::raw::c_uint;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE:
    VkSamplerReductionMode = 0;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MIN: VkSamplerReductionMode = 1;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MAX: VkSamplerReductionMode = 2;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT:
    VkSamplerReductionMode = 0;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MIN_EXT: VkSamplerReductionMode = 1;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MAX_EXT: VkSamplerReductionMode = 2;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MAX_ENUM: VkSamplerReductionMode =
    2147483647;
pub type VkSamplerReductionMode = ::std::os::raw::c_uint;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_BINARY: VkSemaphoreType = 0;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_TIMELINE: VkSemaphoreType = 1;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_BINARY_KHR: VkSemaphoreType = 0;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_TIMELINE_KHR: VkSemaphoreType = 1;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_MAX_ENUM: VkSemaphoreType = 2147483647;
pub type VkSemaphoreType = ::std::os::raw::c_uint;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_NONE: VkResolveModeFlagBits = 0;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_SAMPLE_ZERO_BIT: VkResolveModeFlagBits = 1;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_AVERAGE_BIT: VkResolveModeFlagBits = 2;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_MIN_BIT: VkResolveModeFlagBits = 4;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_MAX_BIT: VkResolveModeFlagBits = 8;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_NONE_KHR: VkResolveModeFlagBits = 0;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: VkResolveModeFlagBits = 1;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_AVERAGE_BIT_KHR: VkResolveModeFlagBits = 2;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_MIN_BIT_KHR: VkResolveModeFlagBits = 4;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_MAX_BIT_KHR: VkResolveModeFlagBits = 8;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM: VkResolveModeFlagBits =
    2147483647;
pub type VkResolveModeFlagBits = ::std::os::raw::c_uint;
pub type VkResolveModeFlags = VkFlags;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT:
    VkDescriptorBindingFlagBits = 1;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT:
    VkDescriptorBindingFlagBits = 2;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT:
    VkDescriptorBindingFlagBits = 4;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT:
    VkDescriptorBindingFlagBits = 8;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT:
    VkDescriptorBindingFlagBits = 1;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT:
    VkDescriptorBindingFlagBits = 2;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT:
    VkDescriptorBindingFlagBits = 4;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT:
    VkDescriptorBindingFlagBits = 8;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM:
    VkDescriptorBindingFlagBits = 2147483647;
pub type VkDescriptorBindingFlagBits = ::std::os::raw::c_uint;
pub type VkDescriptorBindingFlags = VkFlags;
pub const VkSemaphoreWaitFlagBits_VK_SEMAPHORE_WAIT_ANY_BIT: VkSemaphoreWaitFlagBits = 1;
pub const VkSemaphoreWaitFlagBits_VK_SEMAPHORE_WAIT_ANY_BIT_KHR: VkSemaphoreWaitFlagBits = 1;
pub const VkSemaphoreWaitFlagBits_VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM: VkSemaphoreWaitFlagBits =
    2147483647;
pub type VkSemaphoreWaitFlagBits = ::std::os::raw::c_uint;
pub type VkSemaphoreWaitFlags = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan11Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub storageBuffer16BitAccess: VkBool32,
    pub uniformAndStorageBuffer16BitAccess: VkBool32,
    pub storagePushConstant16: VkBool32,
    pub storageInputOutput16: VkBool32,
    pub multiview: VkBool32,
    pub multiviewGeometryShader: VkBool32,
    pub multiviewTessellationShader: VkBool32,
    pub variablePointersStorageBuffer: VkBool32,
    pub variablePointers: VkBool32,
    pub protectedMemory: VkBool32,
    pub samplerYcbcrConversion: VkBool32,
    pub shaderDrawParameters: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVulkan11Features() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVulkan11Features>(),
        64usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceVulkan11Features))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVulkan11Features>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVulkan11Features)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>())).storageBuffer16BitAccess
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(storageBuffer16BitAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>()))
                .uniformAndStorageBuffer16BitAccess as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(uniformAndStorageBuffer16BitAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>())).storagePushConstant16
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(storagePushConstant16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>())).storageInputOutput16
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(storageInputOutput16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>())).multiview as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(multiview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>())).multiviewGeometryShader
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(multiviewGeometryShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>())).multiviewTessellationShader
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(multiviewTessellationShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>()))
                .variablePointersStorageBuffer as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(variablePointersStorageBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>())).variablePointers
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(variablePointers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>())).protectedMemory as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(protectedMemory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>())).samplerYcbcrConversion
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(samplerYcbcrConversion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Features>())).shaderDrawParameters
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(shaderDrawParameters)
        )
    );
}
impl Default for VkPhysicalDeviceVulkan11Features {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan11Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceUUID: [u8; 16usize],
    pub driverUUID: [u8; 16usize],
    pub deviceLUID: [u8; 8usize],
    pub deviceNodeMask: u32,
    pub deviceLUIDValid: VkBool32,
    pub subgroupSize: u32,
    pub subgroupSupportedStages: VkShaderStageFlags,
    pub subgroupSupportedOperations: VkSubgroupFeatureFlags,
    pub subgroupQuadOperationsInAllStages: VkBool32,
    pub pointClippingBehavior: VkPointClippingBehavior,
    pub maxMultiviewViewCount: u32,
    pub maxMultiviewInstanceIndex: u32,
    pub protectedNoFault: VkBool32,
    pub maxPerSetDescriptors: u32,
    pub maxMemoryAllocationSize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVulkan11Properties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVulkan11Properties>(),
        112usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceVulkan11Properties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVulkan11Properties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVulkan11Properties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).deviceUUID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(deviceUUID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).driverUUID as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(driverUUID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).deviceLUID as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(deviceLUID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).deviceNodeMask
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(deviceNodeMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).deviceLUIDValid
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(deviceLUIDValid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).subgroupSize as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(subgroupSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).subgroupSupportedStages
                as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(subgroupSupportedStages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>()))
                .subgroupSupportedOperations as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(subgroupSupportedOperations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>()))
                .subgroupQuadOperationsInAllStages as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(subgroupQuadOperationsInAllStages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).pointClippingBehavior
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(pointClippingBehavior)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).maxMultiviewViewCount
                as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(maxMultiviewViewCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).maxMultiviewInstanceIndex
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(maxMultiviewInstanceIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).protectedNoFault
                as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(protectedNoFault)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).maxPerSetDescriptors
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(maxPerSetDescriptors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan11Properties>())).maxMemoryAllocationSize
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(maxMemoryAllocationSize)
        )
    );
}
impl Default for VkPhysicalDeviceVulkan11Properties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan12Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub samplerMirrorClampToEdge: VkBool32,
    pub drawIndirectCount: VkBool32,
    pub storageBuffer8BitAccess: VkBool32,
    pub uniformAndStorageBuffer8BitAccess: VkBool32,
    pub storagePushConstant8: VkBool32,
    pub shaderBufferInt64Atomics: VkBool32,
    pub shaderSharedInt64Atomics: VkBool32,
    pub shaderFloat16: VkBool32,
    pub shaderInt8: VkBool32,
    pub descriptorIndexing: VkBool32,
    pub shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexing: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexing: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    pub descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUpdateUnusedWhilePending: VkBool32,
    pub descriptorBindingPartiallyBound: VkBool32,
    pub descriptorBindingVariableDescriptorCount: VkBool32,
    pub runtimeDescriptorArray: VkBool32,
    pub samplerFilterMinmax: VkBool32,
    pub scalarBlockLayout: VkBool32,
    pub imagelessFramebuffer: VkBool32,
    pub uniformBufferStandardLayout: VkBool32,
    pub shaderSubgroupExtendedTypes: VkBool32,
    pub separateDepthStencilLayouts: VkBool32,
    pub hostQueryReset: VkBool32,
    pub timelineSemaphore: VkBool32,
    pub bufferDeviceAddress: VkBool32,
    pub bufferDeviceAddressCaptureReplay: VkBool32,
    pub bufferDeviceAddressMultiDevice: VkBool32,
    pub vulkanMemoryModel: VkBool32,
    pub vulkanMemoryModelDeviceScope: VkBool32,
    pub vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
    pub shaderOutputViewportIndex: VkBool32,
    pub shaderOutputLayer: VkBool32,
    pub subgroupBroadcastDynamicId: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVulkan12Features() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVulkan12Features>(),
        208usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceVulkan12Features))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVulkan12Features>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVulkan12Features)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).samplerMirrorClampToEdge
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(samplerMirrorClampToEdge)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).drawIndirectCount
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(drawIndirectCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).storageBuffer8BitAccess
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(storageBuffer8BitAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .uniformAndStorageBuffer8BitAccess as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(uniformAndStorageBuffer8BitAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).storagePushConstant8
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(storagePushConstant8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).shaderBufferInt64Atomics
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderBufferInt64Atomics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).shaderSharedInt64Atomics
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderSharedInt64Atomics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).shaderFloat16 as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderFloat16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).shaderInt8 as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderInt8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).descriptorIndexing
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .shaderInputAttachmentArrayDynamicIndexing as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderInputAttachmentArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .shaderUniformTexelBufferArrayDynamicIndexing as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderUniformTexelBufferArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .shaderStorageTexelBufferArrayDynamicIndexing as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderStorageTexelBufferArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .shaderUniformBufferArrayNonUniformIndexing as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderUniformBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .shaderSampledImageArrayNonUniformIndexing as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderSampledImageArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .shaderStorageBufferArrayNonUniformIndexing as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderStorageBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .shaderStorageImageArrayNonUniformIndexing as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderStorageImageArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .shaderInputAttachmentArrayNonUniformIndexing as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderInputAttachmentArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .shaderUniformTexelBufferArrayNonUniformIndexing as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderUniformTexelBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .shaderStorageTexelBufferArrayNonUniformIndexing as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderStorageTexelBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .descriptorBindingUniformBufferUpdateAfterBind as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingUniformBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .descriptorBindingSampledImageUpdateAfterBind as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingSampledImageUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .descriptorBindingStorageImageUpdateAfterBind as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingStorageImageUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .descriptorBindingStorageBufferUpdateAfterBind as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingStorageBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .descriptorBindingUniformTexelBufferUpdateAfterBind as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingUniformTexelBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .descriptorBindingStorageTexelBufferUpdateAfterBind as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingStorageTexelBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .descriptorBindingUpdateUnusedWhilePending as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingUpdateUnusedWhilePending)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .descriptorBindingPartiallyBound as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingPartiallyBound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .descriptorBindingVariableDescriptorCount as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingVariableDescriptorCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).runtimeDescriptorArray
                as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(runtimeDescriptorArray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).samplerFilterMinmax
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(samplerFilterMinmax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).scalarBlockLayout
                as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(scalarBlockLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).imagelessFramebuffer
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(imagelessFramebuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).uniformBufferStandardLayout
                as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(uniformBufferStandardLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).shaderSubgroupExtendedTypes
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderSubgroupExtendedTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).separateDepthStencilLayouts
                as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(separateDepthStencilLayouts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).hostQueryReset as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(hostQueryReset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).timelineSemaphore
                as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(timelineSemaphore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).bufferDeviceAddress
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(bufferDeviceAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .bufferDeviceAddressCaptureReplay as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(bufferDeviceAddressCaptureReplay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .bufferDeviceAddressMultiDevice as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(bufferDeviceAddressMultiDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).vulkanMemoryModel
                as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(vulkanMemoryModel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .vulkanMemoryModelDeviceScope as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(vulkanMemoryModelDeviceScope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>()))
                .vulkanMemoryModelAvailabilityVisibilityChains as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(vulkanMemoryModelAvailabilityVisibilityChains)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).shaderOutputViewportIndex
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderOutputViewportIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).shaderOutputLayer
                as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderOutputLayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Features>())).subgroupBroadcastDynamicId
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(subgroupBroadcastDynamicId)
        )
    );
}
impl Default for VkPhysicalDeviceVulkan12Features {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkConformanceVersion {
    pub major: u8,
    pub minor: u8,
    pub subminor: u8,
    pub patch: u8,
}
#[test]
fn bindgen_test_layout_VkConformanceVersion() {
    assert_eq!(
        ::std::mem::size_of::<VkConformanceVersion>(),
        4usize,
        concat!("Size of: ", stringify!(VkConformanceVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<VkConformanceVersion>(),
        1usize,
        concat!("Alignment of ", stringify!(VkConformanceVersion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkConformanceVersion>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConformanceVersion),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkConformanceVersion>())).minor as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConformanceVersion),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkConformanceVersion>())).subminor as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConformanceVersion),
            "::",
            stringify!(subminor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkConformanceVersion>())).patch as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConformanceVersion),
            "::",
            stringify!(patch)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan12Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub driverID: VkDriverId,
    pub driverName: [::std::os::raw::c_char; 256usize],
    pub driverInfo: [::std::os::raw::c_char; 256usize],
    pub conformanceVersion: VkConformanceVersion,
    pub denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    pub roundingModeIndependence: VkShaderFloatControlsIndependence,
    pub shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    pub shaderDenormPreserveFloat16: VkBool32,
    pub shaderDenormPreserveFloat32: VkBool32,
    pub shaderDenormPreserveFloat64: VkBool32,
    pub shaderDenormFlushToZeroFloat16: VkBool32,
    pub shaderDenormFlushToZeroFloat32: VkBool32,
    pub shaderDenormFlushToZeroFloat64: VkBool32,
    pub shaderRoundingModeRTEFloat16: VkBool32,
    pub shaderRoundingModeRTEFloat32: VkBool32,
    pub shaderRoundingModeRTEFloat64: VkBool32,
    pub shaderRoundingModeRTZFloat16: VkBool32,
    pub shaderRoundingModeRTZFloat32: VkBool32,
    pub shaderRoundingModeRTZFloat64: VkBool32,
    pub maxUpdateAfterBindDescriptorsInAllPools: u32,
    pub shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    pub robustBufferAccessUpdateAfterBind: VkBool32,
    pub quadDivergentImplicitLod: VkBool32,
    pub maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    pub maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    pub maxPerStageUpdateAfterBindResources: u32,
    pub maxDescriptorSetUpdateAfterBindSamplers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindSampledImages: u32,
    pub maxDescriptorSetUpdateAfterBindStorageImages: u32,
    pub maxDescriptorSetUpdateAfterBindInputAttachments: u32,
    pub supportedDepthResolveModes: VkResolveModeFlags,
    pub supportedStencilResolveModes: VkResolveModeFlags,
    pub independentResolveNone: VkBool32,
    pub independentResolve: VkBool32,
    pub filterMinmaxSingleComponentFormats: VkBool32,
    pub filterMinmaxImageComponentMapping: VkBool32,
    pub maxTimelineSemaphoreValueDifference: u64,
    pub framebufferIntegerColorSampleCounts: VkSampleCountFlags,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVulkan12Properties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVulkan12Properties>(),
        736usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceVulkan12Properties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVulkan12Properties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVulkan12Properties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>())).driverID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(driverID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>())).driverName as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(driverName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>())).driverInfo as *const _
                as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(driverInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>())).conformanceVersion
                as *const _ as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(conformanceVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .denormBehaviorIndependence as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(denormBehaviorIndependence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>())).roundingModeIndependence
                as *const _ as usize
        },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(roundingModeIndependence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderSignedZeroInfNanPreserveFloat16 as *const _ as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderSignedZeroInfNanPreserveFloat16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderSignedZeroInfNanPreserveFloat32 as *const _ as usize
        },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderSignedZeroInfNanPreserveFloat32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderSignedZeroInfNanPreserveFloat64 as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderSignedZeroInfNanPreserveFloat64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderDenormPreserveFloat16 as *const _ as usize
        },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderDenormPreserveFloat16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderDenormPreserveFloat32 as *const _ as usize
        },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderDenormPreserveFloat32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderDenormPreserveFloat64 as *const _ as usize
        },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderDenormPreserveFloat64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderDenormFlushToZeroFloat16 as *const _ as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderDenormFlushToZeroFloat16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderDenormFlushToZeroFloat32 as *const _ as usize
        },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderDenormFlushToZeroFloat32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderDenormFlushToZeroFloat64 as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderDenormFlushToZeroFloat64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderRoundingModeRTEFloat16 as *const _ as usize
        },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderRoundingModeRTEFloat16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderRoundingModeRTEFloat32 as *const _ as usize
        },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderRoundingModeRTEFloat32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderRoundingModeRTEFloat64 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderRoundingModeRTEFloat64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderRoundingModeRTZFloat16 as *const _ as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderRoundingModeRTZFloat16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderRoundingModeRTZFloat32 as *const _ as usize
        },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderRoundingModeRTZFloat32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderRoundingModeRTZFloat64 as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderRoundingModeRTZFloat64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxUpdateAfterBindDescriptorsInAllPools as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxUpdateAfterBindDescriptorsInAllPools)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderUniformBufferArrayNonUniformIndexingNative as *const _ as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderUniformBufferArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderSampledImageArrayNonUniformIndexingNative as *const _ as usize
        },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderSampledImageArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderStorageBufferArrayNonUniformIndexingNative as *const _ as usize
        },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderStorageBufferArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderStorageImageArrayNonUniformIndexingNative as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderStorageImageArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .shaderInputAttachmentArrayNonUniformIndexingNative as *const _ as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderInputAttachmentArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .robustBufferAccessUpdateAfterBind as *const _ as usize
        },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(robustBufferAccessUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>())).quadDivergentImplicitLod
                as *const _ as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(quadDivergentImplicitLod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxPerStageDescriptorUpdateAfterBindSamplers as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindSamplers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxPerStageDescriptorUpdateAfterBindUniformBuffers as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindUniformBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxPerStageDescriptorUpdateAfterBindStorageBuffers as *const _ as usize
        },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindStorageBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxPerStageDescriptorUpdateAfterBindSampledImages as *const _ as usize
        },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindSampledImages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxPerStageDescriptorUpdateAfterBindStorageImages as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindStorageImages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxPerStageDescriptorUpdateAfterBindInputAttachments as *const _
                as usize
        },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindInputAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxPerStageUpdateAfterBindResources as *const _ as usize
        },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageUpdateAfterBindResources)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxDescriptorSetUpdateAfterBindSamplers as *const _ as usize
        },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindSamplers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxDescriptorSetUpdateAfterBindUniformBuffers as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindUniformBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxDescriptorSetUpdateAfterBindUniformBuffersDynamic as *const _
                as usize
        },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxDescriptorSetUpdateAfterBindStorageBuffers as *const _ as usize
        },
        676usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindStorageBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxDescriptorSetUpdateAfterBindStorageBuffersDynamic as *const _
                as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxDescriptorSetUpdateAfterBindSampledImages as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindSampledImages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxDescriptorSetUpdateAfterBindStorageImages as *const _ as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindStorageImages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxDescriptorSetUpdateAfterBindInputAttachments as *const _ as usize
        },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindInputAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .supportedDepthResolveModes as *const _ as usize
        },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(supportedDepthResolveModes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .supportedStencilResolveModes as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(supportedStencilResolveModes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>())).independentResolveNone
                as *const _ as usize
        },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(independentResolveNone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>())).independentResolve
                as *const _ as usize
        },
        708usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(independentResolve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .filterMinmaxSingleComponentFormats as *const _ as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(filterMinmaxSingleComponentFormats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .filterMinmaxImageComponentMapping as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(filterMinmaxImageComponentMapping)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .maxTimelineSemaphoreValueDifference as *const _ as usize
        },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxTimelineSemaphoreValueDifference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkan12Properties>()))
                .framebufferIntegerColorSampleCounts as *const _ as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(framebufferIntegerColorSampleCounts)
        )
    );
}
impl Default for VkPhysicalDeviceVulkan12Properties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageFormatListCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub viewFormatCount: u32,
    pub pViewFormats: *const VkFormat,
}
#[test]
fn bindgen_test_layout_VkImageFormatListCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkImageFormatListCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkImageFormatListCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageFormatListCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageFormatListCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageFormatListCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatListCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageFormatListCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatListCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageFormatListCreateInfo>())).viewFormatCount as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatListCreateInfo),
            "::",
            stringify!(viewFormatCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageFormatListCreateInfo>())).pViewFormats as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatListCreateInfo),
            "::",
            stringify!(pViewFormats)
        )
    );
}
impl Default for VkImageFormatListCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescription2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkAttachmentDescriptionFlags,
    pub format: VkFormat,
    pub samples: VkSampleCountFlagBits,
    pub loadOp: VkAttachmentLoadOp,
    pub storeOp: VkAttachmentStoreOp,
    pub stencilLoadOp: VkAttachmentLoadOp,
    pub stencilStoreOp: VkAttachmentStoreOp,
    pub initialLayout: VkImageLayout,
    pub finalLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkAttachmentDescription2() {
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentDescription2>(),
        56usize,
        concat!("Size of: ", stringify!(VkAttachmentDescription2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentDescription2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAttachmentDescription2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentDescription2>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentDescription2>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentDescription2>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentDescription2>())).format as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescription2>())).samples as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentDescription2>())).loadOp as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(loadOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescription2>())).storeOp as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(storeOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescription2>())).stencilLoadOp as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(stencilLoadOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescription2>())).stencilStoreOp as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(stencilStoreOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescription2>())).initialLayout as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(initialLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescription2>())).finalLayout as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(finalLayout)
        )
    );
}
impl Default for VkAttachmentDescription2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReference2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachment: u32,
    pub layout: VkImageLayout,
    pub aspectMask: VkImageAspectFlags,
}
#[test]
fn bindgen_test_layout_VkAttachmentReference2() {
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentReference2>(),
        32usize,
        concat!("Size of: ", stringify!(VkAttachmentReference2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentReference2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAttachmentReference2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentReference2>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentReference2>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentReference2>())).attachment as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference2),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAttachmentReference2>())).layout as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference2),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentReference2>())).aspectMask as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference2),
            "::",
            stringify!(aspectMask)
        )
    );
}
impl Default for VkAttachmentReference2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescription2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSubpassDescriptionFlags,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub viewMask: u32,
    pub inputAttachmentCount: u32,
    pub pInputAttachments: *const VkAttachmentReference2,
    pub colorAttachmentCount: u32,
    pub pColorAttachments: *const VkAttachmentReference2,
    pub pResolveAttachments: *const VkAttachmentReference2,
    pub pDepthStencilAttachment: *const VkAttachmentReference2,
    pub preserveAttachmentCount: u32,
    pub pPreserveAttachments: *const u32,
}
#[test]
fn bindgen_test_layout_VkSubpassDescription2() {
    assert_eq!(
        ::std::mem::size_of::<VkSubpassDescription2>(),
        88usize,
        concat!("Size of: ", stringify!(VkSubpassDescription2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassDescription2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubpassDescription2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassDescription2>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassDescription2>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassDescription2>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription2>())).pipelineBindPoint as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pipelineBindPoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassDescription2>())).viewMask as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(viewMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription2>())).inputAttachmentCount as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(inputAttachmentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription2>())).pInputAttachments as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pInputAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription2>())).colorAttachmentCount as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(colorAttachmentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription2>())).pColorAttachments as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pColorAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription2>())).pResolveAttachments as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pResolveAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription2>())).pDepthStencilAttachment as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pDepthStencilAttachment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription2>())).preserveAttachmentCount as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(preserveAttachmentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescription2>())).pPreserveAttachments as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pPreserveAttachments)
        )
    );
}
impl Default for VkSubpassDescription2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDependency2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcSubpass: u32,
    pub dstSubpass: u32,
    pub srcStageMask: VkPipelineStageFlags,
    pub dstStageMask: VkPipelineStageFlags,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub dependencyFlags: VkDependencyFlags,
    pub viewOffset: i32,
}
#[test]
fn bindgen_test_layout_VkSubpassDependency2() {
    assert_eq!(
        ::std::mem::size_of::<VkSubpassDependency2>(),
        48usize,
        concat!("Size of: ", stringify!(VkSubpassDependency2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassDependency2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubpassDependency2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassDependency2>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassDependency2>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassDependency2>())).srcSubpass as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(srcSubpass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassDependency2>())).dstSubpass as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(dstSubpass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDependency2>())).srcStageMask as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(srcStageMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDependency2>())).dstStageMask as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(dstStageMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDependency2>())).srcAccessMask as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(srcAccessMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDependency2>())).dstAccessMask as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(dstAccessMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDependency2>())).dependencyFlags as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(dependencyFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassDependency2>())).viewOffset as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(viewOffset)
        )
    );
}
impl Default for VkSubpassDependency2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassCreateInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkRenderPassCreateFlags,
    pub attachmentCount: u32,
    pub pAttachments: *const VkAttachmentDescription2,
    pub subpassCount: u32,
    pub pSubpasses: *const VkSubpassDescription2,
    pub dependencyCount: u32,
    pub pDependencies: *const VkSubpassDependency2,
    pub correlatedViewMaskCount: u32,
    pub pCorrelatedViewMasks: *const u32,
}
#[test]
fn bindgen_test_layout_VkRenderPassCreateInfo2() {
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassCreateInfo2>(),
        80usize,
        concat!("Size of: ", stringify!(VkRenderPassCreateInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassCreateInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRenderPassCreateInfo2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkRenderPassCreateInfo2>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkRenderPassCreateInfo2>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkRenderPassCreateInfo2>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo2>())).attachmentCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(attachmentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo2>())).pAttachments as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(pAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo2>())).subpassCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(subpassCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo2>())).pSubpasses as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(pSubpasses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo2>())).dependencyCount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(dependencyCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo2>())).pDependencies as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo2>())).correlatedViewMaskCount as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(correlatedViewMaskCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassCreateInfo2>())).pCorrelatedViewMasks as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(pCorrelatedViewMasks)
        )
    );
}
impl Default for VkRenderPassCreateInfo2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub contents: VkSubpassContents,
}
#[test]
fn bindgen_test_layout_VkSubpassBeginInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSubpassBeginInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSubpassBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassBeginInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubpassBeginInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassBeginInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassBeginInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassBeginInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassBeginInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassBeginInfo>())).contents as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassBeginInfo),
            "::",
            stringify!(contents)
        )
    );
}
impl Default for VkSubpassBeginInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassEndInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkSubpassEndInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSubpassEndInfo>(),
        16usize,
        concat!("Size of: ", stringify!(VkSubpassEndInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassEndInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubpassEndInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassEndInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassEndInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSubpassEndInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassEndInfo),
            "::",
            stringify!(pNext)
        )
    );
}
impl Default for VkSubpassEndInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice8BitStorageFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub storageBuffer8BitAccess: VkBool32,
    pub uniformAndStorageBuffer8BitAccess: VkBool32,
    pub storagePushConstant8: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevice8BitStorageFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevice8BitStorageFeatures>(),
        32usize,
        concat!("Size of: ", stringify!(VkPhysicalDevice8BitStorageFeatures))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevice8BitStorageFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevice8BitStorageFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevice8BitStorageFeatures>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice8BitStorageFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevice8BitStorageFeatures>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice8BitStorageFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevice8BitStorageFeatures>())).storageBuffer8BitAccess
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice8BitStorageFeatures),
            "::",
            stringify!(storageBuffer8BitAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevice8BitStorageFeatures>()))
                .uniformAndStorageBuffer8BitAccess as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice8BitStorageFeatures),
            "::",
            stringify!(uniformAndStorageBuffer8BitAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevice8BitStorageFeatures>())).storagePushConstant8
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice8BitStorageFeatures),
            "::",
            stringify!(storagePushConstant8)
        )
    );
}
impl Default for VkPhysicalDevice8BitStorageFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDriverProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub driverID: VkDriverId,
    pub driverName: [::std::os::raw::c_char; 256usize],
    pub driverInfo: [::std::os::raw::c_char; 256usize],
    pub conformanceVersion: VkConformanceVersion,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDriverProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDriverProperties>(),
        536usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceDriverProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDriverProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDriverProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDriverProperties>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDriverProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDriverProperties>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDriverProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDriverProperties>())).driverID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDriverProperties),
            "::",
            stringify!(driverID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDriverProperties>())).driverName as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDriverProperties),
            "::",
            stringify!(driverName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDriverProperties>())).driverInfo as *const _
                as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDriverProperties),
            "::",
            stringify!(driverInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDriverProperties>())).conformanceVersion
                as *const _ as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDriverProperties),
            "::",
            stringify!(conformanceVersion)
        )
    );
}
impl Default for VkPhysicalDeviceDriverProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicInt64Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderBufferInt64Atomics: VkBool32,
    pub shaderSharedInt64Atomics: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderAtomicInt64Features() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderAtomicInt64Features>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderAtomicInt64Features)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderAtomicInt64Features>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderAtomicInt64Features)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicInt64Features>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicInt64Features),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicInt64Features>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicInt64Features),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicInt64Features>()))
                .shaderBufferInt64Atomics as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicInt64Features),
            "::",
            stringify!(shaderBufferInt64Atomics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicInt64Features>()))
                .shaderSharedInt64Atomics as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicInt64Features),
            "::",
            stringify!(shaderSharedInt64Atomics)
        )
    );
}
impl Default for VkPhysicalDeviceShaderAtomicInt64Features {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderFloat16Int8Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderFloat16: VkBool32,
    pub shaderInt8: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderFloat16Int8Features() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderFloat16Int8Features>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderFloat16Int8Features)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderFloat16Int8Features>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderFloat16Int8Features)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderFloat16Int8Features>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderFloat16Int8Features),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderFloat16Int8Features>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderFloat16Int8Features),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderFloat16Int8Features>())).shaderFloat16
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderFloat16Int8Features),
            "::",
            stringify!(shaderFloat16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderFloat16Int8Features>())).shaderInt8
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderFloat16Int8Features),
            "::",
            stringify!(shaderInt8)
        )
    );
}
impl Default for VkPhysicalDeviceShaderFloat16Int8Features {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFloatControlsProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    pub roundingModeIndependence: VkShaderFloatControlsIndependence,
    pub shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    pub shaderDenormPreserveFloat16: VkBool32,
    pub shaderDenormPreserveFloat32: VkBool32,
    pub shaderDenormPreserveFloat64: VkBool32,
    pub shaderDenormFlushToZeroFloat16: VkBool32,
    pub shaderDenormFlushToZeroFloat32: VkBool32,
    pub shaderDenormFlushToZeroFloat64: VkBool32,
    pub shaderRoundingModeRTEFloat16: VkBool32,
    pub shaderRoundingModeRTEFloat32: VkBool32,
    pub shaderRoundingModeRTEFloat64: VkBool32,
    pub shaderRoundingModeRTZFloat16: VkBool32,
    pub shaderRoundingModeRTZFloat32: VkBool32,
    pub shaderRoundingModeRTZFloat64: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFloatControlsProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFloatControlsProperties>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFloatControlsProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFloatControlsProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .denormBehaviorIndependence as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(denormBehaviorIndependence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .roundingModeIndependence as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(roundingModeIndependence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderSignedZeroInfNanPreserveFloat16 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderSignedZeroInfNanPreserveFloat16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderSignedZeroInfNanPreserveFloat32 as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderSignedZeroInfNanPreserveFloat32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderSignedZeroInfNanPreserveFloat64 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderSignedZeroInfNanPreserveFloat64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderDenormPreserveFloat16 as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderDenormPreserveFloat16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderDenormPreserveFloat32 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderDenormPreserveFloat32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderDenormPreserveFloat64 as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderDenormPreserveFloat64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderDenormFlushToZeroFloat16 as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderDenormFlushToZeroFloat16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderDenormFlushToZeroFloat32 as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderDenormFlushToZeroFloat32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderDenormFlushToZeroFloat64 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderDenormFlushToZeroFloat64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderRoundingModeRTEFloat16 as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderRoundingModeRTEFloat16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderRoundingModeRTEFloat32 as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderRoundingModeRTEFloat32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderRoundingModeRTEFloat64 as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderRoundingModeRTEFloat64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderRoundingModeRTZFloat16 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderRoundingModeRTZFloat16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderRoundingModeRTZFloat32 as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderRoundingModeRTZFloat32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFloatControlsProperties>()))
                .shaderRoundingModeRTZFloat64 as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderRoundingModeRTZFloat64)
        )
    );
}
impl Default for VkPhysicalDeviceFloatControlsProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub bindingCount: u32,
    pub pBindingFlags: *const VkDescriptorBindingFlags,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetLayoutBindingFlagsCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetLayoutBindingFlagsCreateInfo>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorSetLayoutBindingFlagsCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetLayoutBindingFlagsCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorSetLayoutBindingFlagsCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutBindingFlagsCreateInfo>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBindingFlagsCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutBindingFlagsCreateInfo>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBindingFlagsCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutBindingFlagsCreateInfo>())).bindingCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBindingFlagsCreateInfo),
            "::",
            stringify!(bindingCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetLayoutBindingFlagsCreateInfo>())).pBindingFlags
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBindingFlagsCreateInfo),
            "::",
            stringify!(pBindingFlags)
        )
    );
}
impl Default for VkDescriptorSetLayoutBindingFlagsCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorIndexingFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexing: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexing: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    pub descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUpdateUnusedWhilePending: VkBool32,
    pub descriptorBindingPartiallyBound: VkBool32,
    pub descriptorBindingVariableDescriptorCount: VkBool32,
    pub runtimeDescriptorArray: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDescriptorIndexingFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDescriptorIndexingFeatures>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDescriptorIndexingFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .shaderInputAttachmentArrayDynamicIndexing as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderInputAttachmentArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .shaderUniformTexelBufferArrayDynamicIndexing as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderUniformTexelBufferArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .shaderStorageTexelBufferArrayDynamicIndexing as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderStorageTexelBufferArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .shaderUniformBufferArrayNonUniformIndexing as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderUniformBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .shaderSampledImageArrayNonUniformIndexing as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderSampledImageArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .shaderStorageBufferArrayNonUniformIndexing as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderStorageBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .shaderStorageImageArrayNonUniformIndexing as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderStorageImageArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .shaderInputAttachmentArrayNonUniformIndexing as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderInputAttachmentArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .shaderUniformTexelBufferArrayNonUniformIndexing as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderUniformTexelBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .shaderStorageTexelBufferArrayNonUniformIndexing as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderStorageTexelBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .descriptorBindingUniformBufferUpdateAfterBind as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingUniformBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .descriptorBindingSampledImageUpdateAfterBind as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingSampledImageUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .descriptorBindingStorageImageUpdateAfterBind as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingStorageImageUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .descriptorBindingStorageBufferUpdateAfterBind as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingStorageBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .descriptorBindingUniformTexelBufferUpdateAfterBind as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingUniformTexelBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .descriptorBindingStorageTexelBufferUpdateAfterBind as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingStorageTexelBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .descriptorBindingUpdateUnusedWhilePending as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingUpdateUnusedWhilePending)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .descriptorBindingPartiallyBound as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingPartiallyBound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .descriptorBindingVariableDescriptorCount as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingVariableDescriptorCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingFeatures>()))
                .runtimeDescriptorArray as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(runtimeDescriptorArray)
        )
    );
}
impl Default for VkPhysicalDeviceDescriptorIndexingFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorIndexingProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxUpdateAfterBindDescriptorsInAllPools: u32,
    pub shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    pub robustBufferAccessUpdateAfterBind: VkBool32,
    pub quadDivergentImplicitLod: VkBool32,
    pub maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    pub maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    pub maxPerStageUpdateAfterBindResources: u32,
    pub maxDescriptorSetUpdateAfterBindSamplers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindSampledImages: u32,
    pub maxDescriptorSetUpdateAfterBindStorageImages: u32,
    pub maxDescriptorSetUpdateAfterBindInputAttachments: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDescriptorIndexingProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDescriptorIndexingProperties>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDescriptorIndexingProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxUpdateAfterBindDescriptorsInAllPools as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxUpdateAfterBindDescriptorsInAllPools)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .shaderUniformBufferArrayNonUniformIndexingNative as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(shaderUniformBufferArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .shaderSampledImageArrayNonUniformIndexingNative as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(shaderSampledImageArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .shaderStorageBufferArrayNonUniformIndexingNative as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(shaderStorageBufferArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .shaderStorageImageArrayNonUniformIndexingNative as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(shaderStorageImageArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .shaderInputAttachmentArrayNonUniformIndexingNative as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(shaderInputAttachmentArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .robustBufferAccessUpdateAfterBind as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(robustBufferAccessUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .quadDivergentImplicitLod as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(quadDivergentImplicitLod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxPerStageDescriptorUpdateAfterBindSamplers as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindSamplers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxPerStageDescriptorUpdateAfterBindUniformBuffers as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindUniformBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxPerStageDescriptorUpdateAfterBindStorageBuffers as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindStorageBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxPerStageDescriptorUpdateAfterBindSampledImages as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindSampledImages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxPerStageDescriptorUpdateAfterBindStorageImages as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindStorageImages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxPerStageDescriptorUpdateAfterBindInputAttachments as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindInputAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxPerStageUpdateAfterBindResources as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageUpdateAfterBindResources)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxDescriptorSetUpdateAfterBindSamplers as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindSamplers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxDescriptorSetUpdateAfterBindUniformBuffers as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindUniformBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxDescriptorSetUpdateAfterBindUniformBuffersDynamic as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxDescriptorSetUpdateAfterBindStorageBuffers as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindStorageBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxDescriptorSetUpdateAfterBindStorageBuffersDynamic as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxDescriptorSetUpdateAfterBindSampledImages as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindSampledImages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxDescriptorSetUpdateAfterBindStorageImages as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindStorageImages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDescriptorIndexingProperties>()))
                .maxDescriptorSetUpdateAfterBindInputAttachments as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindInputAttachments)
        )
    );
}
impl Default for VkPhysicalDeviceDescriptorIndexingProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub descriptorSetCount: u32,
    pub pDescriptorCounts: *const u32,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetVariableDescriptorCountAllocateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetVariableDescriptorCountAllocateInfo>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorSetVariableDescriptorCountAllocateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetVariableDescriptorCountAllocateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorSetVariableDescriptorCountAllocateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetVariableDescriptorCountAllocateInfo>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetVariableDescriptorCountAllocateInfo>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetVariableDescriptorCountAllocateInfo>()))
                .descriptorSetCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountAllocateInfo),
            "::",
            stringify!(descriptorSetCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetVariableDescriptorCountAllocateInfo>()))
                .pDescriptorCounts as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountAllocateInfo),
            "::",
            stringify!(pDescriptorCounts)
        )
    );
}
impl Default for VkDescriptorSetVariableDescriptorCountAllocateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxVariableDescriptorCount: u32,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetVariableDescriptorCountLayoutSupport() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetVariableDescriptorCountLayoutSupport>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorSetVariableDescriptorCountLayoutSupport)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetVariableDescriptorCountLayoutSupport>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorSetVariableDescriptorCountLayoutSupport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetVariableDescriptorCountLayoutSupport>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountLayoutSupport),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetVariableDescriptorCountLayoutSupport>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountLayoutSupport),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorSetVariableDescriptorCountLayoutSupport>()))
                .maxVariableDescriptorCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountLayoutSupport),
            "::",
            stringify!(maxVariableDescriptorCount)
        )
    );
}
impl Default for VkDescriptorSetVariableDescriptorCountLayoutSupport {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescriptionDepthStencilResolve {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub depthResolveMode: VkResolveModeFlagBits,
    pub stencilResolveMode: VkResolveModeFlagBits,
    pub pDepthStencilResolveAttachment: *const VkAttachmentReference2,
}
#[test]
fn bindgen_test_layout_VkSubpassDescriptionDepthStencilResolve() {
    assert_eq!(
        ::std::mem::size_of::<VkSubpassDescriptionDepthStencilResolve>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkSubpassDescriptionDepthStencilResolve)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassDescriptionDepthStencilResolve>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSubpassDescriptionDepthStencilResolve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescriptionDepthStencilResolve>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescriptionDepthStencilResolve),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescriptionDepthStencilResolve>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescriptionDepthStencilResolve),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescriptionDepthStencilResolve>())).depthResolveMode
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescriptionDepthStencilResolve),
            "::",
            stringify!(depthResolveMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescriptionDepthStencilResolve>())).stencilResolveMode
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescriptionDepthStencilResolve),
            "::",
            stringify!(stencilResolveMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassDescriptionDepthStencilResolve>()))
                .pDepthStencilResolveAttachment as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescriptionDepthStencilResolve),
            "::",
            stringify!(pDepthStencilResolveAttachment)
        )
    );
}
impl Default for VkSubpassDescriptionDepthStencilResolve {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDepthStencilResolveProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supportedDepthResolveModes: VkResolveModeFlags,
    pub supportedStencilResolveModes: VkResolveModeFlags,
    pub independentResolveNone: VkBool32,
    pub independentResolve: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDepthStencilResolveProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDepthStencilResolveProperties>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDepthStencilResolveProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDepthStencilResolveProperties>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDepthStencilResolveProperties>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDepthStencilResolveProperties>()))
                .supportedDepthResolveModes as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties),
            "::",
            stringify!(supportedDepthResolveModes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDepthStencilResolveProperties>()))
                .supportedStencilResolveModes as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties),
            "::",
            stringify!(supportedStencilResolveModes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDepthStencilResolveProperties>()))
                .independentResolveNone as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties),
            "::",
            stringify!(independentResolveNone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDepthStencilResolveProperties>()))
                .independentResolve as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties),
            "::",
            stringify!(independentResolve)
        )
    );
}
impl Default for VkPhysicalDeviceDepthStencilResolveProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceScalarBlockLayoutFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub scalarBlockLayout: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceScalarBlockLayoutFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceScalarBlockLayoutFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceScalarBlockLayoutFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceScalarBlockLayoutFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceScalarBlockLayoutFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceScalarBlockLayoutFeatures>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceScalarBlockLayoutFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceScalarBlockLayoutFeatures>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceScalarBlockLayoutFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceScalarBlockLayoutFeatures>())).scalarBlockLayout
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceScalarBlockLayoutFeatures),
            "::",
            stringify!(scalarBlockLayout)
        )
    );
}
impl Default for VkPhysicalDeviceScalarBlockLayoutFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageStencilUsageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stencilUsage: VkImageUsageFlags,
}
#[test]
fn bindgen_test_layout_VkImageStencilUsageCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkImageStencilUsageCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageStencilUsageCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageStencilUsageCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageStencilUsageCreateInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageStencilUsageCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageStencilUsageCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageStencilUsageCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageStencilUsageCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageStencilUsageCreateInfo>())).stencilUsage as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageStencilUsageCreateInfo),
            "::",
            stringify!(stencilUsage)
        )
    );
}
impl Default for VkImageStencilUsageCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerReductionModeCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub reductionMode: VkSamplerReductionMode,
}
#[test]
fn bindgen_test_layout_VkSamplerReductionModeCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSamplerReductionModeCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSamplerReductionModeCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerReductionModeCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSamplerReductionModeCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerReductionModeCreateInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerReductionModeCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerReductionModeCreateInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerReductionModeCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerReductionModeCreateInfo>())).reductionMode as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerReductionModeCreateInfo),
            "::",
            stringify!(reductionMode)
        )
    );
}
impl Default for VkSamplerReductionModeCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub filterMinmaxSingleComponentFormats: VkBool32,
    pub filterMinmaxImageComponentMapping: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSamplerFilterMinmaxProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSamplerFilterMinmaxProperties>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSamplerFilterMinmaxProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSamplerFilterMinmaxProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSamplerFilterMinmaxProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSamplerFilterMinmaxProperties>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerFilterMinmaxProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSamplerFilterMinmaxProperties>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerFilterMinmaxProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSamplerFilterMinmaxProperties>()))
                .filterMinmaxSingleComponentFormats as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerFilterMinmaxProperties),
            "::",
            stringify!(filterMinmaxSingleComponentFormats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSamplerFilterMinmaxProperties>()))
                .filterMinmaxImageComponentMapping as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerFilterMinmaxProperties),
            "::",
            stringify!(filterMinmaxImageComponentMapping)
        )
    );
}
impl Default for VkPhysicalDeviceSamplerFilterMinmaxProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkanMemoryModelFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub vulkanMemoryModel: VkBool32,
    pub vulkanMemoryModelDeviceScope: VkBool32,
    pub vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVulkanMemoryModelFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVulkanMemoryModelFeatures>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVulkanMemoryModelFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkanMemoryModelFeatures>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkanMemoryModelFeatures>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkanMemoryModelFeatures>())).vulkanMemoryModel
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures),
            "::",
            stringify!(vulkanMemoryModel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkanMemoryModelFeatures>()))
                .vulkanMemoryModelDeviceScope as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures),
            "::",
            stringify!(vulkanMemoryModelDeviceScope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVulkanMemoryModelFeatures>()))
                .vulkanMemoryModelAvailabilityVisibilityChains as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures),
            "::",
            stringify!(vulkanMemoryModelAvailabilityVisibilityChains)
        )
    );
}
impl Default for VkPhysicalDeviceVulkanMemoryModelFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImagelessFramebufferFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imagelessFramebuffer: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImagelessFramebufferFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImagelessFramebufferFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImagelessFramebufferFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImagelessFramebufferFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImagelessFramebufferFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImagelessFramebufferFeatures>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImagelessFramebufferFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImagelessFramebufferFeatures>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImagelessFramebufferFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImagelessFramebufferFeatures>()))
                .imagelessFramebuffer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImagelessFramebufferFeatures),
            "::",
            stringify!(imagelessFramebuffer)
        )
    );
}
impl Default for VkPhysicalDeviceImagelessFramebufferFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferAttachmentImageInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkImageCreateFlags,
    pub usage: VkImageUsageFlags,
    pub width: u32,
    pub height: u32,
    pub layerCount: u32,
    pub viewFormatCount: u32,
    pub pViewFormats: *const VkFormat,
}
#[test]
fn bindgen_test_layout_VkFramebufferAttachmentImageInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkFramebufferAttachmentImageInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkFramebufferAttachmentImageInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFramebufferAttachmentImageInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkFramebufferAttachmentImageInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferAttachmentImageInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferAttachmentImageInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferAttachmentImageInfo>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferAttachmentImageInfo>())).usage as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferAttachmentImageInfo>())).width as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferAttachmentImageInfo>())).height as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferAttachmentImageInfo>())).layerCount as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(layerCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferAttachmentImageInfo>())).viewFormatCount as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(viewFormatCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferAttachmentImageInfo>())).pViewFormats as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(pViewFormats)
        )
    );
}
impl Default for VkFramebufferAttachmentImageInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferAttachmentsCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachmentImageInfoCount: u32,
    pub pAttachmentImageInfos: *const VkFramebufferAttachmentImageInfo,
}
#[test]
fn bindgen_test_layout_VkFramebufferAttachmentsCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkFramebufferAttachmentsCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkFramebufferAttachmentsCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFramebufferAttachmentsCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkFramebufferAttachmentsCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferAttachmentsCreateInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentsCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferAttachmentsCreateInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentsCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferAttachmentsCreateInfo>())).attachmentImageInfoCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentsCreateInfo),
            "::",
            stringify!(attachmentImageInfoCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferAttachmentsCreateInfo>())).pAttachmentImageInfos
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentsCreateInfo),
            "::",
            stringify!(pAttachmentImageInfos)
        )
    );
}
impl Default for VkFramebufferAttachmentsCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassAttachmentBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachmentCount: u32,
    pub pAttachments: *const VkImageView,
}
#[test]
fn bindgen_test_layout_VkRenderPassAttachmentBeginInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassAttachmentBeginInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkRenderPassAttachmentBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassAttachmentBeginInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRenderPassAttachmentBeginInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassAttachmentBeginInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassAttachmentBeginInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassAttachmentBeginInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassAttachmentBeginInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassAttachmentBeginInfo>())).attachmentCount as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassAttachmentBeginInfo),
            "::",
            stringify!(attachmentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassAttachmentBeginInfo>())).pAttachments as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassAttachmentBeginInfo),
            "::",
            stringify!(pAttachments)
        )
    );
}
impl Default for VkRenderPassAttachmentBeginInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub uniformBufferStandardLayout: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceUniformBufferStandardLayoutFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceUniformBufferStandardLayoutFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceUniformBufferStandardLayoutFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceUniformBufferStandardLayoutFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceUniformBufferStandardLayoutFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceUniformBufferStandardLayoutFeatures>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceUniformBufferStandardLayoutFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceUniformBufferStandardLayoutFeatures>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceUniformBufferStandardLayoutFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceUniformBufferStandardLayoutFeatures>()))
                .uniformBufferStandardLayout as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceUniformBufferStandardLayoutFeatures),
            "::",
            stringify!(uniformBufferStandardLayout)
        )
    );
}
impl Default for VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSubgroupExtendedTypes: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures>()))
                .shaderSubgroupExtendedTypes as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures),
            "::",
            stringify!(shaderSubgroupExtendedTypes)
        )
    );
}
impl Default for VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub separateDepthStencilLayouts: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures>()))
                .separateDepthStencilLayouts as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures),
            "::",
            stringify!(separateDepthStencilLayouts)
        )
    );
}
impl Default for VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReferenceStencilLayout {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stencilLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkAttachmentReferenceStencilLayout() {
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentReferenceStencilLayout>(),
        24usize,
        concat!("Size of: ", stringify!(VkAttachmentReferenceStencilLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentReferenceStencilLayout>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAttachmentReferenceStencilLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentReferenceStencilLayout>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReferenceStencilLayout),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentReferenceStencilLayout>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReferenceStencilLayout),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentReferenceStencilLayout>())).stencilLayout as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReferenceStencilLayout),
            "::",
            stringify!(stencilLayout)
        )
    );
}
impl Default for VkAttachmentReferenceStencilLayout {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescriptionStencilLayout {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stencilInitialLayout: VkImageLayout,
    pub stencilFinalLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkAttachmentDescriptionStencilLayout() {
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentDescriptionStencilLayout>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkAttachmentDescriptionStencilLayout)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentDescriptionStencilLayout>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAttachmentDescriptionStencilLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescriptionStencilLayout>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescriptionStencilLayout),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescriptionStencilLayout>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescriptionStencilLayout),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescriptionStencilLayout>())).stencilInitialLayout
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescriptionStencilLayout),
            "::",
            stringify!(stencilInitialLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentDescriptionStencilLayout>())).stencilFinalLayout
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescriptionStencilLayout),
            "::",
            stringify!(stencilFinalLayout)
        )
    );
}
impl Default for VkAttachmentDescriptionStencilLayout {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceHostQueryResetFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub hostQueryReset: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceHostQueryResetFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceHostQueryResetFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceHostQueryResetFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceHostQueryResetFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceHostQueryResetFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceHostQueryResetFeatures>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceHostQueryResetFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceHostQueryResetFeatures>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceHostQueryResetFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceHostQueryResetFeatures>())).hostQueryReset
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceHostQueryResetFeatures),
            "::",
            stringify!(hostQueryReset)
        )
    );
}
impl Default for VkPhysicalDeviceHostQueryResetFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTimelineSemaphoreFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub timelineSemaphore: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTimelineSemaphoreFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTimelineSemaphoreFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTimelineSemaphoreFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTimelineSemaphoreFeatures>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTimelineSemaphoreFeatures>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTimelineSemaphoreFeatures>())).timelineSemaphore
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreFeatures),
            "::",
            stringify!(timelineSemaphore)
        )
    );
}
impl Default for VkPhysicalDeviceTimelineSemaphoreFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTimelineSemaphoreProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxTimelineSemaphoreValueDifference: u64,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTimelineSemaphoreProperties() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTimelineSemaphoreProperties>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTimelineSemaphoreProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTimelineSemaphoreProperties>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTimelineSemaphoreProperties>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTimelineSemaphoreProperties>()))
                .maxTimelineSemaphoreValueDifference as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreProperties),
            "::",
            stringify!(maxTimelineSemaphoreValueDifference)
        )
    );
}
impl Default for VkPhysicalDeviceTimelineSemaphoreProperties {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreTypeCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphoreType: VkSemaphoreType,
    pub initialValue: u64,
}
#[test]
fn bindgen_test_layout_VkSemaphoreTypeCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSemaphoreTypeCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkSemaphoreTypeCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSemaphoreTypeCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSemaphoreTypeCreateInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreTypeCreateInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreTypeCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreTypeCreateInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreTypeCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSemaphoreTypeCreateInfo>())).semaphoreType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreTypeCreateInfo),
            "::",
            stringify!(semaphoreType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSemaphoreTypeCreateInfo>())).initialValue as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreTypeCreateInfo),
            "::",
            stringify!(initialValue)
        )
    );
}
impl Default for VkSemaphoreTypeCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkTimelineSemaphoreSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreValueCount: u32,
    pub pWaitSemaphoreValues: *const u64,
    pub signalSemaphoreValueCount: u32,
    pub pSignalSemaphoreValues: *const u64,
}
#[test]
fn bindgen_test_layout_VkTimelineSemaphoreSubmitInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkTimelineSemaphoreSubmitInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkTimelineSemaphoreSubmitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkTimelineSemaphoreSubmitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkTimelineSemaphoreSubmitInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkTimelineSemaphoreSubmitInfo>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTimelineSemaphoreSubmitInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkTimelineSemaphoreSubmitInfo>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTimelineSemaphoreSubmitInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkTimelineSemaphoreSubmitInfo>())).waitSemaphoreValueCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTimelineSemaphoreSubmitInfo),
            "::",
            stringify!(waitSemaphoreValueCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkTimelineSemaphoreSubmitInfo>())).pWaitSemaphoreValues
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTimelineSemaphoreSubmitInfo),
            "::",
            stringify!(pWaitSemaphoreValues)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkTimelineSemaphoreSubmitInfo>())).signalSemaphoreValueCount
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTimelineSemaphoreSubmitInfo),
            "::",
            stringify!(signalSemaphoreValueCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkTimelineSemaphoreSubmitInfo>())).pSignalSemaphoreValues
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTimelineSemaphoreSubmitInfo),
            "::",
            stringify!(pSignalSemaphoreValues)
        )
    );
}
impl Default for VkTimelineSemaphoreSubmitInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreWaitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSemaphoreWaitFlags,
    pub semaphoreCount: u32,
    pub pSemaphores: *const VkSemaphore,
    pub pValues: *const u64,
}
#[test]
fn bindgen_test_layout_VkSemaphoreWaitInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSemaphoreWaitInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkSemaphoreWaitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSemaphoreWaitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSemaphoreWaitInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreWaitInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreWaitInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreWaitInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreWaitInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreWaitInfo>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreWaitInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSemaphoreWaitInfo>())).semaphoreCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreWaitInfo),
            "::",
            stringify!(semaphoreCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreWaitInfo>())).pSemaphores as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreWaitInfo),
            "::",
            stringify!(pSemaphores)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreWaitInfo>())).pValues as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreWaitInfo),
            "::",
            stringify!(pValues)
        )
    );
}
impl Default for VkSemaphoreWaitInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreSignalInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphore: VkSemaphore,
    pub value: u64,
}
#[test]
fn bindgen_test_layout_VkSemaphoreSignalInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkSemaphoreSignalInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkSemaphoreSignalInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSemaphoreSignalInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSemaphoreSignalInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreSignalInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSignalInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreSignalInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSignalInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreSignalInfo>())).semaphore as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSignalInfo),
            "::",
            stringify!(semaphore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreSignalInfo>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSignalInfo),
            "::",
            stringify!(value)
        )
    );
}
impl Default for VkSemaphoreSignalInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub bufferDeviceAddress: VkBool32,
    pub bufferDeviceAddressCaptureReplay: VkBool32,
    pub bufferDeviceAddressMultiDevice: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceBufferDeviceAddressFeatures() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceBufferDeviceAddressFeatures>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceBufferDeviceAddressFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBufferDeviceAddressFeatures>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBufferDeviceAddressFeatures>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBufferDeviceAddressFeatures>()))
                .bufferDeviceAddress as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures),
            "::",
            stringify!(bufferDeviceAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBufferDeviceAddressFeatures>()))
                .bufferDeviceAddressCaptureReplay as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures),
            "::",
            stringify!(bufferDeviceAddressCaptureReplay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBufferDeviceAddressFeatures>()))
                .bufferDeviceAddressMultiDevice as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures),
            "::",
            stringify!(bufferDeviceAddressMultiDevice)
        )
    );
}
impl Default for VkPhysicalDeviceBufferDeviceAddressFeatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferDeviceAddressInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
}
#[test]
fn bindgen_test_layout_VkBufferDeviceAddressInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkBufferDeviceAddressInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkBufferDeviceAddressInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferDeviceAddressInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferDeviceAddressInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferDeviceAddressInfo>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkBufferDeviceAddressInfo>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferDeviceAddressInfo>())).buffer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressInfo),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for VkBufferDeviceAddressInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferOpaqueCaptureAddressCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub opaqueCaptureAddress: u64,
}
#[test]
fn bindgen_test_layout_VkBufferOpaqueCaptureAddressCreateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkBufferOpaqueCaptureAddressCreateInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkBufferOpaqueCaptureAddressCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferOpaqueCaptureAddressCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBufferOpaqueCaptureAddressCreateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferOpaqueCaptureAddressCreateInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferOpaqueCaptureAddressCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferOpaqueCaptureAddressCreateInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferOpaqueCaptureAddressCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferOpaqueCaptureAddressCreateInfo>())).opaqueCaptureAddress
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferOpaqueCaptureAddressCreateInfo),
            "::",
            stringify!(opaqueCaptureAddress)
        )
    );
}
impl Default for VkBufferOpaqueCaptureAddressCreateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryOpaqueCaptureAddressAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub opaqueCaptureAddress: u64,
}
#[test]
fn bindgen_test_layout_VkMemoryOpaqueCaptureAddressAllocateInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryOpaqueCaptureAddressAllocateInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkMemoryOpaqueCaptureAddressAllocateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryOpaqueCaptureAddressAllocateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkMemoryOpaqueCaptureAddressAllocateInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryOpaqueCaptureAddressAllocateInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryOpaqueCaptureAddressAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryOpaqueCaptureAddressAllocateInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryOpaqueCaptureAddressAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryOpaqueCaptureAddressAllocateInfo>()))
                .opaqueCaptureAddress as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryOpaqueCaptureAddressAllocateInfo),
            "::",
            stringify!(opaqueCaptureAddress)
        )
    );
}
impl Default for VkMemoryOpaqueCaptureAddressAllocateInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memory: VkDeviceMemory,
}
#[test]
fn bindgen_test_layout_VkDeviceMemoryOpaqueCaptureAddressInfo() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceMemoryOpaqueCaptureAddressInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceMemoryOpaqueCaptureAddressInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceMemoryOpaqueCaptureAddressInfo>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceMemoryOpaqueCaptureAddressInfo>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceMemoryOpaqueCaptureAddressInfo>())).memory as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo),
            "::",
            stringify!(memory)
        )
    );
}
impl Default for VkDeviceMemoryOpaqueCaptureAddressInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCmdDrawIndirectCount = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirectCount = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCreateRenderPass2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult,
>;
pub type PFN_vkCmdBeginRenderPass2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    ),
>;
pub type PFN_vkCmdNextSubpass2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    ),
>;
pub type PFN_vkCmdEndRenderPass2 = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pSubpassEndInfo: *const VkSubpassEndInfo),
>;
pub type PFN_vkResetQueryPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    ),
>;
pub type PFN_vkGetSemaphoreCounterValue = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, semaphore: VkSemaphore, pValue: *mut u64) -> VkResult,
>;
pub type PFN_vkWaitSemaphores = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult,
>;
pub type PFN_vkSignalSemaphore = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pSignalInfo: *const VkSemaphoreSignalInfo) -> VkResult,
>;
pub type PFN_vkGetBufferDeviceAddress = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress,
>;
pub type PFN_vkGetBufferOpaqueCaptureAddress = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo) -> u64,
>;
pub type PFN_vkGetDeviceMemoryOpaqueCaptureAddress = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64,
>;
extern "system" {
    pub fn vkCmdDrawIndirectCount(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndexedIndirectCount(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCreateRenderPass2(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdBeginRenderPass2(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    );
}
extern "system" {
    pub fn vkCmdNextSubpass2(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    );
}
extern "system" {
    pub fn vkCmdEndRenderPass2(
        commandBuffer: VkCommandBuffer,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    );
}
extern "system" {
    pub fn vkResetQueryPool(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    );
}
extern "system" {
    pub fn vkGetSemaphoreCounterValue(
        device: VkDevice,
        semaphore: VkSemaphore,
        pValue: *mut u64,
    ) -> VkResult;
}
extern "system" {
    pub fn vkWaitSemaphores(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult;
}
extern "system" {
    pub fn vkSignalSemaphore(
        device: VkDevice,
        pSignalInfo: *const VkSemaphoreSignalInfo,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetBufferDeviceAddress(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress;
}
extern "system" {
    pub fn vkGetBufferOpaqueCaptureAddress(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> u64;
}
extern "system" {
    pub fn vkGetDeviceMemoryOpaqueCaptureAddress(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceKHR_T {
    _unused: [u8; 0],
}
pub type VkSurfaceKHR = *mut VkSurfaceKHR_T;
pub const VkPresentModeKHR_VK_PRESENT_MODE_IMMEDIATE_KHR: VkPresentModeKHR = 0;
pub const VkPresentModeKHR_VK_PRESENT_MODE_MAILBOX_KHR: VkPresentModeKHR = 1;
pub const VkPresentModeKHR_VK_PRESENT_MODE_FIFO_KHR: VkPresentModeKHR = 2;
pub const VkPresentModeKHR_VK_PRESENT_MODE_FIFO_RELAXED_KHR: VkPresentModeKHR = 3;
pub const VkPresentModeKHR_VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR: VkPresentModeKHR = 1000111000;
pub const VkPresentModeKHR_VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR: VkPresentModeKHR =
    1000111001;
pub const VkPresentModeKHR_VK_PRESENT_MODE_MAX_ENUM_KHR: VkPresentModeKHR = 2147483647;
pub type VkPresentModeKHR = ::std::os::raw::c_uint;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_SRGB_NONLINEAR_KHR: VkColorSpaceKHR = 0;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT: VkColorSpaceKHR = 1000104001;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT: VkColorSpaceKHR = 1000104002;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT: VkColorSpaceKHR = 1000104003;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT: VkColorSpaceKHR = 1000104004;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_BT709_LINEAR_EXT: VkColorSpaceKHR = 1000104005;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_BT709_NONLINEAR_EXT: VkColorSpaceKHR = 1000104006;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_BT2020_LINEAR_EXT: VkColorSpaceKHR = 1000104007;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_HDR10_ST2084_EXT: VkColorSpaceKHR = 1000104008;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DOLBYVISION_EXT: VkColorSpaceKHR = 1000104009;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_HDR10_HLG_EXT: VkColorSpaceKHR = 1000104010;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT: VkColorSpaceKHR = 1000104011;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT: VkColorSpaceKHR = 1000104012;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_PASS_THROUGH_EXT: VkColorSpaceKHR = 1000104013;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT: VkColorSpaceKHR = 1000104014;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DISPLAY_NATIVE_AMD: VkColorSpaceKHR = 1000213000;
pub const VkColorSpaceKHR_VK_COLORSPACE_SRGB_NONLINEAR_KHR: VkColorSpaceKHR = 0;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DCI_P3_LINEAR_EXT: VkColorSpaceKHR = 1000104003;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_MAX_ENUM_KHR: VkColorSpaceKHR = 2147483647;
pub type VkColorSpaceKHR = ::std::os::raw::c_uint;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 1;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 2;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 4;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 8;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 16;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 32;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR : VkSurfaceTransformFlagBitsKHR = 64 ;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR : VkSurfaceTransformFlagBitsKHR = 128 ;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 256;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR:
    VkSurfaceTransformFlagBitsKHR = 2147483647;
pub type VkSurfaceTransformFlagBitsKHR = ::std::os::raw::c_uint;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 1;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 2;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 4;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 8;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR:
    VkCompositeAlphaFlagBitsKHR = 2147483647;
pub type VkCompositeAlphaFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkCompositeAlphaFlagsKHR = VkFlags;
pub type VkSurfaceTransformFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilitiesKHR {
    pub minImageCount: u32,
    pub maxImageCount: u32,
    pub currentExtent: VkExtent2D,
    pub minImageExtent: VkExtent2D,
    pub maxImageExtent: VkExtent2D,
    pub maxImageArrayLayers: u32,
    pub supportedTransforms: VkSurfaceTransformFlagsKHR,
    pub currentTransform: VkSurfaceTransformFlagBitsKHR,
    pub supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    pub supportedUsageFlags: VkImageUsageFlags,
}
#[test]
fn bindgen_test_layout_VkSurfaceCapabilitiesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkSurfaceCapabilitiesKHR>(),
        52usize,
        concat!("Size of: ", stringify!(VkSurfaceCapabilitiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfaceCapabilitiesKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkSurfaceCapabilitiesKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilitiesKHR>())).minImageCount as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(minImageCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilitiesKHR>())).maxImageCount as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(maxImageCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilitiesKHR>())).currentExtent as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(currentExtent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilitiesKHR>())).minImageExtent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(minImageExtent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilitiesKHR>())).maxImageExtent as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(maxImageExtent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilitiesKHR>())).maxImageArrayLayers as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(maxImageArrayLayers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilitiesKHR>())).supportedTransforms as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(supportedTransforms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilitiesKHR>())).currentTransform as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(currentTransform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilitiesKHR>())).supportedCompositeAlpha as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(supportedCompositeAlpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilitiesKHR>())).supportedUsageFlags as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(supportedUsageFlags)
        )
    );
}
impl Default for VkSurfaceCapabilitiesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceFormatKHR {
    pub format: VkFormat,
    pub colorSpace: VkColorSpaceKHR,
}
#[test]
fn bindgen_test_layout_VkSurfaceFormatKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkSurfaceFormatKHR>(),
        8usize,
        concat!("Size of: ", stringify!(VkSurfaceFormatKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfaceFormatKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkSurfaceFormatKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSurfaceFormatKHR>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceFormatKHR),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSurfaceFormatKHR>())).colorSpace as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceFormatKHR),
            "::",
            stringify!(colorSpace)
        )
    );
}
impl Default for VkSurfaceFormatKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkDestroySurfaceKHR = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        surface: VkSurfaceKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSurfaceSupportKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        queueFamilyIndex: u32,
        surface: VkSurfaceKHR,
        pSupported: *mut VkBool32,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormatKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pPresentModeCount: *mut u32,
        pPresentModes: *mut VkPresentModeKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkDestroySurfaceKHR(
        instance: VkInstance,
        surface: VkSurfaceKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceSupportKHR(
        physicalDevice: VkPhysicalDevice,
        queueFamilyIndex: u32,
        surface: VkSurfaceKHR,
        pSupported: *mut VkBool32,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilitiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceFormatsKHR(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormatKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceSurfacePresentModesKHR(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pPresentModeCount: *mut u32,
        pPresentModes: *mut VkPresentModeKHR,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainKHR_T {
    _unused: [u8; 0],
}
pub type VkSwapchainKHR = *mut VkSwapchainKHR_T;
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR:
    VkSwapchainCreateFlagBitsKHR = 1;
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR:
    VkSwapchainCreateFlagBitsKHR = 2;
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR:
    VkSwapchainCreateFlagBitsKHR = 4;
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR:
    VkSwapchainCreateFlagBitsKHR = 2147483647;
pub type VkSwapchainCreateFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkSwapchainCreateFlagsKHR = VkFlags;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR:
    VkDeviceGroupPresentModeFlagBitsKHR = 1;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR:
    VkDeviceGroupPresentModeFlagBitsKHR = 2;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR:
    VkDeviceGroupPresentModeFlagBitsKHR = 4;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR : VkDeviceGroupPresentModeFlagBitsKHR = 8 ;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR : VkDeviceGroupPresentModeFlagBitsKHR = 2147483647 ;
pub type VkDeviceGroupPresentModeFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkDeviceGroupPresentModeFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSwapchainCreateFlagsKHR,
    pub surface: VkSurfaceKHR,
    pub minImageCount: u32,
    pub imageFormat: VkFormat,
    pub imageColorSpace: VkColorSpaceKHR,
    pub imageExtent: VkExtent2D,
    pub imageArrayLayers: u32,
    pub imageUsage: VkImageUsageFlags,
    pub imageSharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
    pub preTransform: VkSurfaceTransformFlagBitsKHR,
    pub compositeAlpha: VkCompositeAlphaFlagBitsKHR,
    pub presentMode: VkPresentModeKHR,
    pub clipped: VkBool32,
    pub oldSwapchain: VkSwapchainKHR,
}
#[test]
fn bindgen_test_layout_VkSwapchainCreateInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkSwapchainCreateInfoKHR>(),
        104usize,
        concat!("Size of: ", stringify!(VkSwapchainCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSwapchainCreateInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSwapchainCreateInfoKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).surface as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(surface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).minImageCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(minImageCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).imageFormat as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).imageColorSpace as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageColorSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).imageExtent as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageExtent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).imageArrayLayers as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageArrayLayers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).imageUsage as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageUsage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).imageSharingMode as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageSharingMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).queueFamilyIndexCount as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(queueFamilyIndexCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).pQueueFamilyIndices as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(pQueueFamilyIndices)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).preTransform as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(preTransform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).compositeAlpha as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(compositeAlpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).presentMode as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(presentMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).clipped as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(clipped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCreateInfoKHR>())).oldSwapchain as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(oldSwapchain)
        )
    );
}
impl Default for VkSwapchainCreateInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphores: *const VkSemaphore,
    pub swapchainCount: u32,
    pub pSwapchains: *const VkSwapchainKHR,
    pub pImageIndices: *const u32,
    pub pResults: *mut VkResult,
}
#[test]
fn bindgen_test_layout_VkPresentInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPresentInfoKHR>(),
        64usize,
        concat!("Size of: ", stringify!(VkPresentInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPresentInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPresentInfoKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentInfoKHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentInfoKHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPresentInfoKHR>())).waitSemaphoreCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(waitSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPresentInfoKHR>())).pWaitSemaphores as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pWaitSemaphores)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentInfoKHR>())).swapchainCount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(swapchainCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentInfoKHR>())).pSwapchains as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pSwapchains)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentInfoKHR>())).pImageIndices as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pImageIndices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentInfoKHR>())).pResults as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pResults)
        )
    );
}
impl Default for VkPresentInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSwapchainCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchain: VkSwapchainKHR,
}
#[test]
fn bindgen_test_layout_VkImageSwapchainCreateInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkImageSwapchainCreateInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageSwapchainCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageSwapchainCreateInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageSwapchainCreateInfoKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSwapchainCreateInfoKHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSwapchainCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSwapchainCreateInfoKHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSwapchainCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageSwapchainCreateInfoKHR>())).swapchain as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSwapchainCreateInfoKHR),
            "::",
            stringify!(swapchain)
        )
    );
}
impl Default for VkImageSwapchainCreateInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemorySwapchainInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchain: VkSwapchainKHR,
    pub imageIndex: u32,
}
#[test]
fn bindgen_test_layout_VkBindImageMemorySwapchainInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkBindImageMemorySwapchainInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkBindImageMemorySwapchainInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindImageMemorySwapchainInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindImageMemorySwapchainInfoKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImageMemorySwapchainInfoKHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemorySwapchainInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImageMemorySwapchainInfoKHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemorySwapchainInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImageMemorySwapchainInfoKHR>())).swapchain as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemorySwapchainInfoKHR),
            "::",
            stringify!(swapchain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindImageMemorySwapchainInfoKHR>())).imageIndex as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemorySwapchainInfoKHR),
            "::",
            stringify!(imageIndex)
        )
    );
}
impl Default for VkBindImageMemorySwapchainInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAcquireNextImageInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchain: VkSwapchainKHR,
    pub timeout: u64,
    pub semaphore: VkSemaphore,
    pub fence: VkFence,
    pub deviceMask: u32,
}
#[test]
fn bindgen_test_layout_VkAcquireNextImageInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkAcquireNextImageInfoKHR>(),
        56usize,
        concat!("Size of: ", stringify!(VkAcquireNextImageInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAcquireNextImageInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAcquireNextImageInfoKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAcquireNextImageInfoKHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAcquireNextImageInfoKHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAcquireNextImageInfoKHR>())).swapchain as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(swapchain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAcquireNextImageInfoKHR>())).timeout as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAcquireNextImageInfoKHR>())).semaphore as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(semaphore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAcquireNextImageInfoKHR>())).fence as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAcquireNextImageInfoKHR>())).deviceMask as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(deviceMask)
        )
    );
}
impl Default for VkAcquireNextImageInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupPresentCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub presentMask: [u32; 32usize],
    pub modes: VkDeviceGroupPresentModeFlagsKHR,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupPresentCapabilitiesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupPresentCapabilitiesKHR>(),
        152usize,
        concat!("Size of: ", stringify!(VkDeviceGroupPresentCapabilitiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupPresentCapabilitiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceGroupPresentCapabilitiesKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupPresentCapabilitiesKHR>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentCapabilitiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupPresentCapabilitiesKHR>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentCapabilitiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupPresentCapabilitiesKHR>())).presentMask as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentCapabilitiesKHR),
            "::",
            stringify!(presentMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupPresentCapabilitiesKHR>())).modes as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentCapabilitiesKHR),
            "::",
            stringify!(modes)
        )
    );
}
impl Default for VkDeviceGroupPresentCapabilitiesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupPresentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pDeviceMasks: *const u32,
    pub mode: VkDeviceGroupPresentModeFlagBitsKHR,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupPresentInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupPresentInfoKHR>(),
        40usize,
        concat!("Size of: ", stringify!(VkDeviceGroupPresentInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupPresentInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceGroupPresentInfoKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupPresentInfoKHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupPresentInfoKHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupPresentInfoKHR>())).swapchainCount as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentInfoKHR),
            "::",
            stringify!(swapchainCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupPresentInfoKHR>())).pDeviceMasks as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentInfoKHR),
            "::",
            stringify!(pDeviceMasks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupPresentInfoKHR>())).mode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentInfoKHR),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for VkDeviceGroupPresentInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupSwapchainCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub modes: VkDeviceGroupPresentModeFlagsKHR,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupSwapchainCreateInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupSwapchainCreateInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkDeviceGroupSwapchainCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupSwapchainCreateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceGroupSwapchainCreateInfoKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupSwapchainCreateInfoKHR>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSwapchainCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupSwapchainCreateInfoKHR>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSwapchainCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceGroupSwapchainCreateInfoKHR>())).modes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSwapchainCreateInfoKHR),
            "::",
            stringify!(modes)
        )
    );
}
impl Default for VkDeviceGroupSwapchainCreateInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCreateSwapchainKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchain: *mut VkSwapchainKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroySwapchainKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetSwapchainImagesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSwapchainImageCount: *mut u32,
        pSwapchainImages: *mut VkImage,
    ) -> VkResult,
>;
pub type PFN_vkAcquireNextImageKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        timeout: u64,
        semaphore: VkSemaphore,
        fence: VkFence,
        pImageIndex: *mut u32,
    ) -> VkResult,
>;
pub type PFN_vkQueuePresentKHR = ::std::option::Option<
    unsafe extern "system" fn(queue: VkQueue, pPresentInfo: *const VkPresentInfoKHR) -> VkResult,
>;
pub type PFN_vkGetDeviceGroupPresentCapabilitiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pDeviceGroupPresentCapabilities: *mut VkDeviceGroupPresentCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceGroupSurfacePresentModesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        surface: VkSurfaceKHR,
        pModes: *mut VkDeviceGroupPresentModeFlagsKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDevicePresentRectanglesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pRectCount: *mut u32,
        pRects: *mut VkRect2D,
    ) -> VkResult,
>;
pub type PFN_vkAcquireNextImage2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAcquireInfo: *const VkAcquireNextImageInfoKHR,
        pImageIndex: *mut u32,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkCreateSwapchainKHR(
        device: VkDevice,
        pCreateInfo: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchain: *mut VkSwapchainKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroySwapchainKHR(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetSwapchainImagesKHR(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSwapchainImageCount: *mut u32,
        pSwapchainImages: *mut VkImage,
    ) -> VkResult;
}
extern "system" {
    pub fn vkAcquireNextImageKHR(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        timeout: u64,
        semaphore: VkSemaphore,
        fence: VkFence,
        pImageIndex: *mut u32,
    ) -> VkResult;
}
extern "system" {
    pub fn vkQueuePresentKHR(queue: VkQueue, pPresentInfo: *const VkPresentInfoKHR) -> VkResult;
}
extern "system" {
    pub fn vkGetDeviceGroupPresentCapabilitiesKHR(
        device: VkDevice,
        pDeviceGroupPresentCapabilities: *mut VkDeviceGroupPresentCapabilitiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDeviceGroupSurfacePresentModesKHR(
        device: VkDevice,
        surface: VkSurfaceKHR,
        pModes: *mut VkDeviceGroupPresentModeFlagsKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDevicePresentRectanglesKHR(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pRectCount: *mut u32,
        pRects: *mut VkRect2D,
    ) -> VkResult;
}
extern "system" {
    pub fn vkAcquireNextImage2KHR(
        device: VkDevice,
        pAcquireInfo: *const VkAcquireNextImageInfoKHR,
        pImageIndex: *mut u32,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayKHR_T {
    _unused: [u8; 0],
}
pub type VkDisplayKHR = *mut VkDisplayKHR_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModeKHR_T {
    _unused: [u8; 0],
}
pub type VkDisplayModeKHR = *mut VkDisplayModeKHR_T;
pub type VkDisplayModeCreateFlagsKHR = VkFlags;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 1;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 2;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 4;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 8;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 2147483647;
pub type VkDisplayPlaneAlphaFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkDisplayPlaneAlphaFlagsKHR = VkFlags;
pub type VkDisplaySurfaceCreateFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDisplayModeParametersKHR {
    pub visibleRegion: VkExtent2D,
    pub refreshRate: u32,
}
#[test]
fn bindgen_test_layout_VkDisplayModeParametersKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayModeParametersKHR>(),
        12usize,
        concat!("Size of: ", stringify!(VkDisplayModeParametersKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayModeParametersKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkDisplayModeParametersKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayModeParametersKHR>())).visibleRegion as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeParametersKHR),
            "::",
            stringify!(visibleRegion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayModeParametersKHR>())).refreshRate as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeParametersKHR),
            "::",
            stringify!(refreshRate)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModeCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDisplayModeCreateFlagsKHR,
    pub parameters: VkDisplayModeParametersKHR,
}
#[test]
fn bindgen_test_layout_VkDisplayModeCreateInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayModeCreateInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkDisplayModeCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayModeCreateInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayModeCreateInfoKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayModeCreateInfoKHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayModeCreateInfoKHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayModeCreateInfoKHR>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeCreateInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayModeCreateInfoKHR>())).parameters as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeCreateInfoKHR),
            "::",
            stringify!(parameters)
        )
    );
}
impl Default for VkDisplayModeCreateInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModePropertiesKHR {
    pub displayMode: VkDisplayModeKHR,
    pub parameters: VkDisplayModeParametersKHR,
}
#[test]
fn bindgen_test_layout_VkDisplayModePropertiesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayModePropertiesKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkDisplayModePropertiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayModePropertiesKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayModePropertiesKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayModePropertiesKHR>())).displayMode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModePropertiesKHR),
            "::",
            stringify!(displayMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayModePropertiesKHR>())).parameters as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModePropertiesKHR),
            "::",
            stringify!(parameters)
        )
    );
}
impl Default for VkDisplayModePropertiesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDisplayPlaneCapabilitiesKHR {
    pub supportedAlpha: VkDisplayPlaneAlphaFlagsKHR,
    pub minSrcPosition: VkOffset2D,
    pub maxSrcPosition: VkOffset2D,
    pub minSrcExtent: VkExtent2D,
    pub maxSrcExtent: VkExtent2D,
    pub minDstPosition: VkOffset2D,
    pub maxDstPosition: VkOffset2D,
    pub minDstExtent: VkExtent2D,
    pub maxDstExtent: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkDisplayPlaneCapabilitiesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPlaneCapabilitiesKHR>(),
        68usize,
        concat!("Size of: ", stringify!(VkDisplayPlaneCapabilitiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPlaneCapabilitiesKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkDisplayPlaneCapabilitiesKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneCapabilitiesKHR>())).supportedAlpha as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(supportedAlpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneCapabilitiesKHR>())).minSrcPosition as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(minSrcPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneCapabilitiesKHR>())).maxSrcPosition as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(maxSrcPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneCapabilitiesKHR>())).minSrcExtent as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(minSrcExtent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneCapabilitiesKHR>())).maxSrcExtent as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(maxSrcExtent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneCapabilitiesKHR>())).minDstPosition as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(minDstPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneCapabilitiesKHR>())).maxDstPosition as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(maxDstPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneCapabilitiesKHR>())).minDstExtent as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(minDstExtent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneCapabilitiesKHR>())).maxDstExtent as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(maxDstExtent)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlanePropertiesKHR {
    pub currentDisplay: VkDisplayKHR,
    pub currentStackIndex: u32,
}
#[test]
fn bindgen_test_layout_VkDisplayPlanePropertiesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPlanePropertiesKHR>(),
        16usize,
        concat!("Size of: ", stringify!(VkDisplayPlanePropertiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPlanePropertiesKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPlanePropertiesKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlanePropertiesKHR>())).currentDisplay as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlanePropertiesKHR),
            "::",
            stringify!(currentDisplay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlanePropertiesKHR>())).currentStackIndex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlanePropertiesKHR),
            "::",
            stringify!(currentStackIndex)
        )
    );
}
impl Default for VkDisplayPlanePropertiesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPropertiesKHR {
    pub display: VkDisplayKHR,
    pub displayName: *const ::std::os::raw::c_char,
    pub physicalDimensions: VkExtent2D,
    pub physicalResolution: VkExtent2D,
    pub supportedTransforms: VkSurfaceTransformFlagsKHR,
    pub planeReorderPossible: VkBool32,
    pub persistentContent: VkBool32,
}
#[test]
fn bindgen_test_layout_VkDisplayPropertiesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPropertiesKHR>(),
        48usize,
        concat!("Size of: ", stringify!(VkDisplayPropertiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPropertiesKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPropertiesKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayPropertiesKHR>())).display as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPropertiesKHR>())).displayName as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(displayName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPropertiesKHR>())).physicalDimensions as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(physicalDimensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPropertiesKHR>())).physicalResolution as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(physicalResolution)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPropertiesKHR>())).supportedTransforms as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(supportedTransforms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPropertiesKHR>())).planeReorderPossible as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(planeReorderPossible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPropertiesKHR>())).persistentContent as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(persistentContent)
        )
    );
}
impl Default for VkDisplayPropertiesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplaySurfaceCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDisplaySurfaceCreateFlagsKHR,
    pub displayMode: VkDisplayModeKHR,
    pub planeIndex: u32,
    pub planeStackIndex: u32,
    pub transform: VkSurfaceTransformFlagBitsKHR,
    pub globalAlpha: f32,
    pub alphaMode: VkDisplayPlaneAlphaFlagBitsKHR,
    pub imageExtent: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkDisplaySurfaceCreateInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplaySurfaceCreateInfoKHR>(),
        64usize,
        concat!("Size of: ", stringify!(VkDisplaySurfaceCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplaySurfaceCreateInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplaySurfaceCreateInfoKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplaySurfaceCreateInfoKHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplaySurfaceCreateInfoKHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplaySurfaceCreateInfoKHR>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplaySurfaceCreateInfoKHR>())).displayMode as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(displayMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplaySurfaceCreateInfoKHR>())).planeIndex as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(planeIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplaySurfaceCreateInfoKHR>())).planeStackIndex as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(planeStackIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplaySurfaceCreateInfoKHR>())).transform as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(transform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplaySurfaceCreateInfoKHR>())).globalAlpha as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(globalAlpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplaySurfaceCreateInfoKHR>())).alphaMode as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(alphaMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplaySurfaceCreateInfoKHR>())).imageExtent as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(imageExtent)
        )
    );
}
impl Default for VkDisplaySurfaceCreateInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlanePropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayPlaneSupportedDisplaysKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        planeIndex: u32,
        pDisplayCount: *mut u32,
        pDisplays: *mut VkDisplayKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayModePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModePropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateDisplayModeKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pCreateInfo: *const VkDisplayModeCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pMode: *mut VkDisplayModeKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayPlaneCapabilitiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        mode: VkDisplayModeKHR,
        planeIndex: u32,
        pCapabilities: *mut VkDisplayPlaneCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateDisplayPlaneSurfaceKHR = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pCreateInfo: *const VkDisplaySurfaceCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceDisplayPropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPropertiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlanePropertiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDisplayPlaneSupportedDisplaysKHR(
        physicalDevice: VkPhysicalDevice,
        planeIndex: u32,
        pDisplayCount: *mut u32,
        pDisplays: *mut VkDisplayKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDisplayModePropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModePropertiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateDisplayModeKHR(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pCreateInfo: *const VkDisplayModeCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pMode: *mut VkDisplayModeKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDisplayPlaneCapabilitiesKHR(
        physicalDevice: VkPhysicalDevice,
        mode: VkDisplayModeKHR,
        planeIndex: u32,
        pCapabilities: *mut VkDisplayPlaneCapabilitiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateDisplayPlaneSurfaceKHR(
        instance: VkInstance,
        pCreateInfo: *const VkDisplaySurfaceCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPresentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcRect: VkRect2D,
    pub dstRect: VkRect2D,
    pub persistent: VkBool32,
}
#[test]
fn bindgen_test_layout_VkDisplayPresentInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPresentInfoKHR>(),
        56usize,
        concat!("Size of: ", stringify!(VkDisplayPresentInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPresentInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPresentInfoKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayPresentInfoKHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPresentInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayPresentInfoKHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPresentInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayPresentInfoKHR>())).srcRect as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPresentInfoKHR),
            "::",
            stringify!(srcRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayPresentInfoKHR>())).dstRect as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPresentInfoKHR),
            "::",
            stringify!(dstRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPresentInfoKHR>())).persistent as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPresentInfoKHR),
            "::",
            stringify!(persistent)
        )
    );
}
impl Default for VkDisplayPresentInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCreateSharedSwapchainsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchainCount: u32,
        pCreateInfos: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchains: *mut VkSwapchainKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkCreateSharedSwapchainsKHR(
        device: VkDevice,
        swapchainCount: u32,
        pCreateInfos: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchains: *mut VkSwapchainKHR,
    ) -> VkResult;
}
pub type VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;
pub type VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;
pub type VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;
pub type VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;
pub type VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;
pub type VkFormatProperties2KHR = VkFormatProperties2;
pub type VkImageFormatProperties2KHR = VkImageFormatProperties2;
pub type VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;
pub type VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;
pub type VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;
pub type VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;
pub type VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;
pub type PFN_vkGetPhysicalDeviceFeatures2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFormatProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMemoryProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    ),
>;
extern "system" {
    pub fn vkGetPhysicalDeviceFeatures2KHR(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceFormatProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceImageFormatProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceQueueFamilyProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceMemoryProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    );
}
pub type VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;
pub use self::VkPeerMemoryFeatureFlagBits as VkPeerMemoryFeatureFlagBitsKHR;
pub type VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;
pub use self::VkMemoryAllocateFlagBits as VkMemoryAllocateFlagBitsKHR;
pub type VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;
pub type VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;
pub type VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;
pub type VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;
pub type VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;
pub type VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;
pub type VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;
pub type PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    ),
>;
pub type PFN_vkCmdSetDeviceMaskKHR =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer, deviceMask: u32)>;
pub type PFN_vkCmdDispatchBaseKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
extern "system" {
    pub fn vkGetDeviceGroupPeerMemoryFeaturesKHR(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    );
}
extern "system" {
    pub fn vkCmdSetDeviceMaskKHR(commandBuffer: VkCommandBuffer, deviceMask: u32);
}
extern "system" {
    pub fn vkCmdDispatchBaseKHR(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    );
}
pub type VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;
pub type PFN_vkTrimCommandPoolKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    ),
>;
extern "system" {
    pub fn vkTrimCommandPoolKHR(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    );
}
pub type VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;
pub type VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;
pub type PFN_vkEnumeratePhysicalDeviceGroupsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkEnumeratePhysicalDeviceGroupsKHR(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult;
}
pub type VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;
pub use self::VkExternalMemoryHandleTypeFlagBits as VkExternalMemoryHandleTypeFlagBitsKHR;
pub type VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;
pub use self::VkExternalMemoryFeatureFlagBits as VkExternalMemoryFeatureFlagBitsKHR;
pub type VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;
pub type VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;
pub type VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;
pub type VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;
pub type VkExternalBufferPropertiesKHR = VkExternalBufferProperties;
pub type VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;
pub type PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    ),
>;
extern "system" {
    pub fn vkGetPhysicalDeviceExternalBufferPropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    );
}
pub type VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;
pub type VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;
pub type VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportMemoryFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_VkImportMemoryFdInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkImportMemoryFdInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkImportMemoryFdInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImportMemoryFdInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImportMemoryFdInfoKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImportMemoryFdInfoKHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryFdInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImportMemoryFdInfoKHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryFdInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImportMemoryFdInfoKHR>())).handleType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryFdInfoKHR),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImportMemoryFdInfoKHR>())).fd as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryFdInfoKHR),
            "::",
            stringify!(fd)
        )
    );
}
impl Default for VkImportMemoryFdInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryFdPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryTypeBits: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryFdPropertiesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryFdPropertiesKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryFdPropertiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryFdPropertiesKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryFdPropertiesKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryFdPropertiesKHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryFdPropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryFdPropertiesKHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryFdPropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryFdPropertiesKHR>())).memoryTypeBits as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryFdPropertiesKHR),
            "::",
            stringify!(memoryTypeBits)
        )
    );
}
impl Default for VkMemoryFdPropertiesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryGetFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memory: VkDeviceMemory,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkMemoryGetFdInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryGetFdInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkMemoryGetFdInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryGetFdInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryGetFdInfoKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryGetFdInfoKHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryGetFdInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryGetFdInfoKHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryGetFdInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryGetFdInfoKHR>())).memory as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryGetFdInfoKHR),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkMemoryGetFdInfoKHR>())).handleType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryGetFdInfoKHR),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkMemoryGetFdInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetMemoryFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pGetFdInfo: *const VkMemoryGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult,
>;
pub type PFN_vkGetMemoryFdPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        fd: ::std::os::raw::c_int,
        pMemoryFdProperties: *mut VkMemoryFdPropertiesKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetMemoryFdKHR(
        device: VkDevice,
        pGetFdInfo: *const VkMemoryGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetMemoryFdPropertiesKHR(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        fd: ::std::os::raw::c_int,
        pMemoryFdProperties: *mut VkMemoryFdPropertiesKHR,
    ) -> VkResult;
}
pub type VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;
pub use self::VkExternalSemaphoreHandleTypeFlagBits as VkExternalSemaphoreHandleTypeFlagBitsKHR;
pub type VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;
pub use self::VkExternalSemaphoreFeatureFlagBits as VkExternalSemaphoreFeatureFlagBitsKHR;
pub type VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;
pub type VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;
pub type PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    ),
>;
extern "system" {
    pub fn vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    );
}
pub type VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;
pub use self::VkSemaphoreImportFlagBits as VkSemaphoreImportFlagBitsKHR;
pub type VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportSemaphoreFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphore: VkSemaphore,
    pub flags: VkSemaphoreImportFlags,
    pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_VkImportSemaphoreFdInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkImportSemaphoreFdInfoKHR>(),
        40usize,
        concat!("Size of: ", stringify!(VkImportSemaphoreFdInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImportSemaphoreFdInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImportSemaphoreFdInfoKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImportSemaphoreFdInfoKHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportSemaphoreFdInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImportSemaphoreFdInfoKHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportSemaphoreFdInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImportSemaphoreFdInfoKHR>())).semaphore as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportSemaphoreFdInfoKHR),
            "::",
            stringify!(semaphore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImportSemaphoreFdInfoKHR>())).flags as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportSemaphoreFdInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImportSemaphoreFdInfoKHR>())).handleType as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportSemaphoreFdInfoKHR),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImportSemaphoreFdInfoKHR>())).fd as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportSemaphoreFdInfoKHR),
            "::",
            stringify!(fd)
        )
    );
}
impl Default for VkImportSemaphoreFdInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreGetFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphore: VkSemaphore,
    pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkSemaphoreGetFdInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkSemaphoreGetFdInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkSemaphoreGetFdInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSemaphoreGetFdInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSemaphoreGetFdInfoKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreGetFdInfoKHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreGetFdInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSemaphoreGetFdInfoKHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreGetFdInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSemaphoreGetFdInfoKHR>())).semaphore as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreGetFdInfoKHR),
            "::",
            stringify!(semaphore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSemaphoreGetFdInfoKHR>())).handleType as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreGetFdInfoKHR),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkSemaphoreGetFdInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkImportSemaphoreFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pImportSemaphoreFdInfo: *const VkImportSemaphoreFdInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetSemaphoreFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pGetFdInfo: *const VkSemaphoreGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkImportSemaphoreFdKHR(
        device: VkDevice,
        pImportSemaphoreFdInfo: *const VkImportSemaphoreFdInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetSemaphoreFdKHR(
        device: VkDevice,
        pGetFdInfo: *const VkSemaphoreGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePushDescriptorPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxPushDescriptors: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePushDescriptorPropertiesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePushDescriptorPropertiesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePushDescriptorPropertiesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePushDescriptorPropertiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePushDescriptorPropertiesKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePushDescriptorPropertiesKHR>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePushDescriptorPropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePushDescriptorPropertiesKHR>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePushDescriptorPropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePushDescriptorPropertiesKHR>()))
                .maxPushDescriptors as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePushDescriptorPropertiesKHR),
            "::",
            stringify!(maxPushDescriptors)
        )
    );
}
impl Default for VkPhysicalDevicePushDescriptorPropertiesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCmdPushDescriptorSetKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
    ),
>;
pub type PFN_vkCmdPushDescriptorSetWithTemplateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        layout: VkPipelineLayout,
        set: u32,
        pData: *const ::std::os::raw::c_void,
    ),
>;
extern "system" {
    pub fn vkCmdPushDescriptorSetKHR(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
    );
}
extern "system" {
    pub fn vkCmdPushDescriptorSetWithTemplateKHR(
        commandBuffer: VkCommandBuffer,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        layout: VkPipelineLayout,
        set: u32,
        pData: *const ::std::os::raw::c_void,
    );
}
pub type VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub type VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub type VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkRectLayerKHR {
    pub offset: VkOffset2D,
    pub extent: VkExtent2D,
    pub layer: u32,
}
#[test]
fn bindgen_test_layout_VkRectLayerKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkRectLayerKHR>(),
        20usize,
        concat!("Size of: ", stringify!(VkRectLayerKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRectLayerKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkRectLayerKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkRectLayerKHR>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRectLayerKHR),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkRectLayerKHR>())).extent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRectLayerKHR),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkRectLayerKHR>())).layer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRectLayerKHR),
            "::",
            stringify!(layer)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentRegionKHR {
    pub rectangleCount: u32,
    pub pRectangles: *const VkRectLayerKHR,
}
#[test]
fn bindgen_test_layout_VkPresentRegionKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPresentRegionKHR>(),
        16usize,
        concat!("Size of: ", stringify!(VkPresentRegionKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPresentRegionKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPresentRegionKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPresentRegionKHR>())).rectangleCount as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentRegionKHR),
            "::",
            stringify!(rectangleCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentRegionKHR>())).pRectangles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentRegionKHR),
            "::",
            stringify!(pRectangles)
        )
    );
}
impl Default for VkPresentRegionKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentRegionsKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pRegions: *const VkPresentRegionKHR,
}
#[test]
fn bindgen_test_layout_VkPresentRegionsKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPresentRegionsKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkPresentRegionsKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPresentRegionsKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPresentRegionsKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentRegionsKHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentRegionsKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentRegionsKHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentRegionsKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPresentRegionsKHR>())).swapchainCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentRegionsKHR),
            "::",
            stringify!(swapchainCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentRegionsKHR>())).pRegions as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentRegionsKHR),
            "::",
            stringify!(pRegions)
        )
    );
}
impl Default for VkPresentRegionsKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;
pub use self::VkDescriptorUpdateTemplateType as VkDescriptorUpdateTemplateTypeKHR;
pub type VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;
pub type VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;
pub type VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;
pub type PFN_vkCreateDescriptorUpdateTemplateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorUpdateTemplateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkUpdateDescriptorSetWithTemplateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::std::os::raw::c_void,
    ),
>;
extern "system" {
    pub fn vkCreateDescriptorUpdateTemplateKHR(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDescriptorUpdateTemplateKHR(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkUpdateDescriptorSetWithTemplateKHR(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::std::os::raw::c_void,
    );
}
pub type VkPhysicalDeviceImagelessFramebufferFeaturesKHR =
    VkPhysicalDeviceImagelessFramebufferFeatures;
pub type VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;
pub type VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;
pub type VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;
pub type VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;
pub type VkAttachmentDescription2KHR = VkAttachmentDescription2;
pub type VkAttachmentReference2KHR = VkAttachmentReference2;
pub type VkSubpassDescription2KHR = VkSubpassDescription2;
pub type VkSubpassDependency2KHR = VkSubpassDependency2;
pub type VkSubpassBeginInfoKHR = VkSubpassBeginInfo;
pub type VkSubpassEndInfoKHR = VkSubpassEndInfo;
pub type PFN_vkCreateRenderPass2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult,
>;
pub type PFN_vkCmdBeginRenderPass2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    ),
>;
pub type PFN_vkCmdNextSubpass2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    ),
>;
pub type PFN_vkCmdEndRenderPass2KHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pSubpassEndInfo: *const VkSubpassEndInfo),
>;
extern "system" {
    pub fn vkCreateRenderPass2KHR(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdBeginRenderPass2KHR(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    );
}
extern "system" {
    pub fn vkCmdNextSubpass2KHR(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    );
}
extern "system" {
    pub fn vkCmdEndRenderPass2KHR(
        commandBuffer: VkCommandBuffer,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSharedPresentSurfaceCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub sharedPresentSupportedUsageFlags: VkImageUsageFlags,
}
#[test]
fn bindgen_test_layout_VkSharedPresentSurfaceCapabilitiesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkSharedPresentSurfaceCapabilitiesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkSharedPresentSurfaceCapabilitiesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSharedPresentSurfaceCapabilitiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSharedPresentSurfaceCapabilitiesKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSharedPresentSurfaceCapabilitiesKHR>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSharedPresentSurfaceCapabilitiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSharedPresentSurfaceCapabilitiesKHR>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSharedPresentSurfaceCapabilitiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSharedPresentSurfaceCapabilitiesKHR>()))
                .sharedPresentSupportedUsageFlags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSharedPresentSurfaceCapabilitiesKHR),
            "::",
            stringify!(sharedPresentSupportedUsageFlags)
        )
    );
}
impl Default for VkSharedPresentSurfaceCapabilitiesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetSwapchainStatusKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, swapchain: VkSwapchainKHR) -> VkResult,
>;
extern "system" {
    pub fn vkGetSwapchainStatusKHR(device: VkDevice, swapchain: VkSwapchainKHR) -> VkResult;
}
pub type VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;
pub use self::VkExternalFenceHandleTypeFlagBits as VkExternalFenceHandleTypeFlagBitsKHR;
pub type VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;
pub use self::VkExternalFenceFeatureFlagBits as VkExternalFenceFeatureFlagBitsKHR;
pub type VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;
pub type VkExternalFencePropertiesKHR = VkExternalFenceProperties;
pub type PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    ),
>;
extern "system" {
    pub fn vkGetPhysicalDeviceExternalFencePropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    );
}
pub type VkFenceImportFlagsKHR = VkFenceImportFlags;
pub use self::VkFenceImportFlagBits as VkFenceImportFlagBitsKHR;
pub type VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportFenceFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub fence: VkFence,
    pub flags: VkFenceImportFlags,
    pub handleType: VkExternalFenceHandleTypeFlagBits,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_VkImportFenceFdInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkImportFenceFdInfoKHR>(),
        40usize,
        concat!("Size of: ", stringify!(VkImportFenceFdInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImportFenceFdInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImportFenceFdInfoKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImportFenceFdInfoKHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportFenceFdInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImportFenceFdInfoKHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportFenceFdInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImportFenceFdInfoKHR>())).fence as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportFenceFdInfoKHR),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImportFenceFdInfoKHR>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportFenceFdInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImportFenceFdInfoKHR>())).handleType as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportFenceFdInfoKHR),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImportFenceFdInfoKHR>())).fd as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportFenceFdInfoKHR),
            "::",
            stringify!(fd)
        )
    );
}
impl Default for VkImportFenceFdInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFenceGetFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub fence: VkFence,
    pub handleType: VkExternalFenceHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkFenceGetFdInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkFenceGetFdInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkFenceGetFdInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFenceGetFdInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFenceGetFdInfoKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFenceGetFdInfoKHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceGetFdInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFenceGetFdInfoKHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceGetFdInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFenceGetFdInfoKHR>())).fence as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceGetFdInfoKHR),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkFenceGetFdInfoKHR>())).handleType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceGetFdInfoKHR),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkFenceGetFdInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkImportFenceFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pImportFenceFdInfo: *const VkImportFenceFdInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetFenceFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pGetFdInfo: *const VkFenceGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkImportFenceFdKHR(
        device: VkDevice,
        pImportFenceFdInfo: *const VkImportFenceFdInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetFenceFdKHR(
        device: VkDevice,
        pGetFdInfo: *const VkFenceGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult;
}
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR:
    VkPerformanceCounterUnitKHR = 0;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR:
    VkPerformanceCounterUnitKHR = 1;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR:
    VkPerformanceCounterUnitKHR = 2;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR:
    VkPerformanceCounterUnitKHR = 3;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR:
    VkPerformanceCounterUnitKHR = 4;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR:
    VkPerformanceCounterUnitKHR = 5;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR:
    VkPerformanceCounterUnitKHR = 6;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR:
    VkPerformanceCounterUnitKHR = 7;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR:
    VkPerformanceCounterUnitKHR = 8;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR:
    VkPerformanceCounterUnitKHR = 9;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR:
    VkPerformanceCounterUnitKHR = 10;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR:
    VkPerformanceCounterUnitKHR = 2147483647;
pub type VkPerformanceCounterUnitKHR = ::std::os::raw::c_uint;
pub const VkPerformanceCounterScopeKHR_VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR:
    VkPerformanceCounterScopeKHR = 0;
pub const VkPerformanceCounterScopeKHR_VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR:
    VkPerformanceCounterScopeKHR = 1;
pub const VkPerformanceCounterScopeKHR_VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR:
    VkPerformanceCounterScopeKHR = 2;
pub const VkPerformanceCounterScopeKHR_VK_QUERY_SCOPE_COMMAND_BUFFER_KHR:
    VkPerformanceCounterScopeKHR = 0;
pub const VkPerformanceCounterScopeKHR_VK_QUERY_SCOPE_RENDER_PASS_KHR:
    VkPerformanceCounterScopeKHR = 1;
pub const VkPerformanceCounterScopeKHR_VK_QUERY_SCOPE_COMMAND_KHR: VkPerformanceCounterScopeKHR = 2;
pub const VkPerformanceCounterScopeKHR_VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR:
    VkPerformanceCounterScopeKHR = 2147483647;
pub type VkPerformanceCounterScopeKHR = ::std::os::raw::c_uint;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR:
    VkPerformanceCounterStorageKHR = 0;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR:
    VkPerformanceCounterStorageKHR = 1;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR:
    VkPerformanceCounterStorageKHR = 2;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR:
    VkPerformanceCounterStorageKHR = 3;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR:
    VkPerformanceCounterStorageKHR = 4;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR:
    VkPerformanceCounterStorageKHR = 5;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR:
    VkPerformanceCounterStorageKHR = 2147483647;
pub type VkPerformanceCounterStorageKHR = ::std::os::raw::c_uint;
pub const VkPerformanceCounterDescriptionFlagBitsKHR_VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = 1 ;
pub const VkPerformanceCounterDescriptionFlagBitsKHR_VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = 2 ;
pub const VkPerformanceCounterDescriptionFlagBitsKHR_VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = 2147483647 ;
pub type VkPerformanceCounterDescriptionFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkPerformanceCounterDescriptionFlagsKHR = VkFlags;
pub const VkAcquireProfilingLockFlagBitsKHR_VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR:
    VkAcquireProfilingLockFlagBitsKHR = 2147483647;
pub type VkAcquireProfilingLockFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkAcquireProfilingLockFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub performanceCounterQueryPools: VkBool32,
    pub performanceCounterMultipleQueryPools: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePerformanceQueryFeaturesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePerformanceQueryFeaturesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePerformanceQueryFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePerformanceQueryFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePerformanceQueryFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePerformanceQueryFeaturesKHR>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePerformanceQueryFeaturesKHR>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePerformanceQueryFeaturesKHR>()))
                .performanceCounterQueryPools as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryFeaturesKHR),
            "::",
            stringify!(performanceCounterQueryPools)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePerformanceQueryFeaturesKHR>()))
                .performanceCounterMultipleQueryPools as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryFeaturesKHR),
            "::",
            stringify!(performanceCounterMultipleQueryPools)
        )
    );
}
impl Default for VkPhysicalDevicePerformanceQueryFeaturesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub allowCommandBufferQueryCopies: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePerformanceQueryPropertiesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePerformanceQueryPropertiesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePerformanceQueryPropertiesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePerformanceQueryPropertiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePerformanceQueryPropertiesKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePerformanceQueryPropertiesKHR>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryPropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePerformanceQueryPropertiesKHR>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryPropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePerformanceQueryPropertiesKHR>()))
                .allowCommandBufferQueryCopies as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryPropertiesKHR),
            "::",
            stringify!(allowCommandBufferQueryCopies)
        )
    );
}
impl Default for VkPhysicalDevicePerformanceQueryPropertiesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceCounterKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub unit: VkPerformanceCounterUnitKHR,
    pub scope: VkPerformanceCounterScopeKHR,
    pub storage: VkPerformanceCounterStorageKHR,
    pub uuid: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_VkPerformanceCounterKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceCounterKHR>(),
        48usize,
        concat!("Size of: ", stringify!(VkPerformanceCounterKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceCounterKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceCounterKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPerformanceCounterKHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPerformanceCounterKHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPerformanceCounterKHR>())).unit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterKHR),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPerformanceCounterKHR>())).scope as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterKHR),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPerformanceCounterKHR>())).storage as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterKHR),
            "::",
            stringify!(storage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPerformanceCounterKHR>())).uuid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterKHR),
            "::",
            stringify!(uuid)
        )
    );
}
impl Default for VkPerformanceCounterKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceCounterDescriptionKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPerformanceCounterDescriptionFlagsKHR,
    pub name: [::std::os::raw::c_char; 256usize],
    pub category: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_VkPerformanceCounterDescriptionKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceCounterDescriptionKHR>(),
        792usize,
        concat!("Size of: ", stringify!(VkPerformanceCounterDescriptionKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceCounterDescriptionKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPerformanceCounterDescriptionKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceCounterDescriptionKHR>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterDescriptionKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceCounterDescriptionKHR>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterDescriptionKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceCounterDescriptionKHR>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterDescriptionKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceCounterDescriptionKHR>())).name as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterDescriptionKHR),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceCounterDescriptionKHR>())).category as *const _
                as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterDescriptionKHR),
            "::",
            stringify!(category)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceCounterDescriptionKHR>())).description as *const _
                as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterDescriptionKHR),
            "::",
            stringify!(description)
        )
    );
}
impl Default for VkPerformanceCounterDescriptionKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPoolPerformanceCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub queueFamilyIndex: u32,
    pub counterIndexCount: u32,
    pub pCounterIndices: *const u32,
}
#[test]
fn bindgen_test_layout_VkQueryPoolPerformanceCreateInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkQueryPoolPerformanceCreateInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkQueryPoolPerformanceCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueryPoolPerformanceCreateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkQueryPoolPerformanceCreateInfoKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueryPoolPerformanceCreateInfoKHR>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueryPoolPerformanceCreateInfoKHR>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueryPoolPerformanceCreateInfoKHR>())).queueFamilyIndex
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceCreateInfoKHR),
            "::",
            stringify!(queueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueryPoolPerformanceCreateInfoKHR>())).counterIndexCount
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceCreateInfoKHR),
            "::",
            stringify!(counterIndexCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueryPoolPerformanceCreateInfoKHR>())).pCounterIndices
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceCreateInfoKHR),
            "::",
            stringify!(pCounterIndices)
        )
    );
}
impl Default for VkQueryPoolPerformanceCreateInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPerformanceCounterResultKHR {
    pub int32: i32,
    pub int64: i64,
    pub uint32: u32,
    pub uint64: u64,
    pub float32: f32,
    pub float64: f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_VkPerformanceCounterResultKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceCounterResultKHR>(),
        8usize,
        concat!("Size of: ", stringify!(VkPerformanceCounterResultKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceCounterResultKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceCounterResultKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceCounterResultKHR>())).int32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterResultKHR),
            "::",
            stringify!(int32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceCounterResultKHR>())).int64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterResultKHR),
            "::",
            stringify!(int64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceCounterResultKHR>())).uint32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterResultKHR),
            "::",
            stringify!(uint32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceCounterResultKHR>())).uint64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterResultKHR),
            "::",
            stringify!(uint64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceCounterResultKHR>())).float32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterResultKHR),
            "::",
            stringify!(float32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceCounterResultKHR>())).float64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterResultKHR),
            "::",
            stringify!(float64)
        )
    );
}
impl Default for VkPerformanceCounterResultKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAcquireProfilingLockInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkAcquireProfilingLockFlagsKHR,
    pub timeout: u64,
}
#[test]
fn bindgen_test_layout_VkAcquireProfilingLockInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkAcquireProfilingLockInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkAcquireProfilingLockInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAcquireProfilingLockInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAcquireProfilingLockInfoKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAcquireProfilingLockInfoKHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireProfilingLockInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAcquireProfilingLockInfoKHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireProfilingLockInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAcquireProfilingLockInfoKHR>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireProfilingLockInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAcquireProfilingLockInfoKHR>())).timeout as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireProfilingLockInfoKHR),
            "::",
            stringify!(timeout)
        )
    );
}
impl Default for VkAcquireProfilingLockInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceQuerySubmitInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub counterPassIndex: u32,
}
#[test]
fn bindgen_test_layout_VkPerformanceQuerySubmitInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceQuerySubmitInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkPerformanceQuerySubmitInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceQuerySubmitInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceQuerySubmitInfoKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceQuerySubmitInfoKHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceQuerySubmitInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceQuerySubmitInfoKHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceQuerySubmitInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceQuerySubmitInfoKHR>())).counterPassIndex as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceQuerySubmitInfoKHR),
            "::",
            stringify!(counterPassIndex)
        )
    );
}
impl Default for VkPerformanceQuerySubmitInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR =
    ::std::option::Option<
        unsafe extern "system" fn(
            physicalDevice: VkPhysicalDevice,
            queueFamilyIndex: u32,
            pCounterCount: *mut u32,
            pCounters: *mut VkPerformanceCounterKHR,
            pCounterDescriptions: *mut VkPerformanceCounterDescriptionKHR,
        ) -> VkResult,
    >;
pub type PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPerformanceQueryCreateInfo: *const VkQueryPoolPerformanceCreateInfoKHR,
        pNumPasses: *mut u32,
    ),
>;
pub type PFN_vkAcquireProfilingLockKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pInfo: *const VkAcquireProfilingLockInfoKHR) -> VkResult,
>;
pub type PFN_vkReleaseProfilingLockKHR =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice)>;
extern "system" {
    pub fn vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        physicalDevice: VkPhysicalDevice,
        queueFamilyIndex: u32,
        pCounterCount: *mut u32,
        pCounters: *mut VkPerformanceCounterKHR,
        pCounterDescriptions: *mut VkPerformanceCounterDescriptionKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
        physicalDevice: VkPhysicalDevice,
        pPerformanceQueryCreateInfo: *const VkQueryPoolPerformanceCreateInfoKHR,
        pNumPasses: *mut u32,
    );
}
extern "system" {
    pub fn vkAcquireProfilingLockKHR(
        device: VkDevice,
        pInfo: *const VkAcquireProfilingLockInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkReleaseProfilingLockKHR(device: VkDevice);
}
pub use self::VkPointClippingBehavior as VkPointClippingBehaviorKHR;
pub use self::VkTessellationDomainOrigin as VkTessellationDomainOriginKHR;
pub type VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;
pub type VkRenderPassInputAttachmentAspectCreateInfoKHR =
    VkRenderPassInputAttachmentAspectCreateInfo;
pub type VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;
pub type VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;
pub type VkPipelineTessellationDomainOriginStateCreateInfoKHR =
    VkPipelineTessellationDomainOriginStateCreateInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSurfaceInfo2KHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub surface: VkSurfaceKHR,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSurfaceInfo2KHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSurfaceInfo2KHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceSurfaceInfo2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSurfaceInfo2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceSurfaceInfo2KHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSurfaceInfo2KHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSurfaceInfo2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSurfaceInfo2KHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSurfaceInfo2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSurfaceInfo2KHR>())).surface as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSurfaceInfo2KHR),
            "::",
            stringify!(surface)
        )
    );
}
impl Default for VkPhysicalDeviceSurfaceInfo2KHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilities2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub surfaceCapabilities: VkSurfaceCapabilitiesKHR,
}
#[test]
fn bindgen_test_layout_VkSurfaceCapabilities2KHR() {
    assert_eq!(
        ::std::mem::size_of::<VkSurfaceCapabilities2KHR>(),
        72usize,
        concat!("Size of: ", stringify!(VkSurfaceCapabilities2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfaceCapabilities2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSurfaceCapabilities2KHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSurfaceCapabilities2KHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSurfaceCapabilities2KHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilities2KHR>())).surfaceCapabilities as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2KHR),
            "::",
            stringify!(surfaceCapabilities)
        )
    );
}
impl Default for VkSurfaceCapabilities2KHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceFormat2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub surfaceFormat: VkSurfaceFormatKHR,
}
#[test]
fn bindgen_test_layout_VkSurfaceFormat2KHR() {
    assert_eq!(
        ::std::mem::size_of::<VkSurfaceFormat2KHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkSurfaceFormat2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfaceFormat2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSurfaceFormat2KHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSurfaceFormat2KHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceFormat2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSurfaceFormat2KHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceFormat2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceFormat2KHR>())).surfaceFormat as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceFormat2KHR),
            "::",
            stringify!(surfaceFormat)
        )
    );
}
impl Default for VkSurfaceFormat2KHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormat2KHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2KHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceFormats2KHR(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormat2KHR,
    ) -> VkResult;
}
pub type VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub type VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayProperties2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub displayProperties: VkDisplayPropertiesKHR,
}
#[test]
fn bindgen_test_layout_VkDisplayProperties2KHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayProperties2KHR>(),
        64usize,
        concat!("Size of: ", stringify!(VkDisplayProperties2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayProperties2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayProperties2KHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayProperties2KHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayProperties2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayProperties2KHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayProperties2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayProperties2KHR>())).displayProperties as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayProperties2KHR),
            "::",
            stringify!(displayProperties)
        )
    );
}
impl Default for VkDisplayProperties2KHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneProperties2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub displayPlaneProperties: VkDisplayPlanePropertiesKHR,
}
#[test]
fn bindgen_test_layout_VkDisplayPlaneProperties2KHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPlaneProperties2KHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkDisplayPlaneProperties2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPlaneProperties2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPlaneProperties2KHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneProperties2KHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneProperties2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneProperties2KHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneProperties2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneProperties2KHR>())).displayPlaneProperties
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneProperties2KHR),
            "::",
            stringify!(displayPlaneProperties)
        )
    );
}
impl Default for VkDisplayPlaneProperties2KHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModeProperties2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub displayModeProperties: VkDisplayModePropertiesKHR,
}
#[test]
fn bindgen_test_layout_VkDisplayModeProperties2KHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayModeProperties2KHR>(),
        40usize,
        concat!("Size of: ", stringify!(VkDisplayModeProperties2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayModeProperties2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayModeProperties2KHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayModeProperties2KHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeProperties2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayModeProperties2KHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeProperties2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayModeProperties2KHR>())).displayModeProperties
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeProperties2KHR),
            "::",
            stringify!(displayModeProperties)
        )
    );
}
impl Default for VkDisplayModeProperties2KHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneInfo2KHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub mode: VkDisplayModeKHR,
    pub planeIndex: u32,
}
#[test]
fn bindgen_test_layout_VkDisplayPlaneInfo2KHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPlaneInfo2KHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkDisplayPlaneInfo2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPlaneInfo2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPlaneInfo2KHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayPlaneInfo2KHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneInfo2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayPlaneInfo2KHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneInfo2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayPlaneInfo2KHR>())).mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneInfo2KHR),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneInfo2KHR>())).planeIndex as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneInfo2KHR),
            "::",
            stringify!(planeIndex)
        )
    );
}
impl Default for VkDisplayPlaneInfo2KHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneCapabilities2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub capabilities: VkDisplayPlaneCapabilitiesKHR,
}
#[test]
fn bindgen_test_layout_VkDisplayPlaneCapabilities2KHR() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPlaneCapabilities2KHR>(),
        88usize,
        concat!("Size of: ", stringify!(VkDisplayPlaneCapabilities2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPlaneCapabilities2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPlaneCapabilities2KHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneCapabilities2KHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilities2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneCapabilities2KHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilities2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPlaneCapabilities2KHR>())).capabilities as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilities2KHR),
            "::",
            stringify!(capabilities)
        )
    );
}
impl Default for VkDisplayPlaneCapabilities2KHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetPhysicalDeviceDisplayProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayProperties2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlaneProperties2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayModeProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModeProperties2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayPlaneCapabilities2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pDisplayPlaneInfo: *const VkDisplayPlaneInfo2KHR,
        pCapabilities: *mut VkDisplayPlaneCapabilities2KHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceDisplayProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayProperties2KHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlaneProperties2KHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDisplayModeProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModeProperties2KHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDisplayPlaneCapabilities2KHR(
        physicalDevice: VkPhysicalDevice,
        pDisplayPlaneInfo: *const VkDisplayPlaneInfo2KHR,
        pCapabilities: *mut VkDisplayPlaneCapabilities2KHR,
    ) -> VkResult;
}
pub type VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;
pub type VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;
pub type VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;
pub type VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;
pub type VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;
pub type VkMemoryRequirements2KHR = VkMemoryRequirements2;
pub type VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;
pub type PFN_vkGetImageMemoryRequirements2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetBufferMemoryRequirements2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetImageSparseMemoryRequirements2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
extern "system" {
    pub fn vkGetImageMemoryRequirements2KHR(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetBufferMemoryRequirements2KHR(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetImageSparseMemoryRequirements2KHR(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    );
}
pub type VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;
pub type VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;
pub use self::VkChromaLocation as VkChromaLocationKHR;
pub use self::VkSamplerYcbcrModelConversion as VkSamplerYcbcrModelConversionKHR;
pub use self::VkSamplerYcbcrRange as VkSamplerYcbcrRangeKHR;
pub type VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;
pub type VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;
pub type VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;
pub type VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;
pub type VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR =
    VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub type VkSamplerYcbcrConversionImageFormatPropertiesKHR =
    VkSamplerYcbcrConversionImageFormatProperties;
pub type PFN_vkCreateSamplerYcbcrConversionKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult,
>;
pub type PFN_vkDestroySamplerYcbcrConversionKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
extern "system" {
    pub fn vkCreateSamplerYcbcrConversionKHR(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroySamplerYcbcrConversionKHR(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    );
}
pub type VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;
pub type VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;
pub type PFN_vkBindBufferMemory2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkBindImageMemory2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkBindBufferMemory2KHR(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult;
}
extern "system" {
    pub fn vkBindImageMemory2KHR(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult;
}
pub type VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;
pub type VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;
pub type PFN_vkGetDescriptorSetLayoutSupportKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    ),
>;
extern "system" {
    pub fn vkGetDescriptorSetLayoutSupportKHR(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    );
}
pub type PFN_vkCmdDrawIndirectCountKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirectCountKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
extern "system" {
    pub fn vkCmdDrawIndirectCountKHR(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndexedIndirectCountKHR(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
pub type VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR =
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub type VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;
pub type VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderClockFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSubgroupClock: VkBool32,
    pub shaderDeviceClock: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderClockFeaturesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderClockFeaturesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderClockFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderClockFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderClockFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderClockFeaturesKHR>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderClockFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderClockFeaturesKHR>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderClockFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderClockFeaturesKHR>())).shaderSubgroupClock
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderClockFeaturesKHR),
            "::",
            stringify!(shaderSubgroupClock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderClockFeaturesKHR>())).shaderDeviceClock
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderClockFeaturesKHR),
            "::",
            stringify!(shaderDeviceClock)
        )
    );
}
impl Default for VkPhysicalDeviceShaderClockFeaturesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub use self::VkDriverId as VkDriverIdKHR;
pub type VkConformanceVersionKHR = VkConformanceVersion;
pub type VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;
pub use self::VkShaderFloatControlsIndependence as VkShaderFloatControlsIndependenceKHR;
pub type VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;
pub use self::VkResolveModeFlagBits as VkResolveModeFlagBitsKHR;
pub type VkResolveModeFlagsKHR = VkResolveModeFlags;
pub type VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;
pub type VkPhysicalDeviceDepthStencilResolvePropertiesKHR =
    VkPhysicalDeviceDepthStencilResolveProperties;
pub use self::VkSemaphoreType as VkSemaphoreTypeKHR;
pub use self::VkSemaphoreWaitFlagBits as VkSemaphoreWaitFlagBitsKHR;
pub type VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags;
pub type VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;
pub type VkPhysicalDeviceTimelineSemaphorePropertiesKHR =
    VkPhysicalDeviceTimelineSemaphoreProperties;
pub type VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;
pub type VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;
pub type VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;
pub type VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;
pub type PFN_vkGetSemaphoreCounterValueKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, semaphore: VkSemaphore, pValue: *mut u64) -> VkResult,
>;
pub type PFN_vkWaitSemaphoresKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult,
>;
pub type PFN_vkSignalSemaphoreKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pSignalInfo: *const VkSemaphoreSignalInfo) -> VkResult,
>;
extern "system" {
    pub fn vkGetSemaphoreCounterValueKHR(
        device: VkDevice,
        semaphore: VkSemaphore,
        pValue: *mut u64,
    ) -> VkResult;
}
extern "system" {
    pub fn vkWaitSemaphoresKHR(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult;
}
extern "system" {
    pub fn vkSignalSemaphoreKHR(
        device: VkDevice,
        pSignalInfo: *const VkSemaphoreSignalInfo,
    ) -> VkResult;
}
pub type VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceProtectedCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub supportsProtected: VkBool32,
}
#[test]
fn bindgen_test_layout_VkSurfaceProtectedCapabilitiesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkSurfaceProtectedCapabilitiesKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkSurfaceProtectedCapabilitiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfaceProtectedCapabilitiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSurfaceProtectedCapabilitiesKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceProtectedCapabilitiesKHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceProtectedCapabilitiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceProtectedCapabilitiesKHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceProtectedCapabilitiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceProtectedCapabilitiesKHR>())).supportsProtected
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceProtectedCapabilitiesKHR),
            "::",
            stringify!(supportsProtected)
        )
    );
}
impl Default for VkSurfaceProtectedCapabilitiesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR =
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub type VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;
pub type VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;
pub type VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR =
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
pub type VkPhysicalDeviceBufferDeviceAddressFeaturesKHR =
    VkPhysicalDeviceBufferDeviceAddressFeatures;
pub type VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;
pub type VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;
pub type VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;
pub type VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;
pub type PFN_vkGetBufferDeviceAddressKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress,
>;
pub type PFN_vkGetBufferOpaqueCaptureAddressKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo) -> u64,
>;
pub type PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64,
>;
extern "system" {
    pub fn vkGetBufferDeviceAddressKHR(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress;
}
extern "system" {
    pub fn vkGetBufferOpaqueCaptureAddressKHR(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> u64;
}
extern "system" {
    pub fn vkGetDeviceMemoryOpaqueCaptureAddressKHR(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64;
}
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR : VkPipelineExecutableStatisticFormatKHR = 0 ;
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR : VkPipelineExecutableStatisticFormatKHR = 1 ;
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR : VkPipelineExecutableStatisticFormatKHR = 2 ;
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR : VkPipelineExecutableStatisticFormatKHR = 3 ;
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR : VkPipelineExecutableStatisticFormatKHR = 2147483647 ;
pub type VkPipelineExecutableStatisticFormatKHR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineExecutableInfo: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR>()))
                .sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR>()))
                .pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR>()))
                .pipelineExecutableInfo as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR),
            "::",
            stringify!(pipelineExecutableInfo)
        )
    );
}
impl Default for VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipeline: VkPipeline,
}
#[test]
fn bindgen_test_layout_VkPipelineInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkPipelineInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineInfoKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPipelineInfoKHR>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPipelineInfoKHR>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPipelineInfoKHR>())).pipeline as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInfoKHR),
            "::",
            stringify!(pipeline)
        )
    );
}
impl Default for VkPipelineInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutablePropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stages: VkShaderStageFlags,
    pub name: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 256usize],
    pub subgroupSize: u32,
}
#[test]
fn bindgen_test_layout_VkPipelineExecutablePropertiesKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineExecutablePropertiesKHR>(),
        536usize,
        concat!("Size of: ", stringify!(VkPipelineExecutablePropertiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineExecutablePropertiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineExecutablePropertiesKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutablePropertiesKHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutablePropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutablePropertiesKHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutablePropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutablePropertiesKHR>())).stages as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutablePropertiesKHR),
            "::",
            stringify!(stages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutablePropertiesKHR>())).name as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutablePropertiesKHR),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutablePropertiesKHR>())).description as *const _
                as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutablePropertiesKHR),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutablePropertiesKHR>())).subgroupSize as *const _
                as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutablePropertiesKHR),
            "::",
            stringify!(subgroupSize)
        )
    );
}
impl Default for VkPipelineExecutablePropertiesKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutableInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipeline: VkPipeline,
    pub executableIndex: u32,
}
#[test]
fn bindgen_test_layout_VkPipelineExecutableInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineExecutableInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkPipelineExecutableInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineExecutableInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineExecutableInfoKHR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableInfoKHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableInfoKHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableInfoKHR>())).pipeline as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInfoKHR),
            "::",
            stringify!(pipeline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableInfoKHR>())).executableIndex as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInfoKHR),
            "::",
            stringify!(executableIndex)
        )
    );
}
impl Default for VkPipelineExecutableInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPipelineExecutableStatisticValueKHR {
    pub b32: VkBool32,
    pub i64_: i64,
    pub u64_: u64,
    pub f64_: f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_VkPipelineExecutableStatisticValueKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineExecutableStatisticValueKHR>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineExecutableStatisticValueKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineExecutableStatisticValueKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineExecutableStatisticValueKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableStatisticValueKHR>())).b32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticValueKHR),
            "::",
            stringify!(b32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableStatisticValueKHR>())).i64_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticValueKHR),
            "::",
            stringify!(i64_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableStatisticValueKHR>())).u64_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticValueKHR),
            "::",
            stringify!(u64_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableStatisticValueKHR>())).f64_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticValueKHR),
            "::",
            stringify!(f64_)
        )
    );
}
impl Default for VkPipelineExecutableStatisticValueKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutableStatisticKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 256usize],
    pub format: VkPipelineExecutableStatisticFormatKHR,
    pub value: VkPipelineExecutableStatisticValueKHR,
}
#[test]
fn bindgen_test_layout_VkPipelineExecutableStatisticKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineExecutableStatisticKHR>(),
        544usize,
        concat!("Size of: ", stringify!(VkPipelineExecutableStatisticKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineExecutableStatisticKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineExecutableStatisticKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableStatisticKHR>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableStatisticKHR>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableStatisticKHR>())).name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticKHR),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableStatisticKHR>())).description as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticKHR),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableStatisticKHR>())).format as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticKHR),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableStatisticKHR>())).value as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticKHR),
            "::",
            stringify!(value)
        )
    );
}
impl Default for VkPipelineExecutableStatisticKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutableInternalRepresentationKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 256usize],
    pub isText: VkBool32,
    pub dataSize: size_t,
    pub pData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkPipelineExecutableInternalRepresentationKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineExecutableInternalRepresentationKHR>(),
        552usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineExecutableInternalRepresentationKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableInternalRepresentationKHR>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableInternalRepresentationKHR>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableInternalRepresentationKHR>())).name
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableInternalRepresentationKHR>())).description
                as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableInternalRepresentationKHR>())).isText
                as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(isText)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableInternalRepresentationKHR>())).dataSize
                as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineExecutableInternalRepresentationKHR>())).pData
                as *const _ as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(pData)
        )
    );
}
impl Default for VkPipelineExecutableInternalRepresentationKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetPipelineExecutablePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pPipelineInfo: *const VkPipelineInfoKHR,
        pExecutableCount: *mut u32,
        pProperties: *mut VkPipelineExecutablePropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPipelineExecutableStatisticsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pStatisticCount: *mut u32,
        pStatistics: *mut VkPipelineExecutableStatisticKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPipelineExecutableInternalRepresentationsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pInternalRepresentationCount: *mut u32,
        pInternalRepresentations: *mut VkPipelineExecutableInternalRepresentationKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPipelineExecutablePropertiesKHR(
        device: VkDevice,
        pPipelineInfo: *const VkPipelineInfoKHR,
        pExecutableCount: *mut u32,
        pProperties: *mut VkPipelineExecutablePropertiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPipelineExecutableStatisticsKHR(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pStatisticCount: *mut u32,
        pStatistics: *mut VkPipelineExecutableStatisticKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPipelineExecutableInternalRepresentationsKHR(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pInternalRepresentationCount: *mut u32,
        pInternalRepresentations: *mut VkPipelineExecutableInternalRepresentationKHR,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugReportCallbackEXT_T {
    _unused: [u8; 0],
}
pub type VkDebugReportCallbackEXT = *mut VkDebugReportCallbackEXT_T;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT:
    VkDebugReportObjectTypeEXT = 0;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT:
    VkDebugReportObjectTypeEXT = 1;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT:
    VkDebugReportObjectTypeEXT = 2;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT:
    VkDebugReportObjectTypeEXT = 3;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT:
    VkDebugReportObjectTypeEXT = 4;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT:
    VkDebugReportObjectTypeEXT = 5;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT:
    VkDebugReportObjectTypeEXT = 6;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT:
    VkDebugReportObjectTypeEXT = 7;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT:
    VkDebugReportObjectTypeEXT = 8;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT:
    VkDebugReportObjectTypeEXT = 9;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT:
    VkDebugReportObjectTypeEXT = 10;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT:
    VkDebugReportObjectTypeEXT = 11;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT:
    VkDebugReportObjectTypeEXT = 12;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT:
    VkDebugReportObjectTypeEXT = 13;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT:
    VkDebugReportObjectTypeEXT = 14;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT:
    VkDebugReportObjectTypeEXT = 15;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT:
    VkDebugReportObjectTypeEXT = 16;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT:
    VkDebugReportObjectTypeEXT = 17;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT:
    VkDebugReportObjectTypeEXT = 18;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT:
    VkDebugReportObjectTypeEXT = 19;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT:
    VkDebugReportObjectTypeEXT = 20;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT:
    VkDebugReportObjectTypeEXT = 21;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT:
    VkDebugReportObjectTypeEXT = 22;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT:
    VkDebugReportObjectTypeEXT = 23;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT:
    VkDebugReportObjectTypeEXT = 24;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT:
    VkDebugReportObjectTypeEXT = 25;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT:
    VkDebugReportObjectTypeEXT = 26;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT:
    VkDebugReportObjectTypeEXT = 27;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT:
    VkDebugReportObjectTypeEXT = 28;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT:
    VkDebugReportObjectTypeEXT = 29;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT:
    VkDebugReportObjectTypeEXT = 30;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT:
    VkDebugReportObjectTypeEXT = 33;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT:
    VkDebugReportObjectTypeEXT = 1000156000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT:
    VkDebugReportObjectTypeEXT = 1000085000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT:
    VkDebugReportObjectTypeEXT = 1000165000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT:
    VkDebugReportObjectTypeEXT = 28;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT:
    VkDebugReportObjectTypeEXT = 33;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT : VkDebugReportObjectTypeEXT = 1000085000 ;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT : VkDebugReportObjectTypeEXT = 1000156000 ;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT:
    VkDebugReportObjectTypeEXT = 1000165000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT:
    VkDebugReportObjectTypeEXT = 2147483647;
pub type VkDebugReportObjectTypeEXT = ::std::os::raw::c_uint;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_INFORMATION_BIT_EXT: VkDebugReportFlagBitsEXT =
    1;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_WARNING_BIT_EXT: VkDebugReportFlagBitsEXT = 2;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT:
    VkDebugReportFlagBitsEXT = 4;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_ERROR_BIT_EXT: VkDebugReportFlagBitsEXT = 8;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_DEBUG_BIT_EXT: VkDebugReportFlagBitsEXT = 16;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT:
    VkDebugReportFlagBitsEXT = 2147483647;
pub type VkDebugReportFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkDebugReportFlagsEXT = VkFlags;
pub type PFN_vkDebugReportCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        flags: VkDebugReportFlagsEXT,
        objectType: VkDebugReportObjectTypeEXT,
        object: u64,
        location: size_t,
        messageCode: i32,
        pLayerPrefix: *const ::std::os::raw::c_char,
        pMessage: *const ::std::os::raw::c_char,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> VkBool32,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugReportCallbackCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDebugReportFlagsEXT,
    pub pfnCallback: PFN_vkDebugReportCallbackEXT,
    pub pUserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkDebugReportCallbackCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDebugReportCallbackCreateInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkDebugReportCallbackCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugReportCallbackCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDebugReportCallbackCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugReportCallbackCreateInfoEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugReportCallbackCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugReportCallbackCreateInfoEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugReportCallbackCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugReportCallbackCreateInfoEXT>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugReportCallbackCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugReportCallbackCreateInfoEXT>())).pfnCallback as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugReportCallbackCreateInfoEXT),
            "::",
            stringify!(pfnCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugReportCallbackCreateInfoEXT>())).pUserData as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugReportCallbackCreateInfoEXT),
            "::",
            stringify!(pUserData)
        )
    );
}
impl Default for VkDebugReportCallbackCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCreateDebugReportCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pCreateInfo: *const VkDebugReportCallbackCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pCallback: *mut VkDebugReportCallbackEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDebugReportCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        callback: VkDebugReportCallbackEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkDebugReportMessageEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        flags: VkDebugReportFlagsEXT,
        objectType: VkDebugReportObjectTypeEXT,
        object: u64,
        location: size_t,
        messageCode: i32,
        pLayerPrefix: *const ::std::os::raw::c_char,
        pMessage: *const ::std::os::raw::c_char,
    ),
>;
extern "system" {
    pub fn vkCreateDebugReportCallbackEXT(
        instance: VkInstance,
        pCreateInfo: *const VkDebugReportCallbackCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pCallback: *mut VkDebugReportCallbackEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDebugReportCallbackEXT(
        instance: VkInstance,
        callback: VkDebugReportCallbackEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkDebugReportMessageEXT(
        instance: VkInstance,
        flags: VkDebugReportFlagsEXT,
        objectType: VkDebugReportObjectTypeEXT,
        object: u64,
        location: size_t,
        messageCode: i32,
        pLayerPrefix: *const ::std::os::raw::c_char,
        pMessage: *const ::std::os::raw::c_char,
    );
}
pub const VkRasterizationOrderAMD_VK_RASTERIZATION_ORDER_STRICT_AMD: VkRasterizationOrderAMD = 0;
pub const VkRasterizationOrderAMD_VK_RASTERIZATION_ORDER_RELAXED_AMD: VkRasterizationOrderAMD = 1;
pub const VkRasterizationOrderAMD_VK_RASTERIZATION_ORDER_MAX_ENUM_AMD: VkRasterizationOrderAMD =
    2147483647;
pub type VkRasterizationOrderAMD = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationStateRasterizationOrderAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub rasterizationOrder: VkRasterizationOrderAMD,
}
#[test]
fn bindgen_test_layout_VkPipelineRasterizationStateRasterizationOrderAMD() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRasterizationStateRasterizationOrderAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRasterizationStateRasterizationOrderAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRasterizationStateRasterizationOrderAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRasterizationStateRasterizationOrderAMD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateRasterizationOrderAMD>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateRasterizationOrderAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateRasterizationOrderAMD>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateRasterizationOrderAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateRasterizationOrderAMD>()))
                .rasterizationOrder as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateRasterizationOrderAMD),
            "::",
            stringify!(rasterizationOrder)
        )
    );
}
impl Default for VkPipelineRasterizationStateRasterizationOrderAMD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugMarkerObjectNameInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub objectType: VkDebugReportObjectTypeEXT,
    pub object: u64,
    pub pObjectName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_VkDebugMarkerObjectNameInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDebugMarkerObjectNameInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkDebugMarkerObjectNameInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugMarkerObjectNameInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDebugMarkerObjectNameInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerObjectNameInfoEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectNameInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerObjectNameInfoEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectNameInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerObjectNameInfoEXT>())).objectType as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectNameInfoEXT),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerObjectNameInfoEXT>())).object as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectNameInfoEXT),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerObjectNameInfoEXT>())).pObjectName as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectNameInfoEXT),
            "::",
            stringify!(pObjectName)
        )
    );
}
impl Default for VkDebugMarkerObjectNameInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugMarkerObjectTagInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub objectType: VkDebugReportObjectTypeEXT,
    pub object: u64,
    pub tagName: u64,
    pub tagSize: size_t,
    pub pTag: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkDebugMarkerObjectTagInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDebugMarkerObjectTagInfoEXT>(),
        56usize,
        concat!("Size of: ", stringify!(VkDebugMarkerObjectTagInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugMarkerObjectTagInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDebugMarkerObjectTagInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerObjectTagInfoEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerObjectTagInfoEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerObjectTagInfoEXT>())).objectType as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerObjectTagInfoEXT>())).object as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerObjectTagInfoEXT>())).tagName as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(tagName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerObjectTagInfoEXT>())).tagSize as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(tagSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerObjectTagInfoEXT>())).pTag as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(pTag)
        )
    );
}
impl Default for VkDebugMarkerObjectTagInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugMarkerMarkerInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pMarkerName: *const ::std::os::raw::c_char,
    pub color: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_VkDebugMarkerMarkerInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDebugMarkerMarkerInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkDebugMarkerMarkerInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugMarkerMarkerInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDebugMarkerMarkerInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerMarkerInfoEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerMarkerInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerMarkerInfoEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerMarkerInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerMarkerInfoEXT>())).pMarkerName as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerMarkerInfoEXT),
            "::",
            stringify!(pMarkerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugMarkerMarkerInfoEXT>())).color as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerMarkerInfoEXT),
            "::",
            stringify!(color)
        )
    );
}
impl Default for VkDebugMarkerMarkerInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkDebugMarkerSetObjectTagEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pTagInfo: *const VkDebugMarkerObjectTagInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkDebugMarkerSetObjectNameEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pNameInfo: *const VkDebugMarkerObjectNameInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkCmdDebugMarkerBeginEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    ),
>;
pub type PFN_vkCmdDebugMarkerEndEXT =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdDebugMarkerInsertEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    ),
>;
extern "system" {
    pub fn vkDebugMarkerSetObjectTagEXT(
        device: VkDevice,
        pTagInfo: *const VkDebugMarkerObjectTagInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDebugMarkerSetObjectNameEXT(
        device: VkDevice,
        pNameInfo: *const VkDebugMarkerObjectNameInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdDebugMarkerBeginEXT(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    );
}
extern "system" {
    pub fn vkCmdDebugMarkerEndEXT(commandBuffer: VkCommandBuffer);
}
extern "system" {
    pub fn vkCmdDebugMarkerInsertEXT(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDedicatedAllocationImageCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dedicatedAllocation: VkBool32,
}
#[test]
fn bindgen_test_layout_VkDedicatedAllocationImageCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkDedicatedAllocationImageCreateInfoNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDedicatedAllocationImageCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDedicatedAllocationImageCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDedicatedAllocationImageCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDedicatedAllocationImageCreateInfoNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationImageCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDedicatedAllocationImageCreateInfoNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationImageCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDedicatedAllocationImageCreateInfoNV>())).dedicatedAllocation
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationImageCreateInfoNV),
            "::",
            stringify!(dedicatedAllocation)
        )
    );
}
impl Default for VkDedicatedAllocationImageCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDedicatedAllocationBufferCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dedicatedAllocation: VkBool32,
}
#[test]
fn bindgen_test_layout_VkDedicatedAllocationBufferCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkDedicatedAllocationBufferCreateInfoNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDedicatedAllocationBufferCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDedicatedAllocationBufferCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDedicatedAllocationBufferCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDedicatedAllocationBufferCreateInfoNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationBufferCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDedicatedAllocationBufferCreateInfoNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationBufferCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDedicatedAllocationBufferCreateInfoNV>())).dedicatedAllocation
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationBufferCreateInfoNV),
            "::",
            stringify!(dedicatedAllocation)
        )
    );
}
impl Default for VkDedicatedAllocationBufferCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDedicatedAllocationMemoryAllocateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
    pub buffer: VkBuffer,
}
#[test]
fn bindgen_test_layout_VkDedicatedAllocationMemoryAllocateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkDedicatedAllocationMemoryAllocateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkDedicatedAllocationMemoryAllocateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDedicatedAllocationMemoryAllocateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDedicatedAllocationMemoryAllocateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDedicatedAllocationMemoryAllocateInfoNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationMemoryAllocateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDedicatedAllocationMemoryAllocateInfoNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationMemoryAllocateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDedicatedAllocationMemoryAllocateInfoNV>())).image as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationMemoryAllocateInfoNV),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDedicatedAllocationMemoryAllocateInfoNV>())).buffer as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationMemoryAllocateInfoNV),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for VkDedicatedAllocationMemoryAllocateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub transformFeedback: VkBool32,
    pub geometryStreams: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTransformFeedbackFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTransformFeedbackFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTransformFeedbackFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTransformFeedbackFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTransformFeedbackFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackFeaturesEXT>()))
                .transformFeedback as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackFeaturesEXT),
            "::",
            stringify!(transformFeedback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackFeaturesEXT>())).geometryStreams
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackFeaturesEXT),
            "::",
            stringify!(geometryStreams)
        )
    );
}
impl Default for VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxTransformFeedbackStreams: u32,
    pub maxTransformFeedbackBuffers: u32,
    pub maxTransformFeedbackBufferSize: VkDeviceSize,
    pub maxTransformFeedbackStreamDataSize: u32,
    pub maxTransformFeedbackBufferDataSize: u32,
    pub maxTransformFeedbackBufferDataStride: u32,
    pub transformFeedbackQueries: VkBool32,
    pub transformFeedbackStreamsLinesTriangles: VkBool32,
    pub transformFeedbackRasterizationStreamSelect: VkBool32,
    pub transformFeedbackDraw: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTransformFeedbackPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>()))
                .maxTransformFeedbackStreams as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(maxTransformFeedbackStreams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>()))
                .maxTransformFeedbackBuffers as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(maxTransformFeedbackBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>()))
                .maxTransformFeedbackBufferSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(maxTransformFeedbackBufferSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>()))
                .maxTransformFeedbackStreamDataSize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(maxTransformFeedbackStreamDataSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>()))
                .maxTransformFeedbackBufferDataSize as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(maxTransformFeedbackBufferDataSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>()))
                .maxTransformFeedbackBufferDataStride as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(maxTransformFeedbackBufferDataStride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>()))
                .transformFeedbackQueries as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(transformFeedbackQueries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>()))
                .transformFeedbackStreamsLinesTriangles as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(transformFeedbackStreamsLinesTriangles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>()))
                .transformFeedbackRasterizationStreamSelect as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(transformFeedbackRasterizationStreamSelect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>()))
                .transformFeedbackDraw as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(transformFeedbackDraw)
        )
    );
}
impl Default for VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineRasterizationStateStreamCreateFlagsEXT,
    pub rasterizationStream: u32,
}
#[test]
fn bindgen_test_layout_VkPipelineRasterizationStateStreamCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRasterizationStateStreamCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRasterizationStateStreamCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRasterizationStateStreamCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRasterizationStateStreamCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateStreamCreateInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateStreamCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateStreamCreateInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateStreamCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateStreamCreateInfoEXT>())).flags
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateStreamCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationStateStreamCreateInfoEXT>()))
                .rasterizationStream as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateStreamCreateInfoEXT),
            "::",
            stringify!(rasterizationStream)
        )
    );
}
impl Default for VkPipelineRasterizationStateStreamCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCmdBindTransformFeedbackBuffersEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdBeginTransformFeedbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdEndTransformFeedbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdBeginQueryIndexedEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
        index: u32,
    ),
>;
pub type PFN_vkCmdEndQueryIndexedEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        index: u32,
    ),
>;
pub type PFN_vkCmdDrawIndirectByteCountEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        instanceCount: u32,
        firstInstance: u32,
        counterBuffer: VkBuffer,
        counterBufferOffset: VkDeviceSize,
        counterOffset: u32,
        vertexStride: u32,
    ),
>;
extern "system" {
    pub fn vkCmdBindTransformFeedbackBuffersEXT(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdBeginTransformFeedbackEXT(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdEndTransformFeedbackEXT(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdBeginQueryIndexedEXT(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
        index: u32,
    );
}
extern "system" {
    pub fn vkCmdEndQueryIndexedEXT(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        index: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndirectByteCountEXT(
        commandBuffer: VkCommandBuffer,
        instanceCount: u32,
        firstInstance: u32,
        counterBuffer: VkBuffer,
        counterBufferOffset: VkDeviceSize,
        counterOffset: u32,
        vertexStride: u32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewHandleInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub imageView: VkImageView,
    pub descriptorType: VkDescriptorType,
    pub sampler: VkSampler,
}
#[test]
fn bindgen_test_layout_VkImageViewHandleInfoNVX() {
    assert_eq!(
        ::std::mem::size_of::<VkImageViewHandleInfoNVX>(),
        40usize,
        concat!("Size of: ", stringify!(VkImageViewHandleInfoNVX))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewHandleInfoNVX>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageViewHandleInfoNVX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageViewHandleInfoNVX>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewHandleInfoNVX),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkImageViewHandleInfoNVX>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewHandleInfoNVX),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewHandleInfoNVX>())).imageView as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewHandleInfoNVX),
            "::",
            stringify!(imageView)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewHandleInfoNVX>())).descriptorType as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewHandleInfoNVX),
            "::",
            stringify!(descriptorType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewHandleInfoNVX>())).sampler as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewHandleInfoNVX),
            "::",
            stringify!(sampler)
        )
    );
}
impl Default for VkImageViewHandleInfoNVX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewAddressPropertiesNVX {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceAddress: VkDeviceAddress,
    pub size: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkImageViewAddressPropertiesNVX() {
    assert_eq!(
        ::std::mem::size_of::<VkImageViewAddressPropertiesNVX>(),
        32usize,
        concat!("Size of: ", stringify!(VkImageViewAddressPropertiesNVX))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewAddressPropertiesNVX>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageViewAddressPropertiesNVX))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewAddressPropertiesNVX>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewAddressPropertiesNVX),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewAddressPropertiesNVX>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewAddressPropertiesNVX),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewAddressPropertiesNVX>())).deviceAddress as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewAddressPropertiesNVX),
            "::",
            stringify!(deviceAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewAddressPropertiesNVX>())).size as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewAddressPropertiesNVX),
            "::",
            stringify!(size)
        )
    );
}
impl Default for VkImageViewAddressPropertiesNVX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetImageViewHandleNVX = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pInfo: *const VkImageViewHandleInfoNVX) -> u32,
>;
pub type PFN_vkGetImageViewAddressNVX = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        imageView: VkImageView,
        pProperties: *mut VkImageViewAddressPropertiesNVX,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetImageViewHandleNVX(device: VkDevice, pInfo: *const VkImageViewHandleInfoNVX)
        -> u32;
}
extern "system" {
    pub fn vkGetImageViewAddressNVX(
        device: VkDevice,
        imageView: VkImageView,
        pProperties: *mut VkImageViewAddressPropertiesNVX,
    ) -> VkResult;
}
pub type PFN_vkCmdDrawIndirectCountAMD = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirectCountAMD = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
extern "system" {
    pub fn vkCmdDrawIndirectCountAMD(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndexedIndirectCountAMD(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkTextureLODGatherFormatPropertiesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supportsTextureGatherLODBiasAMD: VkBool32,
}
#[test]
fn bindgen_test_layout_VkTextureLODGatherFormatPropertiesAMD() {
    assert_eq!(
        ::std::mem::size_of::<VkTextureLODGatherFormatPropertiesAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkTextureLODGatherFormatPropertiesAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkTextureLODGatherFormatPropertiesAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkTextureLODGatherFormatPropertiesAMD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkTextureLODGatherFormatPropertiesAMD>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTextureLODGatherFormatPropertiesAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkTextureLODGatherFormatPropertiesAMD>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTextureLODGatherFormatPropertiesAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkTextureLODGatherFormatPropertiesAMD>()))
                .supportsTextureGatherLODBiasAMD as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTextureLODGatherFormatPropertiesAMD),
            "::",
            stringify!(supportsTextureGatherLODBiasAMD)
        )
    );
}
impl Default for VkTextureLODGatherFormatPropertiesAMD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkShaderInfoTypeAMD_VK_SHADER_INFO_TYPE_STATISTICS_AMD: VkShaderInfoTypeAMD = 0;
pub const VkShaderInfoTypeAMD_VK_SHADER_INFO_TYPE_BINARY_AMD: VkShaderInfoTypeAMD = 1;
pub const VkShaderInfoTypeAMD_VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD: VkShaderInfoTypeAMD = 2;
pub const VkShaderInfoTypeAMD_VK_SHADER_INFO_TYPE_MAX_ENUM_AMD: VkShaderInfoTypeAMD = 2147483647;
pub type VkShaderInfoTypeAMD = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkShaderResourceUsageAMD {
    pub numUsedVgprs: u32,
    pub numUsedSgprs: u32,
    pub ldsSizePerLocalWorkGroup: u32,
    pub ldsUsageSizeInBytes: size_t,
    pub scratchMemUsageInBytes: size_t,
}
#[test]
fn bindgen_test_layout_VkShaderResourceUsageAMD() {
    assert_eq!(
        ::std::mem::size_of::<VkShaderResourceUsageAMD>(),
        32usize,
        concat!("Size of: ", stringify!(VkShaderResourceUsageAMD))
    );
    assert_eq!(
        ::std::mem::align_of::<VkShaderResourceUsageAMD>(),
        8usize,
        concat!("Alignment of ", stringify!(VkShaderResourceUsageAMD))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderResourceUsageAMD>())).numUsedVgprs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderResourceUsageAMD),
            "::",
            stringify!(numUsedVgprs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderResourceUsageAMD>())).numUsedSgprs as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderResourceUsageAMD),
            "::",
            stringify!(numUsedSgprs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderResourceUsageAMD>())).ldsSizePerLocalWorkGroup
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderResourceUsageAMD),
            "::",
            stringify!(ldsSizePerLocalWorkGroup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderResourceUsageAMD>())).ldsUsageSizeInBytes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderResourceUsageAMD),
            "::",
            stringify!(ldsUsageSizeInBytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderResourceUsageAMD>())).scratchMemUsageInBytes as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderResourceUsageAMD),
            "::",
            stringify!(scratchMemUsageInBytes)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkShaderStatisticsInfoAMD {
    pub shaderStageMask: VkShaderStageFlags,
    pub resourceUsage: VkShaderResourceUsageAMD,
    pub numPhysicalVgprs: u32,
    pub numPhysicalSgprs: u32,
    pub numAvailableVgprs: u32,
    pub numAvailableSgprs: u32,
    pub computeWorkGroupSize: [u32; 3usize],
}
#[test]
fn bindgen_test_layout_VkShaderStatisticsInfoAMD() {
    assert_eq!(
        ::std::mem::size_of::<VkShaderStatisticsInfoAMD>(),
        72usize,
        concat!("Size of: ", stringify!(VkShaderStatisticsInfoAMD))
    );
    assert_eq!(
        ::std::mem::align_of::<VkShaderStatisticsInfoAMD>(),
        8usize,
        concat!("Alignment of ", stringify!(VkShaderStatisticsInfoAMD))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderStatisticsInfoAMD>())).shaderStageMask as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(shaderStageMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderStatisticsInfoAMD>())).resourceUsage as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(resourceUsage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderStatisticsInfoAMD>())).numPhysicalVgprs as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(numPhysicalVgprs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderStatisticsInfoAMD>())).numPhysicalSgprs as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(numPhysicalSgprs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderStatisticsInfoAMD>())).numAvailableVgprs as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(numAvailableVgprs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderStatisticsInfoAMD>())).numAvailableSgprs as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(numAvailableSgprs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderStatisticsInfoAMD>())).computeWorkGroupSize as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(computeWorkGroupSize)
        )
    );
}
pub type PFN_vkGetShaderInfoAMD = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        shaderStage: VkShaderStageFlagBits,
        infoType: VkShaderInfoTypeAMD,
        pInfoSize: *mut size_t,
        pInfo: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetShaderInfoAMD(
        device: VkDevice,
        pipeline: VkPipeline,
        shaderStage: VkShaderStageFlagBits,
        infoType: VkShaderInfoTypeAMD,
        pInfoSize: *mut size_t,
        pInfo: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cornerSampledImage: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCornerSampledImageFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCornerSampledImageFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCornerSampledImageFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCornerSampledImageFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCornerSampledImageFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCornerSampledImageFeaturesNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCornerSampledImageFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCornerSampledImageFeaturesNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCornerSampledImageFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCornerSampledImageFeaturesNV>()))
                .cornerSampledImage as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCornerSampledImageFeaturesNV),
            "::",
            stringify!(cornerSampledImage)
        )
    );
}
impl Default for VkPhysicalDeviceCornerSampledImageFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV : VkExternalMemoryHandleTypeFlagBitsNV = 1 ;
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV : VkExternalMemoryHandleTypeFlagBitsNV = 2 ;
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV:
    VkExternalMemoryHandleTypeFlagBitsNV = 4;
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV : VkExternalMemoryHandleTypeFlagBitsNV = 8 ;
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV : VkExternalMemoryHandleTypeFlagBitsNV = 2147483647 ;
pub type VkExternalMemoryHandleTypeFlagBitsNV = ::std::os::raw::c_uint;
pub type VkExternalMemoryHandleTypeFlagsNV = VkFlags;
pub const VkExternalMemoryFeatureFlagBitsNV_VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV:
    VkExternalMemoryFeatureFlagBitsNV = 1;
pub const VkExternalMemoryFeatureFlagBitsNV_VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV:
    VkExternalMemoryFeatureFlagBitsNV = 2;
pub const VkExternalMemoryFeatureFlagBitsNV_VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV:
    VkExternalMemoryFeatureFlagBitsNV = 4;
pub const VkExternalMemoryFeatureFlagBitsNV_VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV:
    VkExternalMemoryFeatureFlagBitsNV = 2147483647;
pub type VkExternalMemoryFeatureFlagBitsNV = ::std::os::raw::c_uint;
pub type VkExternalMemoryFeatureFlagsNV = VkFlags;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkExternalImageFormatPropertiesNV {
    pub imageFormatProperties: VkImageFormatProperties,
    pub externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV,
    pub exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
    pub compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[test]
fn bindgen_test_layout_VkExternalImageFormatPropertiesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkExternalImageFormatPropertiesNV>(),
        48usize,
        concat!("Size of: ", stringify!(VkExternalImageFormatPropertiesNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalImageFormatPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkExternalImageFormatPropertiesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalImageFormatPropertiesNV>())).imageFormatProperties
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatPropertiesNV),
            "::",
            stringify!(imageFormatProperties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalImageFormatPropertiesNV>())).externalMemoryFeatures
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatPropertiesNV),
            "::",
            stringify!(externalMemoryFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalImageFormatPropertiesNV>()))
                .exportFromImportedHandleTypes as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatPropertiesNV),
            "::",
            stringify!(exportFromImportedHandleTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalImageFormatPropertiesNV>())).compatibleHandleTypes
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatPropertiesNV),
            "::",
            stringify!(compatibleHandleTypes)
        )
    );
}
pub type PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        externalHandleType: VkExternalMemoryHandleTypeFlagsNV,
        pExternalImageFormatProperties: *mut VkExternalImageFormatPropertiesNV,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        externalHandleType: VkExternalMemoryHandleTypeFlagsNV,
        pExternalImageFormatProperties: *mut VkExternalImageFormatPropertiesNV,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryImageCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[test]
fn bindgen_test_layout_VkExternalMemoryImageCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkExternalMemoryImageCreateInfoNV>(),
        24usize,
        concat!("Size of: ", stringify!(VkExternalMemoryImageCreateInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalMemoryImageCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkExternalMemoryImageCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalMemoryImageCreateInfoNV>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryImageCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalMemoryImageCreateInfoNV>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryImageCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExternalMemoryImageCreateInfoNV>())).handleTypes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryImageCreateInfoNV),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExternalMemoryImageCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportMemoryAllocateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[test]
fn bindgen_test_layout_VkExportMemoryAllocateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkExportMemoryAllocateInfoNV>(),
        24usize,
        concat!("Size of: ", stringify!(VkExportMemoryAllocateInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExportMemoryAllocateInfoNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExportMemoryAllocateInfoNV))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExportMemoryAllocateInfoNV>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportMemoryAllocateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExportMemoryAllocateInfoNV>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportMemoryAllocateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkExportMemoryAllocateInfoNV>())).handleTypes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportMemoryAllocateInfoNV),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExportMemoryAllocateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkValidationCheckEXT_VK_VALIDATION_CHECK_ALL_EXT: VkValidationCheckEXT = 0;
pub const VkValidationCheckEXT_VK_VALIDATION_CHECK_SHADERS_EXT: VkValidationCheckEXT = 1;
pub const VkValidationCheckEXT_VK_VALIDATION_CHECK_MAX_ENUM_EXT: VkValidationCheckEXT = 2147483647;
pub type VkValidationCheckEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationFlagsEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub disabledValidationCheckCount: u32,
    pub pDisabledValidationChecks: *const VkValidationCheckEXT,
}
#[test]
fn bindgen_test_layout_VkValidationFlagsEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkValidationFlagsEXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkValidationFlagsEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkValidationFlagsEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkValidationFlagsEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkValidationFlagsEXT>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFlagsEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkValidationFlagsEXT>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFlagsEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkValidationFlagsEXT>())).disabledValidationCheckCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFlagsEXT),
            "::",
            stringify!(disabledValidationCheckCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkValidationFlagsEXT>())).pDisabledValidationChecks as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFlagsEXT),
            "::",
            stringify!(pDisabledValidationChecks)
        )
    );
}
impl Default for VkValidationFlagsEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub textureCompressionASTC_HDR: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT>()))
                .textureCompressionASTC_HDR as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT),
            "::",
            stringify!(textureCompressionASTC_HDR)
        )
    );
}
impl Default for VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewASTCDecodeModeEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub decodeMode: VkFormat,
}
#[test]
fn bindgen_test_layout_VkImageViewASTCDecodeModeEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkImageViewASTCDecodeModeEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageViewASTCDecodeModeEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewASTCDecodeModeEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageViewASTCDecodeModeEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewASTCDecodeModeEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewASTCDecodeModeEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewASTCDecodeModeEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewASTCDecodeModeEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageViewASTCDecodeModeEXT>())).decodeMode as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewASTCDecodeModeEXT),
            "::",
            stringify!(decodeMode)
        )
    );
}
impl Default for VkImageViewASTCDecodeModeEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub decodeModeSharedExponent: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceASTCDecodeFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceASTCDecodeFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceASTCDecodeFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceASTCDecodeFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceASTCDecodeFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceASTCDecodeFeaturesEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceASTCDecodeFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceASTCDecodeFeaturesEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceASTCDecodeFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceASTCDecodeFeaturesEXT>()))
                .decodeModeSharedExponent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceASTCDecodeFeaturesEXT),
            "::",
            stringify!(decodeModeSharedExponent)
        )
    );
}
impl Default for VkPhysicalDeviceASTCDecodeFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkConditionalRenderingFlagBitsEXT_VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT:
    VkConditionalRenderingFlagBitsEXT = 1;
pub const VkConditionalRenderingFlagBitsEXT_VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT:
    VkConditionalRenderingFlagBitsEXT = 2147483647;
pub type VkConditionalRenderingFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkConditionalRenderingFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkConditionalRenderingBeginInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub flags: VkConditionalRenderingFlagsEXT,
}
#[test]
fn bindgen_test_layout_VkConditionalRenderingBeginInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkConditionalRenderingBeginInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkConditionalRenderingBeginInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkConditionalRenderingBeginInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkConditionalRenderingBeginInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkConditionalRenderingBeginInfoEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConditionalRenderingBeginInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkConditionalRenderingBeginInfoEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConditionalRenderingBeginInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkConditionalRenderingBeginInfoEXT>())).buffer as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConditionalRenderingBeginInfoEXT),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkConditionalRenderingBeginInfoEXT>())).offset as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConditionalRenderingBeginInfoEXT),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkConditionalRenderingBeginInfoEXT>())).flags as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConditionalRenderingBeginInfoEXT),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkConditionalRenderingBeginInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub conditionalRendering: VkBool32,
    pub inheritedConditionalRendering: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceConditionalRenderingFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceConditionalRenderingFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceConditionalRenderingFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceConditionalRenderingFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceConditionalRenderingFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConditionalRenderingFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConditionalRenderingFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConditionalRenderingFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConditionalRenderingFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConditionalRenderingFeaturesEXT>()))
                .conditionalRendering as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConditionalRenderingFeaturesEXT),
            "::",
            stringify!(conditionalRendering)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConditionalRenderingFeaturesEXT>()))
                .inheritedConditionalRendering as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConditionalRenderingFeaturesEXT),
            "::",
            stringify!(inheritedConditionalRendering)
        )
    );
}
impl Default for VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub conditionalRenderingEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkCommandBufferInheritanceConditionalRenderingInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkCommandBufferInheritanceConditionalRenderingInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkCommandBufferInheritanceConditionalRenderingInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandBufferInheritanceConditionalRenderingInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkCommandBufferInheritanceConditionalRenderingInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceConditionalRenderingInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceConditionalRenderingInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceConditionalRenderingInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceConditionalRenderingInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceConditionalRenderingInfoEXT>()))
                .conditionalRenderingEnable as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceConditionalRenderingInfoEXT),
            "::",
            stringify!(conditionalRenderingEnable)
        )
    );
}
impl Default for VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCmdBeginConditionalRenderingEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pConditionalRenderingBegin: *const VkConditionalRenderingBeginInfoEXT,
    ),
>;
pub type PFN_vkCmdEndConditionalRenderingEXT =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
extern "system" {
    pub fn vkCmdBeginConditionalRenderingEXT(
        commandBuffer: VkCommandBuffer,
        pConditionalRenderingBegin: *const VkConditionalRenderingBeginInfoEXT,
    );
}
extern "system" {
    pub fn vkCmdEndConditionalRenderingEXT(commandBuffer: VkCommandBuffer);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkViewportWScalingNV {
    pub xcoeff: f32,
    pub ycoeff: f32,
}
#[test]
fn bindgen_test_layout_VkViewportWScalingNV() {
    assert_eq!(
        ::std::mem::size_of::<VkViewportWScalingNV>(),
        8usize,
        concat!("Size of: ", stringify!(VkViewportWScalingNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkViewportWScalingNV>(),
        4usize,
        concat!("Alignment of ", stringify!(VkViewportWScalingNV))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkViewportWScalingNV>())).xcoeff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewportWScalingNV),
            "::",
            stringify!(xcoeff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkViewportWScalingNV>())).ycoeff as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewportWScalingNV),
            "::",
            stringify!(ycoeff)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportWScalingStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub viewportWScalingEnable: VkBool32,
    pub viewportCount: u32,
    pub pViewportWScalings: *const VkViewportWScalingNV,
}
#[test]
fn bindgen_test_layout_VkPipelineViewportWScalingStateCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineViewportWScalingStateCreateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineViewportWScalingStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportWScalingStateCreateInfoNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportWScalingStateCreateInfoNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportWScalingStateCreateInfoNV>()))
                .viewportWScalingEnable as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV),
            "::",
            stringify!(viewportWScalingEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportWScalingStateCreateInfoNV>())).viewportCount
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV),
            "::",
            stringify!(viewportCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportWScalingStateCreateInfoNV>()))
                .pViewportWScalings as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV),
            "::",
            stringify!(pViewportWScalings)
        )
    );
}
impl Default for VkPipelineViewportWScalingStateCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCmdSetViewportWScalingNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewportWScalings: *const VkViewportWScalingNV,
    ),
>;
extern "system" {
    pub fn vkCmdSetViewportWScalingNV(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewportWScalings: *const VkViewportWScalingNV,
    );
}
pub type PFN_vkReleaseDisplayEXT = ::std::option::Option<
    unsafe extern "system" fn(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR) -> VkResult,
>;
extern "system" {
    pub fn vkReleaseDisplayEXT(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR)
        -> VkResult;
}
pub const VkSurfaceCounterFlagBitsEXT_VK_SURFACE_COUNTER_VBLANK_EXT: VkSurfaceCounterFlagBitsEXT =
    1;
pub const VkSurfaceCounterFlagBitsEXT_VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT:
    VkSurfaceCounterFlagBitsEXT = 2147483647;
pub type VkSurfaceCounterFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkSurfaceCounterFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilities2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minImageCount: u32,
    pub maxImageCount: u32,
    pub currentExtent: VkExtent2D,
    pub minImageExtent: VkExtent2D,
    pub maxImageExtent: VkExtent2D,
    pub maxImageArrayLayers: u32,
    pub supportedTransforms: VkSurfaceTransformFlagsKHR,
    pub currentTransform: VkSurfaceTransformFlagBitsKHR,
    pub supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    pub supportedUsageFlags: VkImageUsageFlags,
    pub supportedSurfaceCounters: VkSurfaceCounterFlagsEXT,
}
#[test]
fn bindgen_test_layout_VkSurfaceCapabilities2EXT() {
    assert_eq!(
        ::std::mem::size_of::<VkSurfaceCapabilities2EXT>(),
        72usize,
        concat!("Size of: ", stringify!(VkSurfaceCapabilities2EXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfaceCapabilities2EXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSurfaceCapabilities2EXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSurfaceCapabilities2EXT>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSurfaceCapabilities2EXT>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilities2EXT>())).minImageCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(minImageCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilities2EXT>())).maxImageCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(maxImageCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilities2EXT>())).currentExtent as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(currentExtent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilities2EXT>())).minImageExtent as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(minImageExtent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilities2EXT>())).maxImageExtent as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(maxImageExtent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilities2EXT>())).maxImageArrayLayers as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(maxImageArrayLayers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilities2EXT>())).supportedTransforms as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(supportedTransforms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilities2EXT>())).currentTransform as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(currentTransform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilities2EXT>())).supportedCompositeAlpha
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(supportedCompositeAlpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilities2EXT>())).supportedUsageFlags as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(supportedUsageFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSurfaceCapabilities2EXT>())).supportedSurfaceCounters
                as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(supportedSurfaceCounters)
        )
    );
}
impl Default for VkSurfaceCapabilities2EXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2EXT,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2EXT,
    ) -> VkResult;
}
pub const VkDisplayPowerStateEXT_VK_DISPLAY_POWER_STATE_OFF_EXT: VkDisplayPowerStateEXT = 0;
pub const VkDisplayPowerStateEXT_VK_DISPLAY_POWER_STATE_SUSPEND_EXT: VkDisplayPowerStateEXT = 1;
pub const VkDisplayPowerStateEXT_VK_DISPLAY_POWER_STATE_ON_EXT: VkDisplayPowerStateEXT = 2;
pub const VkDisplayPowerStateEXT_VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT: VkDisplayPowerStateEXT =
    2147483647;
pub type VkDisplayPowerStateEXT = ::std::os::raw::c_uint;
pub const VkDeviceEventTypeEXT_VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT: VkDeviceEventTypeEXT = 0;
pub const VkDeviceEventTypeEXT_VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT: VkDeviceEventTypeEXT = 2147483647;
pub type VkDeviceEventTypeEXT = ::std::os::raw::c_uint;
pub const VkDisplayEventTypeEXT_VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT: VkDisplayEventTypeEXT =
    0;
pub const VkDisplayEventTypeEXT_VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT: VkDisplayEventTypeEXT =
    2147483647;
pub type VkDisplayEventTypeEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPowerInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub powerState: VkDisplayPowerStateEXT,
}
#[test]
fn bindgen_test_layout_VkDisplayPowerInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPowerInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkDisplayPowerInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPowerInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPowerInfoEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayPowerInfoEXT>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPowerInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayPowerInfoEXT>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPowerInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayPowerInfoEXT>())).powerState as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPowerInfoEXT),
            "::",
            stringify!(powerState)
        )
    );
}
impl Default for VkDisplayPowerInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceEventInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceEvent: VkDeviceEventTypeEXT,
}
#[test]
fn bindgen_test_layout_VkDeviceEventInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceEventInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkDeviceEventInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceEventInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceEventInfoEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceEventInfoEXT>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceEventInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDeviceEventInfoEXT>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceEventInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceEventInfoEXT>())).deviceEvent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceEventInfoEXT),
            "::",
            stringify!(deviceEvent)
        )
    );
}
impl Default for VkDeviceEventInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayEventInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub displayEvent: VkDisplayEventTypeEXT,
}
#[test]
fn bindgen_test_layout_VkDisplayEventInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayEventInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkDisplayEventInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayEventInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayEventInfoEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayEventInfoEXT>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayEventInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDisplayEventInfoEXT>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayEventInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayEventInfoEXT>())).displayEvent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayEventInfoEXT),
            "::",
            stringify!(displayEvent)
        )
    );
}
impl Default for VkDisplayEventInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainCounterCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub surfaceCounters: VkSurfaceCounterFlagsEXT,
}
#[test]
fn bindgen_test_layout_VkSwapchainCounterCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkSwapchainCounterCreateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkSwapchainCounterCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSwapchainCounterCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSwapchainCounterCreateInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCounterCreateInfoEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCounterCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCounterCreateInfoEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCounterCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainCounterCreateInfoEXT>())).surfaceCounters as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCounterCreateInfoEXT),
            "::",
            stringify!(surfaceCounters)
        )
    );
}
impl Default for VkSwapchainCounterCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkDisplayPowerControlEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayPowerInfo: *const VkDisplayPowerInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkRegisterDeviceEventEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pDeviceEventInfo: *const VkDeviceEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult,
>;
pub type PFN_vkRegisterDisplayEventEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayEventInfo: *const VkDisplayEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult,
>;
pub type PFN_vkGetSwapchainCounterEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        counter: VkSurfaceCounterFlagBitsEXT,
        pCounterValue: *mut u64,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkDisplayPowerControlEXT(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayPowerInfo: *const VkDisplayPowerInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkRegisterDeviceEventEXT(
        device: VkDevice,
        pDeviceEventInfo: *const VkDeviceEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult;
}
extern "system" {
    pub fn vkRegisterDisplayEventEXT(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayEventInfo: *const VkDisplayEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetSwapchainCounterEXT(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        counter: VkSurfaceCounterFlagBitsEXT,
        pCounterValue: *mut u64,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkRefreshCycleDurationGOOGLE {
    pub refreshDuration: u64,
}
#[test]
fn bindgen_test_layout_VkRefreshCycleDurationGOOGLE() {
    assert_eq!(
        ::std::mem::size_of::<VkRefreshCycleDurationGOOGLE>(),
        8usize,
        concat!("Size of: ", stringify!(VkRefreshCycleDurationGOOGLE))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRefreshCycleDurationGOOGLE>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRefreshCycleDurationGOOGLE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRefreshCycleDurationGOOGLE>())).refreshDuration as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRefreshCycleDurationGOOGLE),
            "::",
            stringify!(refreshDuration)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPastPresentationTimingGOOGLE {
    pub presentID: u32,
    pub desiredPresentTime: u64,
    pub actualPresentTime: u64,
    pub earliestPresentTime: u64,
    pub presentMargin: u64,
}
#[test]
fn bindgen_test_layout_VkPastPresentationTimingGOOGLE() {
    assert_eq!(
        ::std::mem::size_of::<VkPastPresentationTimingGOOGLE>(),
        40usize,
        concat!("Size of: ", stringify!(VkPastPresentationTimingGOOGLE))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPastPresentationTimingGOOGLE>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPastPresentationTimingGOOGLE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPastPresentationTimingGOOGLE>())).presentID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPastPresentationTimingGOOGLE),
            "::",
            stringify!(presentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPastPresentationTimingGOOGLE>())).desiredPresentTime
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPastPresentationTimingGOOGLE),
            "::",
            stringify!(desiredPresentTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPastPresentationTimingGOOGLE>())).actualPresentTime as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPastPresentationTimingGOOGLE),
            "::",
            stringify!(actualPresentTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPastPresentationTimingGOOGLE>())).earliestPresentTime
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPastPresentationTimingGOOGLE),
            "::",
            stringify!(earliestPresentTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPastPresentationTimingGOOGLE>())).presentMargin as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPastPresentationTimingGOOGLE),
            "::",
            stringify!(presentMargin)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPresentTimeGOOGLE {
    pub presentID: u32,
    pub desiredPresentTime: u64,
}
#[test]
fn bindgen_test_layout_VkPresentTimeGOOGLE() {
    assert_eq!(
        ::std::mem::size_of::<VkPresentTimeGOOGLE>(),
        16usize,
        concat!("Size of: ", stringify!(VkPresentTimeGOOGLE))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPresentTimeGOOGLE>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPresentTimeGOOGLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentTimeGOOGLE>())).presentID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentTimeGOOGLE),
            "::",
            stringify!(presentID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPresentTimeGOOGLE>())).desiredPresentTime as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentTimeGOOGLE),
            "::",
            stringify!(desiredPresentTime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentTimesInfoGOOGLE {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pTimes: *const VkPresentTimeGOOGLE,
}
#[test]
fn bindgen_test_layout_VkPresentTimesInfoGOOGLE() {
    assert_eq!(
        ::std::mem::size_of::<VkPresentTimesInfoGOOGLE>(),
        32usize,
        concat!("Size of: ", stringify!(VkPresentTimesInfoGOOGLE))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPresentTimesInfoGOOGLE>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPresentTimesInfoGOOGLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentTimesInfoGOOGLE>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentTimesInfoGOOGLE),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentTimesInfoGOOGLE>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentTimesInfoGOOGLE),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPresentTimesInfoGOOGLE>())).swapchainCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentTimesInfoGOOGLE),
            "::",
            stringify!(swapchainCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPresentTimesInfoGOOGLE>())).pTimes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentTimesInfoGOOGLE),
            "::",
            stringify!(pTimes)
        )
    );
}
impl Default for VkPresentTimesInfoGOOGLE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetRefreshCycleDurationGOOGLE = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pDisplayTimingProperties: *mut VkRefreshCycleDurationGOOGLE,
    ) -> VkResult,
>;
pub type PFN_vkGetPastPresentationTimingGOOGLE = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pPresentationTimingCount: *mut u32,
        pPresentationTimings: *mut VkPastPresentationTimingGOOGLE,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetRefreshCycleDurationGOOGLE(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pDisplayTimingProperties: *mut VkRefreshCycleDurationGOOGLE,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPastPresentationTimingGOOGLE(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pPresentationTimingCount: *mut u32,
        pPresentationTimings: *mut VkPastPresentationTimingGOOGLE,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub perViewPositionAllComponents: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>()))
                .sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>()))
                .pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>()))
                .perViewPositionAllComponents as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX),
            "::",
            stringify!(perViewPositionAllComponents)
        )
    );
}
impl Default for VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV:
    VkViewportCoordinateSwizzleNV = 0;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV:
    VkViewportCoordinateSwizzleNV = 1;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV:
    VkViewportCoordinateSwizzleNV = 2;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV:
    VkViewportCoordinateSwizzleNV = 3;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV:
    VkViewportCoordinateSwizzleNV = 4;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV:
    VkViewportCoordinateSwizzleNV = 5;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV:
    VkViewportCoordinateSwizzleNV = 6;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV:
    VkViewportCoordinateSwizzleNV = 7;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV:
    VkViewportCoordinateSwizzleNV = 2147483647;
pub type VkViewportCoordinateSwizzleNV = ::std::os::raw::c_uint;
pub type VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkViewportSwizzleNV {
    pub x: VkViewportCoordinateSwizzleNV,
    pub y: VkViewportCoordinateSwizzleNV,
    pub z: VkViewportCoordinateSwizzleNV,
    pub w: VkViewportCoordinateSwizzleNV,
}
#[test]
fn bindgen_test_layout_VkViewportSwizzleNV() {
    assert_eq!(
        ::std::mem::size_of::<VkViewportSwizzleNV>(),
        16usize,
        concat!("Size of: ", stringify!(VkViewportSwizzleNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkViewportSwizzleNV>(),
        4usize,
        concat!("Alignment of ", stringify!(VkViewportSwizzleNV))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkViewportSwizzleNV>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewportSwizzleNV),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkViewportSwizzleNV>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewportSwizzleNV),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkViewportSwizzleNV>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewportSwizzleNV),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkViewportSwizzleNV>())).w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewportSwizzleNV),
            "::",
            stringify!(w)
        )
    );
}
impl Default for VkViewportSwizzleNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportSwizzleStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineViewportSwizzleStateCreateFlagsNV,
    pub viewportCount: u32,
    pub pViewportSwizzles: *const VkViewportSwizzleNV,
}
#[test]
fn bindgen_test_layout_VkPipelineViewportSwizzleStateCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineViewportSwizzleStateCreateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineViewportSwizzleStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportSwizzleStateCreateInfoNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportSwizzleStateCreateInfoNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportSwizzleStateCreateInfoNV>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportSwizzleStateCreateInfoNV>())).viewportCount
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV),
            "::",
            stringify!(viewportCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportSwizzleStateCreateInfoNV>())).pViewportSwizzles
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV),
            "::",
            stringify!(pViewportSwizzles)
        )
    );
}
impl Default for VkPipelineViewportSwizzleStateCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkDiscardRectangleModeEXT_VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT:
    VkDiscardRectangleModeEXT = 0;
pub const VkDiscardRectangleModeEXT_VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT:
    VkDiscardRectangleModeEXT = 1;
pub const VkDiscardRectangleModeEXT_VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT:
    VkDiscardRectangleModeEXT = 2147483647;
pub type VkDiscardRectangleModeEXT = ::std::os::raw::c_uint;
pub type VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxDiscardRectangles: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDiscardRectanglePropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDiscardRectanglePropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDiscardRectanglePropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDiscardRectanglePropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDiscardRectanglePropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDiscardRectanglePropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDiscardRectanglePropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDiscardRectanglePropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDiscardRectanglePropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDiscardRectanglePropertiesEXT>()))
                .maxDiscardRectangles as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDiscardRectanglePropertiesEXT),
            "::",
            stringify!(maxDiscardRectangles)
        )
    );
}
impl Default for VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineDiscardRectangleStateCreateFlagsEXT,
    pub discardRectangleMode: VkDiscardRectangleModeEXT,
    pub discardRectangleCount: u32,
    pub pDiscardRectangles: *const VkRect2D,
}
#[test]
fn bindgen_test_layout_VkPipelineDiscardRectangleStateCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineDiscardRectangleStateCreateInfoEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineDiscardRectangleStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDiscardRectangleStateCreateInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDiscardRectangleStateCreateInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDiscardRectangleStateCreateInfoEXT>())).flags
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDiscardRectangleStateCreateInfoEXT>()))
                .discardRectangleMode as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT),
            "::",
            stringify!(discardRectangleMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDiscardRectangleStateCreateInfoEXT>()))
                .discardRectangleCount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT),
            "::",
            stringify!(discardRectangleCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineDiscardRectangleStateCreateInfoEXT>()))
                .pDiscardRectangles as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT),
            "::",
            stringify!(pDiscardRectangles)
        )
    );
}
impl Default for VkPipelineDiscardRectangleStateCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCmdSetDiscardRectangleEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstDiscardRectangle: u32,
        discardRectangleCount: u32,
        pDiscardRectangles: *const VkRect2D,
    ),
>;
extern "system" {
    pub fn vkCmdSetDiscardRectangleEXT(
        commandBuffer: VkCommandBuffer,
        firstDiscardRectangle: u32,
        discardRectangleCount: u32,
        pDiscardRectangles: *const VkRect2D,
    );
}
pub const VkConservativeRasterizationModeEXT_VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT:
    VkConservativeRasterizationModeEXT = 0;
pub const VkConservativeRasterizationModeEXT_VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT:
    VkConservativeRasterizationModeEXT = 1;
pub const VkConservativeRasterizationModeEXT_VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT : VkConservativeRasterizationModeEXT = 2 ;
pub const VkConservativeRasterizationModeEXT_VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT:
    VkConservativeRasterizationModeEXT = 2147483647;
pub type VkConservativeRasterizationModeEXT = ::std::os::raw::c_uint;
pub type VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub primitiveOverestimationSize: f32,
    pub maxExtraPrimitiveOverestimationSize: f32,
    pub extraPrimitiveOverestimationSizeGranularity: f32,
    pub primitiveUnderestimation: VkBool32,
    pub conservativePointAndLineRasterization: VkBool32,
    pub degenerateTrianglesRasterized: VkBool32,
    pub degenerateLinesRasterized: VkBool32,
    pub fullyCoveredFragmentShaderInputVariable: VkBool32,
    pub conservativeRasterizationPostDepthCoverage: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceConservativeRasterizationPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>()))
                .primitiveOverestimationSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(primitiveOverestimationSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>()))
                .maxExtraPrimitiveOverestimationSize as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(maxExtraPrimitiveOverestimationSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>()))
                .extraPrimitiveOverestimationSizeGranularity as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(extraPrimitiveOverestimationSizeGranularity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>()))
                .primitiveUnderestimation as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(primitiveUnderestimation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>()))
                .conservativePointAndLineRasterization as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(conservativePointAndLineRasterization)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>()))
                .degenerateTrianglesRasterized as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(degenerateTrianglesRasterized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>()))
                .degenerateLinesRasterized as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(degenerateLinesRasterized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>()))
                .fullyCoveredFragmentShaderInputVariable as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(fullyCoveredFragmentShaderInputVariable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>()))
                .conservativeRasterizationPostDepthCoverage as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(conservativeRasterizationPostDepthCoverage)
        )
    );
}
impl Default for VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT,
    pub conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    pub extraPrimitiveOverestimationSize: f32,
}
#[test]
fn bindgen_test_layout_VkPipelineRasterizationConservativeStateCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRasterizationConservativeStateCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRasterizationConservativeStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationConservativeStateCreateInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationConservativeStateCreateInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationConservativeStateCreateInfoEXT>())).flags
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationConservativeStateCreateInfoEXT>()))
                .conservativeRasterizationMode as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT),
            "::",
            stringify!(conservativeRasterizationMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationConservativeStateCreateInfoEXT>()))
                .extraPrimitiveOverestimationSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT),
            "::",
            stringify!(extraPrimitiveOverestimationSize)
        )
    );
}
impl Default for VkPipelineRasterizationConservativeStateCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub depthClipEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDepthClipEnableFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDepthClipEnableFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDepthClipEnableFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDepthClipEnableFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDepthClipEnableFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDepthClipEnableFeaturesEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthClipEnableFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDepthClipEnableFeaturesEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthClipEnableFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDepthClipEnableFeaturesEXT>())).depthClipEnable
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthClipEnableFeaturesEXT),
            "::",
            stringify!(depthClipEnable)
        )
    );
}
impl Default for VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT,
    pub depthClipEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPipelineRasterizationDepthClipStateCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRasterizationDepthClipStateCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRasterizationDepthClipStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRasterizationDepthClipStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRasterizationDepthClipStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationDepthClipStateCreateInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationDepthClipStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationDepthClipStateCreateInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationDepthClipStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationDepthClipStateCreateInfoEXT>())).flags
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationDepthClipStateCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationDepthClipStateCreateInfoEXT>()))
                .depthClipEnable as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationDepthClipStateCreateInfoEXT),
            "::",
            stringify!(depthClipEnable)
        )
    );
}
impl Default for VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkXYColorEXT {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_VkXYColorEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkXYColorEXT>(),
        8usize,
        concat!("Size of: ", stringify!(VkXYColorEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkXYColorEXT>(),
        4usize,
        concat!("Alignment of ", stringify!(VkXYColorEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkXYColorEXT>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkXYColorEXT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkXYColorEXT>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkXYColorEXT),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkHdrMetadataEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub displayPrimaryRed: VkXYColorEXT,
    pub displayPrimaryGreen: VkXYColorEXT,
    pub displayPrimaryBlue: VkXYColorEXT,
    pub whitePoint: VkXYColorEXT,
    pub maxLuminance: f32,
    pub minLuminance: f32,
    pub maxContentLightLevel: f32,
    pub maxFrameAverageLightLevel: f32,
}
#[test]
fn bindgen_test_layout_VkHdrMetadataEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkHdrMetadataEXT>(),
        64usize,
        concat!("Size of: ", stringify!(VkHdrMetadataEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkHdrMetadataEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkHdrMetadataEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkHdrMetadataEXT>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkHdrMetadataEXT>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkHdrMetadataEXT>())).displayPrimaryRed as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(displayPrimaryRed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkHdrMetadataEXT>())).displayPrimaryGreen as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(displayPrimaryGreen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkHdrMetadataEXT>())).displayPrimaryBlue as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(displayPrimaryBlue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkHdrMetadataEXT>())).whitePoint as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(whitePoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkHdrMetadataEXT>())).maxLuminance as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(maxLuminance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkHdrMetadataEXT>())).minLuminance as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(minLuminance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkHdrMetadataEXT>())).maxContentLightLevel as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(maxContentLightLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkHdrMetadataEXT>())).maxFrameAverageLightLevel as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(maxFrameAverageLightLevel)
        )
    );
}
impl Default for VkHdrMetadataEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkSetHdrMetadataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchainCount: u32,
        pSwapchains: *const VkSwapchainKHR,
        pMetadata: *const VkHdrMetadataEXT,
    ),
>;
extern "system" {
    pub fn vkSetHdrMetadataEXT(
        device: VkDevice,
        swapchainCount: u32,
        pSwapchains: *const VkSwapchainKHR,
        pMetadata: *const VkHdrMetadataEXT,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsMessengerEXT_T {
    _unused: [u8; 0],
}
pub type VkDebugUtilsMessengerEXT = *mut VkDebugUtilsMessengerEXT_T;
pub type VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT:
    VkDebugUtilsMessageSeverityFlagBitsEXT = 1;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT:
    VkDebugUtilsMessageSeverityFlagBitsEXT = 16;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT:
    VkDebugUtilsMessageSeverityFlagBitsEXT = 256;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT:
    VkDebugUtilsMessageSeverityFlagBitsEXT = 4096;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT : VkDebugUtilsMessageSeverityFlagBitsEXT = 2147483647 ;
pub type VkDebugUtilsMessageSeverityFlagBitsEXT = ::std::os::raw::c_uint;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT:
    VkDebugUtilsMessageTypeFlagBitsEXT = 1;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT:
    VkDebugUtilsMessageTypeFlagBitsEXT = 2;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT:
    VkDebugUtilsMessageTypeFlagBitsEXT = 4;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT:
    VkDebugUtilsMessageTypeFlagBitsEXT = 2147483647;
pub type VkDebugUtilsMessageTypeFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
pub type VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
pub type VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsLabelEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pLabelName: *const ::std::os::raw::c_char,
    pub color: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_VkDebugUtilsLabelEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDebugUtilsLabelEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkDebugUtilsLabelEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugUtilsLabelEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDebugUtilsLabelEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDebugUtilsLabelEXT>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsLabelEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDebugUtilsLabelEXT>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsLabelEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDebugUtilsLabelEXT>())).pLabelName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsLabelEXT),
            "::",
            stringify!(pLabelName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkDebugUtilsLabelEXT>())).color as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsLabelEXT),
            "::",
            stringify!(color)
        )
    );
}
impl Default for VkDebugUtilsLabelEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsObjectNameInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub objectType: VkObjectType,
    pub objectHandle: u64,
    pub pObjectName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_VkDebugUtilsObjectNameInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDebugUtilsObjectNameInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkDebugUtilsObjectNameInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugUtilsObjectNameInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDebugUtilsObjectNameInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsObjectNameInfoEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsObjectNameInfoEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsObjectNameInfoEXT>())).objectType as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsObjectNameInfoEXT>())).objectHandle as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(objectHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsObjectNameInfoEXT>())).pObjectName as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(pObjectName)
        )
    );
}
impl Default for VkDebugUtilsObjectNameInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsMessengerCallbackDataEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDebugUtilsMessengerCallbackDataFlagsEXT,
    pub pMessageIdName: *const ::std::os::raw::c_char,
    pub messageIdNumber: i32,
    pub pMessage: *const ::std::os::raw::c_char,
    pub queueLabelCount: u32,
    pub pQueueLabels: *const VkDebugUtilsLabelEXT,
    pub cmdBufLabelCount: u32,
    pub pCmdBufLabels: *const VkDebugUtilsLabelEXT,
    pub objectCount: u32,
    pub pObjects: *const VkDebugUtilsObjectNameInfoEXT,
}
#[test]
fn bindgen_test_layout_VkDebugUtilsMessengerCallbackDataEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDebugUtilsMessengerCallbackDataEXT>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugUtilsMessengerCallbackDataEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCallbackDataEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCallbackDataEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCallbackDataEXT>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCallbackDataEXT>())).pMessageIdName
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(pMessageIdName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCallbackDataEXT>())).messageIdNumber
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(messageIdNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCallbackDataEXT>())).pMessage as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(pMessage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCallbackDataEXT>())).queueLabelCount
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(queueLabelCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCallbackDataEXT>())).pQueueLabels
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(pQueueLabels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCallbackDataEXT>())).cmdBufLabelCount
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(cmdBufLabelCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCallbackDataEXT>())).pCmdBufLabels
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(pCmdBufLabels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCallbackDataEXT>())).objectCount as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(objectCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCallbackDataEXT>())).pObjects as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(pObjects)
        )
    );
}
impl Default for VkDebugUtilsMessengerCallbackDataEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkDebugUtilsMessengerCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
        messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
        pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> VkBool32,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsMessengerCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDebugUtilsMessengerCreateFlagsEXT,
    pub messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT,
    pub messageType: VkDebugUtilsMessageTypeFlagsEXT,
    pub pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT,
    pub pUserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkDebugUtilsMessengerCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDebugUtilsMessengerCreateInfoEXT>(),
        48usize,
        concat!("Size of: ", stringify!(VkDebugUtilsMessengerCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugUtilsMessengerCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCreateInfoEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCreateInfoEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCreateInfoEXT>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCreateInfoEXT>())).messageSeverity
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(messageSeverity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCreateInfoEXT>())).messageType as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(messageType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCreateInfoEXT>())).pfnUserCallback
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(pfnUserCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsMessengerCreateInfoEXT>())).pUserData as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(pUserData)
        )
    );
}
impl Default for VkDebugUtilsMessengerCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsObjectTagInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub objectType: VkObjectType,
    pub objectHandle: u64,
    pub tagName: u64,
    pub tagSize: size_t,
    pub pTag: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkDebugUtilsObjectTagInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDebugUtilsObjectTagInfoEXT>(),
        56usize,
        concat!("Size of: ", stringify!(VkDebugUtilsObjectTagInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugUtilsObjectTagInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDebugUtilsObjectTagInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsObjectTagInfoEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsObjectTagInfoEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsObjectTagInfoEXT>())).objectType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsObjectTagInfoEXT>())).objectHandle as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(objectHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsObjectTagInfoEXT>())).tagName as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(tagName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsObjectTagInfoEXT>())).tagSize as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(tagSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDebugUtilsObjectTagInfoEXT>())).pTag as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(pTag)
        )
    );
}
impl Default for VkDebugUtilsObjectTagInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkSetDebugUtilsObjectNameEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pNameInfo: *const VkDebugUtilsObjectNameInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkSetDebugUtilsObjectTagEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pTagInfo: *const VkDebugUtilsObjectTagInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkQueueBeginDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "system" fn(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkQueueEndDebugUtilsLabelEXT =
    ::std::option::Option<unsafe extern "system" fn(queue: VkQueue)>;
pub type PFN_vkQueueInsertDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "system" fn(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkCmdBeginDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkCmdEndDebugUtilsLabelEXT =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdInsertDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkCreateDebugUtilsMessengerEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pCreateInfo: *const VkDebugUtilsMessengerCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pMessenger: *mut VkDebugUtilsMessengerEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDebugUtilsMessengerEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        messenger: VkDebugUtilsMessengerEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkSubmitDebugUtilsMessageEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
        messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
        pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT,
    ),
>;
extern "system" {
    pub fn vkSetDebugUtilsObjectNameEXT(
        device: VkDevice,
        pNameInfo: *const VkDebugUtilsObjectNameInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkSetDebugUtilsObjectTagEXT(
        device: VkDevice,
        pTagInfo: *const VkDebugUtilsObjectTagInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkQueueBeginDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT);
}
extern "system" {
    pub fn vkQueueEndDebugUtilsLabelEXT(queue: VkQueue);
}
extern "system" {
    pub fn vkQueueInsertDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT);
}
extern "system" {
    pub fn vkCmdBeginDebugUtilsLabelEXT(
        commandBuffer: VkCommandBuffer,
        pLabelInfo: *const VkDebugUtilsLabelEXT,
    );
}
extern "system" {
    pub fn vkCmdEndDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer);
}
extern "system" {
    pub fn vkCmdInsertDebugUtilsLabelEXT(
        commandBuffer: VkCommandBuffer,
        pLabelInfo: *const VkDebugUtilsLabelEXT,
    );
}
extern "system" {
    pub fn vkCreateDebugUtilsMessengerEXT(
        instance: VkInstance,
        pCreateInfo: *const VkDebugUtilsMessengerCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pMessenger: *mut VkDebugUtilsMessengerEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDebugUtilsMessengerEXT(
        instance: VkInstance,
        messenger: VkDebugUtilsMessengerEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkSubmitDebugUtilsMessageEXT(
        instance: VkInstance,
        messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
        messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
        pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT,
    );
}
pub use self::VkSamplerReductionMode as VkSamplerReductionModeEXT;
pub type VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;
pub type VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT =
    VkPhysicalDeviceSamplerFilterMinmaxProperties;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub inlineUniformBlock: VkBool32,
    pub descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceInlineUniformBlockFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceInlineUniformBlockFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceInlineUniformBlockFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceInlineUniformBlockFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceInlineUniformBlockFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceInlineUniformBlockFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceInlineUniformBlockFeaturesEXT>()))
                .inlineUniformBlock as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockFeaturesEXT),
            "::",
            stringify!(inlineUniformBlock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceInlineUniformBlockFeaturesEXT>()))
                .descriptorBindingInlineUniformBlockUpdateAfterBind as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockFeaturesEXT),
            "::",
            stringify!(descriptorBindingInlineUniformBlockUpdateAfterBind)
        )
    );
}
impl Default for VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxInlineUniformBlockSize: u32,
    pub maxPerStageDescriptorInlineUniformBlocks: u32,
    pub maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    pub maxDescriptorSetInlineUniformBlocks: u32,
    pub maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceInlineUniformBlockPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceInlineUniformBlockPropertiesEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceInlineUniformBlockPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceInlineUniformBlockPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceInlineUniformBlockPropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceInlineUniformBlockPropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceInlineUniformBlockPropertiesEXT>()))
                .maxInlineUniformBlockSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockPropertiesEXT),
            "::",
            stringify!(maxInlineUniformBlockSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceInlineUniformBlockPropertiesEXT>()))
                .maxPerStageDescriptorInlineUniformBlocks as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockPropertiesEXT),
            "::",
            stringify!(maxPerStageDescriptorInlineUniformBlocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceInlineUniformBlockPropertiesEXT>()))
                .maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockPropertiesEXT),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceInlineUniformBlockPropertiesEXT>()))
                .maxDescriptorSetInlineUniformBlocks as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockPropertiesEXT),
            "::",
            stringify!(maxDescriptorSetInlineUniformBlocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceInlineUniformBlockPropertiesEXT>()))
                .maxDescriptorSetUpdateAfterBindInlineUniformBlocks as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockPropertiesEXT),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindInlineUniformBlocks)
        )
    );
}
impl Default for VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSetInlineUniformBlockEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dataSize: u32,
    pub pData: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkWriteDescriptorSetInlineUniformBlockEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkWriteDescriptorSetInlineUniformBlockEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkWriteDescriptorSetInlineUniformBlockEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkWriteDescriptorSetInlineUniformBlockEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkWriteDescriptorSetInlineUniformBlockEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkWriteDescriptorSetInlineUniformBlockEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetInlineUniformBlockEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkWriteDescriptorSetInlineUniformBlockEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetInlineUniformBlockEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkWriteDescriptorSetInlineUniformBlockEXT>())).dataSize
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetInlineUniformBlockEXT),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkWriteDescriptorSetInlineUniformBlockEXT>())).pData as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetInlineUniformBlockEXT),
            "::",
            stringify!(pData)
        )
    );
}
impl Default for VkWriteDescriptorSetInlineUniformBlockEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxInlineUniformBlockBindings: u32,
}
#[test]
fn bindgen_test_layout_VkDescriptorPoolInlineUniformBlockCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorPoolInlineUniformBlockCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorPoolInlineUniformBlockCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorPoolInlineUniformBlockCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorPoolInlineUniformBlockCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorPoolInlineUniformBlockCreateInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolInlineUniformBlockCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorPoolInlineUniformBlockCreateInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolInlineUniformBlockCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDescriptorPoolInlineUniformBlockCreateInfoEXT>()))
                .maxInlineUniformBlockBindings as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolInlineUniformBlockCreateInfoEXT),
            "::",
            stringify!(maxInlineUniformBlockBindings)
        )
    );
}
impl Default for VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSampleLocationEXT {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_VkSampleLocationEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkSampleLocationEXT>(),
        8usize,
        concat!("Size of: ", stringify!(VkSampleLocationEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSampleLocationEXT>(),
        4usize,
        concat!("Alignment of ", stringify!(VkSampleLocationEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSampleLocationEXT>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationEXT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSampleLocationEXT>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationEXT),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSampleLocationsInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub sampleLocationsPerPixel: VkSampleCountFlagBits,
    pub sampleLocationGridSize: VkExtent2D,
    pub sampleLocationsCount: u32,
    pub pSampleLocations: *const VkSampleLocationEXT,
}
#[test]
fn bindgen_test_layout_VkSampleLocationsInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkSampleLocationsInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkSampleLocationsInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSampleLocationsInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSampleLocationsInfoEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSampleLocationsInfoEXT>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationsInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkSampleLocationsInfoEXT>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationsInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSampleLocationsInfoEXT>())).sampleLocationsPerPixel as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationsInfoEXT),
            "::",
            stringify!(sampleLocationsPerPixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSampleLocationsInfoEXT>())).sampleLocationGridSize as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationsInfoEXT),
            "::",
            stringify!(sampleLocationGridSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSampleLocationsInfoEXT>())).sampleLocationsCount as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationsInfoEXT),
            "::",
            stringify!(sampleLocationsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSampleLocationsInfoEXT>())).pSampleLocations as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationsInfoEXT),
            "::",
            stringify!(pSampleLocations)
        )
    );
}
impl Default for VkSampleLocationsInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentSampleLocationsEXT {
    pub attachmentIndex: u32,
    pub sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[test]
fn bindgen_test_layout_VkAttachmentSampleLocationsEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentSampleLocationsEXT>(),
        48usize,
        concat!("Size of: ", stringify!(VkAttachmentSampleLocationsEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentSampleLocationsEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAttachmentSampleLocationsEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentSampleLocationsEXT>())).attachmentIndex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentSampleLocationsEXT),
            "::",
            stringify!(attachmentIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAttachmentSampleLocationsEXT>())).sampleLocationsInfo
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentSampleLocationsEXT),
            "::",
            stringify!(sampleLocationsInfo)
        )
    );
}
impl Default for VkAttachmentSampleLocationsEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassSampleLocationsEXT {
    pub subpassIndex: u32,
    pub sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[test]
fn bindgen_test_layout_VkSubpassSampleLocationsEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkSubpassSampleLocationsEXT>(),
        48usize,
        concat!("Size of: ", stringify!(VkSubpassSampleLocationsEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassSampleLocationsEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubpassSampleLocationsEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassSampleLocationsEXT>())).subpassIndex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassSampleLocationsEXT),
            "::",
            stringify!(subpassIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSubpassSampleLocationsEXT>())).sampleLocationsInfo as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassSampleLocationsEXT),
            "::",
            stringify!(sampleLocationsInfo)
        )
    );
}
impl Default for VkSubpassSampleLocationsEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassSampleLocationsBeginInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachmentInitialSampleLocationsCount: u32,
    pub pAttachmentInitialSampleLocations: *const VkAttachmentSampleLocationsEXT,
    pub postSubpassSampleLocationsCount: u32,
    pub pPostSubpassSampleLocations: *const VkSubpassSampleLocationsEXT,
}
#[test]
fn bindgen_test_layout_VkRenderPassSampleLocationsBeginInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassSampleLocationsBeginInfoEXT>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassSampleLocationsBeginInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassSampleLocationsBeginInfoEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassSampleLocationsBeginInfoEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassSampleLocationsBeginInfoEXT>()))
                .attachmentInitialSampleLocationsCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT),
            "::",
            stringify!(attachmentInitialSampleLocationsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassSampleLocationsBeginInfoEXT>()))
                .pAttachmentInitialSampleLocations as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT),
            "::",
            stringify!(pAttachmentInitialSampleLocations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassSampleLocationsBeginInfoEXT>()))
                .postSubpassSampleLocationsCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT),
            "::",
            stringify!(postSubpassSampleLocationsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassSampleLocationsBeginInfoEXT>()))
                .pPostSubpassSampleLocations as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT),
            "::",
            stringify!(pPostSubpassSampleLocations)
        )
    );
}
impl Default for VkRenderPassSampleLocationsBeginInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineSampleLocationsStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub sampleLocationsEnable: VkBool32,
    pub sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[test]
fn bindgen_test_layout_VkPipelineSampleLocationsStateCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineSampleLocationsStateCreateInfoEXT>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineSampleLocationsStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineSampleLocationsStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineSampleLocationsStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineSampleLocationsStateCreateInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineSampleLocationsStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineSampleLocationsStateCreateInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineSampleLocationsStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineSampleLocationsStateCreateInfoEXT>()))
                .sampleLocationsEnable as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineSampleLocationsStateCreateInfoEXT),
            "::",
            stringify!(sampleLocationsEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineSampleLocationsStateCreateInfoEXT>()))
                .sampleLocationsInfo as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineSampleLocationsStateCreateInfoEXT),
            "::",
            stringify!(sampleLocationsInfo)
        )
    );
}
impl Default for VkPipelineSampleLocationsStateCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub sampleLocationSampleCounts: VkSampleCountFlags,
    pub maxSampleLocationGridSize: VkExtent2D,
    pub sampleLocationCoordinateRange: [f32; 2usize],
    pub sampleLocationSubPixelBits: u32,
    pub variableSampleLocations: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSampleLocationsPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSampleLocationsPropertiesEXT>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSampleLocationsPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSampleLocationsPropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSampleLocationsPropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSampleLocationsPropertiesEXT>()))
                .sampleLocationSampleCounts as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(sampleLocationSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSampleLocationsPropertiesEXT>()))
                .maxSampleLocationGridSize as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(maxSampleLocationGridSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSampleLocationsPropertiesEXT>()))
                .sampleLocationCoordinateRange as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(sampleLocationCoordinateRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSampleLocationsPropertiesEXT>()))
                .sampleLocationSubPixelBits as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(sampleLocationSubPixelBits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSampleLocationsPropertiesEXT>()))
                .variableSampleLocations as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(variableSampleLocations)
        )
    );
}
impl Default for VkPhysicalDeviceSampleLocationsPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMultisamplePropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxSampleLocationGridSize: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkMultisamplePropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkMultisamplePropertiesEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkMultisamplePropertiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMultisamplePropertiesEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMultisamplePropertiesEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMultisamplePropertiesEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultisamplePropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMultisamplePropertiesEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultisamplePropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMultisamplePropertiesEXT>())).maxSampleLocationGridSize
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultisamplePropertiesEXT),
            "::",
            stringify!(maxSampleLocationGridSize)
        )
    );
}
impl Default for VkMultisamplePropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCmdSetSampleLocationsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pSampleLocationsInfo: *const VkSampleLocationsInfoEXT,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        samples: VkSampleCountFlagBits,
        pMultisampleProperties: *mut VkMultisamplePropertiesEXT,
    ),
>;
extern "system" {
    pub fn vkCmdSetSampleLocationsEXT(
        commandBuffer: VkCommandBuffer,
        pSampleLocationsInfo: *const VkSampleLocationsInfoEXT,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceMultisamplePropertiesEXT(
        physicalDevice: VkPhysicalDevice,
        samples: VkSampleCountFlagBits,
        pMultisampleProperties: *mut VkMultisamplePropertiesEXT,
    );
}
pub const VkBlendOverlapEXT_VK_BLEND_OVERLAP_UNCORRELATED_EXT: VkBlendOverlapEXT = 0;
pub const VkBlendOverlapEXT_VK_BLEND_OVERLAP_DISJOINT_EXT: VkBlendOverlapEXT = 1;
pub const VkBlendOverlapEXT_VK_BLEND_OVERLAP_CONJOINT_EXT: VkBlendOverlapEXT = 2;
pub const VkBlendOverlapEXT_VK_BLEND_OVERLAP_MAX_ENUM_EXT: VkBlendOverlapEXT = 2147483647;
pub type VkBlendOverlapEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub advancedBlendCoherentOperations: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>()))
                .advancedBlendCoherentOperations as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT),
            "::",
            stringify!(advancedBlendCoherentOperations)
        )
    );
}
impl Default for VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub advancedBlendMaxColorAttachments: u32,
    pub advancedBlendIndependentBlend: VkBool32,
    pub advancedBlendNonPremultipliedSrcColor: VkBool32,
    pub advancedBlendNonPremultipliedDstColor: VkBool32,
    pub advancedBlendCorrelatedOverlap: VkBool32,
    pub advancedBlendAllOperations: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>()))
                .advancedBlendMaxColorAttachments as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(advancedBlendMaxColorAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>()))
                .advancedBlendIndependentBlend as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(advancedBlendIndependentBlend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>()))
                .advancedBlendNonPremultipliedSrcColor as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(advancedBlendNonPremultipliedSrcColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>()))
                .advancedBlendNonPremultipliedDstColor as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(advancedBlendNonPremultipliedDstColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>()))
                .advancedBlendCorrelatedOverlap as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(advancedBlendCorrelatedOverlap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>()))
                .advancedBlendAllOperations as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(advancedBlendAllOperations)
        )
    );
}
impl Default for VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcPremultiplied: VkBool32,
    pub dstPremultiplied: VkBool32,
    pub blendOverlap: VkBlendOverlapEXT,
}
#[test]
fn bindgen_test_layout_VkPipelineColorBlendAdvancedStateCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineColorBlendAdvancedStateCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineColorBlendAdvancedStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendAdvancedStateCreateInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendAdvancedStateCreateInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendAdvancedStateCreateInfoEXT>()))
                .srcPremultiplied as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT),
            "::",
            stringify!(srcPremultiplied)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendAdvancedStateCreateInfoEXT>()))
                .dstPremultiplied as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT),
            "::",
            stringify!(dstPremultiplied)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineColorBlendAdvancedStateCreateInfoEXT>())).blendOverlap
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT),
            "::",
            stringify!(blendOverlap)
        )
    );
}
impl Default for VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCoverageToColorStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCoverageToColorStateCreateFlagsNV,
    pub coverageToColorEnable: VkBool32,
    pub coverageToColorLocation: u32,
}
#[test]
fn bindgen_test_layout_VkPipelineCoverageToColorStateCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCoverageToColorStateCreateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCoverageToColorStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageToColorStateCreateInfoNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageToColorStateCreateInfoNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageToColorStateCreateInfoNV>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageToColorStateCreateInfoNV>()))
                .coverageToColorEnable as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV),
            "::",
            stringify!(coverageToColorEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageToColorStateCreateInfoNV>()))
                .coverageToColorLocation as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV),
            "::",
            stringify!(coverageToColorLocation)
        )
    );
}
impl Default for VkPipelineCoverageToColorStateCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_NONE_NV:
    VkCoverageModulationModeNV = 0;
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_RGB_NV:
    VkCoverageModulationModeNV = 1;
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_ALPHA_NV:
    VkCoverageModulationModeNV = 2;
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_RGBA_NV:
    VkCoverageModulationModeNV = 3;
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV:
    VkCoverageModulationModeNV = 2147483647;
pub type VkCoverageModulationModeNV = ::std::os::raw::c_uint;
pub type VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCoverageModulationStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCoverageModulationStateCreateFlagsNV,
    pub coverageModulationMode: VkCoverageModulationModeNV,
    pub coverageModulationTableEnable: VkBool32,
    pub coverageModulationTableCount: u32,
    pub pCoverageModulationTable: *const f32,
}
#[test]
fn bindgen_test_layout_VkPipelineCoverageModulationStateCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCoverageModulationStateCreateInfoNV>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCoverageModulationStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageModulationStateCreateInfoNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageModulationStateCreateInfoNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageModulationStateCreateInfoNV>())).flags
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageModulationStateCreateInfoNV>()))
                .coverageModulationMode as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(coverageModulationMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageModulationStateCreateInfoNV>()))
                .coverageModulationTableEnable as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(coverageModulationTableEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageModulationStateCreateInfoNV>()))
                .coverageModulationTableCount as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(coverageModulationTableCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageModulationStateCreateInfoNV>()))
                .pCoverageModulationTable as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(pCoverageModulationTable)
        )
    );
}
impl Default for VkPipelineCoverageModulationStateCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSMCount: u32,
    pub shaderWarpsPerSM: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>())).shaderSMCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV),
            "::",
            stringify!(shaderSMCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>()))
                .shaderWarpsPerSM as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV),
            "::",
            stringify!(shaderWarpsPerSM)
        )
    );
}
impl Default for VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSMBuiltins: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV>())).shaderSMBuiltins
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV),
            "::",
            stringify!(shaderSMBuiltins)
        )
    );
}
impl Default for VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDrmFormatModifierPropertiesEXT {
    pub drmFormatModifier: u64,
    pub drmFormatModifierPlaneCount: u32,
    pub drmFormatModifierTilingFeatures: VkFormatFeatureFlags,
}
#[test]
fn bindgen_test_layout_VkDrmFormatModifierPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDrmFormatModifierPropertiesEXT>(),
        16usize,
        concat!("Size of: ", stringify!(VkDrmFormatModifierPropertiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDrmFormatModifierPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDrmFormatModifierPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrmFormatModifierPropertiesEXT>())).drmFormatModifier
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesEXT),
            "::",
            stringify!(drmFormatModifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrmFormatModifierPropertiesEXT>())).drmFormatModifierPlaneCount
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesEXT),
            "::",
            stringify!(drmFormatModifierPlaneCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrmFormatModifierPropertiesEXT>()))
                .drmFormatModifierTilingFeatures as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesEXT),
            "::",
            stringify!(drmFormatModifierTilingFeatures)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrmFormatModifierPropertiesListEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub drmFormatModifierCount: u32,
    pub pDrmFormatModifierProperties: *mut VkDrmFormatModifierPropertiesEXT,
}
#[test]
fn bindgen_test_layout_VkDrmFormatModifierPropertiesListEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDrmFormatModifierPropertiesListEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkDrmFormatModifierPropertiesListEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDrmFormatModifierPropertiesListEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDrmFormatModifierPropertiesListEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrmFormatModifierPropertiesListEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesListEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrmFormatModifierPropertiesListEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesListEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrmFormatModifierPropertiesListEXT>())).drmFormatModifierCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesListEXT),
            "::",
            stringify!(drmFormatModifierCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrmFormatModifierPropertiesListEXT>()))
                .pDrmFormatModifierProperties as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesListEXT),
            "::",
            stringify!(pDrmFormatModifierProperties)
        )
    );
}
impl Default for VkDrmFormatModifierPropertiesListEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub drmFormatModifier: u64,
    pub sharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageDrmFormatModifierInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>()))
                .drmFormatModifier as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT),
            "::",
            stringify!(drmFormatModifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>())).sharingMode
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT),
            "::",
            stringify!(sharingMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>()))
                .queueFamilyIndexCount as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT),
            "::",
            stringify!(queueFamilyIndexCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>()))
                .pQueueFamilyIndices as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT),
            "::",
            stringify!(pQueueFamilyIndices)
        )
    );
}
impl Default for VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageDrmFormatModifierListCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub drmFormatModifierCount: u32,
    pub pDrmFormatModifiers: *const u64,
}
#[test]
fn bindgen_test_layout_VkImageDrmFormatModifierListCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkImageDrmFormatModifierListCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkImageDrmFormatModifierListCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageDrmFormatModifierListCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImageDrmFormatModifierListCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageDrmFormatModifierListCreateInfoEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierListCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageDrmFormatModifierListCreateInfoEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierListCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageDrmFormatModifierListCreateInfoEXT>()))
                .drmFormatModifierCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierListCreateInfoEXT),
            "::",
            stringify!(drmFormatModifierCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageDrmFormatModifierListCreateInfoEXT>()))
                .pDrmFormatModifiers as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierListCreateInfoEXT),
            "::",
            stringify!(pDrmFormatModifiers)
        )
    );
}
impl Default for VkImageDrmFormatModifierListCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub drmFormatModifier: u64,
    pub drmFormatModifierPlaneCount: u32,
    pub pPlaneLayouts: *const VkSubresourceLayout,
}
#[test]
fn bindgen_test_layout_VkImageDrmFormatModifierExplicitCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkImageDrmFormatModifierExplicitCreateInfoEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageDrmFormatModifierExplicitCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageDrmFormatModifierExplicitCreateInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageDrmFormatModifierExplicitCreateInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageDrmFormatModifierExplicitCreateInfoEXT>()))
                .drmFormatModifier as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT),
            "::",
            stringify!(drmFormatModifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageDrmFormatModifierExplicitCreateInfoEXT>()))
                .drmFormatModifierPlaneCount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT),
            "::",
            stringify!(drmFormatModifierPlaneCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageDrmFormatModifierExplicitCreateInfoEXT>())).pPlaneLayouts
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT),
            "::",
            stringify!(pPlaneLayouts)
        )
    );
}
impl Default for VkImageDrmFormatModifierExplicitCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageDrmFormatModifierPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub drmFormatModifier: u64,
}
#[test]
fn bindgen_test_layout_VkImageDrmFormatModifierPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkImageDrmFormatModifierPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkImageDrmFormatModifierPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageDrmFormatModifierPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImageDrmFormatModifierPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageDrmFormatModifierPropertiesEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageDrmFormatModifierPropertiesEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImageDrmFormatModifierPropertiesEXT>())).drmFormatModifier
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierPropertiesEXT),
            "::",
            stringify!(drmFormatModifier)
        )
    );
}
impl Default for VkImageDrmFormatModifierPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetImageDrmFormatModifierPropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pProperties: *mut VkImageDrmFormatModifierPropertiesEXT,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetImageDrmFormatModifierPropertiesEXT(
        device: VkDevice,
        image: VkImage,
        pProperties: *mut VkImageDrmFormatModifierPropertiesEXT,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationCacheEXT_T {
    _unused: [u8; 0],
}
pub type VkValidationCacheEXT = *mut VkValidationCacheEXT_T;
pub const VkValidationCacheHeaderVersionEXT_VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT:
    VkValidationCacheHeaderVersionEXT = 1;
pub const VkValidationCacheHeaderVersionEXT_VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT:
    VkValidationCacheHeaderVersionEXT = 2147483647;
pub type VkValidationCacheHeaderVersionEXT = ::std::os::raw::c_uint;
pub type VkValidationCacheCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationCacheCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkValidationCacheCreateFlagsEXT,
    pub initialDataSize: size_t,
    pub pInitialData: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkValidationCacheCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkValidationCacheCreateInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkValidationCacheCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkValidationCacheCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkValidationCacheCreateInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkValidationCacheCreateInfoEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationCacheCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkValidationCacheCreateInfoEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationCacheCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkValidationCacheCreateInfoEXT>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationCacheCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkValidationCacheCreateInfoEXT>())).initialDataSize as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationCacheCreateInfoEXT),
            "::",
            stringify!(initialDataSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkValidationCacheCreateInfoEXT>())).pInitialData as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationCacheCreateInfoEXT),
            "::",
            stringify!(pInitialData)
        )
    );
}
impl Default for VkValidationCacheCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderModuleValidationCacheCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub validationCache: VkValidationCacheEXT,
}
#[test]
fn bindgen_test_layout_VkShaderModuleValidationCacheCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkShaderModuleValidationCacheCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkShaderModuleValidationCacheCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkShaderModuleValidationCacheCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkShaderModuleValidationCacheCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderModuleValidationCacheCreateInfoEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleValidationCacheCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderModuleValidationCacheCreateInfoEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleValidationCacheCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShaderModuleValidationCacheCreateInfoEXT>())).validationCache
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleValidationCacheCreateInfoEXT),
            "::",
            stringify!(validationCache)
        )
    );
}
impl Default for VkShaderModuleValidationCacheCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCreateValidationCacheEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkValidationCacheCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pValidationCache: *mut VkValidationCacheEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyValidationCacheEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkMergeValidationCachesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        dstCache: VkValidationCacheEXT,
        srcCacheCount: u32,
        pSrcCaches: *const VkValidationCacheEXT,
    ) -> VkResult,
>;
pub type PFN_vkGetValidationCacheDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pDataSize: *mut size_t,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkCreateValidationCacheEXT(
        device: VkDevice,
        pCreateInfo: *const VkValidationCacheCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pValidationCache: *mut VkValidationCacheEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyValidationCacheEXT(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkMergeValidationCachesEXT(
        device: VkDevice,
        dstCache: VkValidationCacheEXT,
        srcCacheCount: u32,
        pSrcCaches: *const VkValidationCacheEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetValidationCacheDataEXT(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pDataSize: *mut size_t,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
pub use self::VkDescriptorBindingFlagBits as VkDescriptorBindingFlagBitsEXT;
pub type VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags;
pub type VkDescriptorSetLayoutBindingFlagsCreateInfoEXT =
    VkDescriptorSetLayoutBindingFlagsCreateInfo;
pub type VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;
pub type VkPhysicalDeviceDescriptorIndexingPropertiesEXT =
    VkPhysicalDeviceDescriptorIndexingProperties;
pub type VkDescriptorSetVariableDescriptorCountAllocateInfoEXT =
    VkDescriptorSetVariableDescriptorCountAllocateInfo;
pub type VkDescriptorSetVariableDescriptorCountLayoutSupportEXT =
    VkDescriptorSetVariableDescriptorCountLayoutSupport;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV:
    VkShadingRatePaletteEntryNV = 0;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 1;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 2;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 3;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 4;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 5;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV : VkShadingRatePaletteEntryNV = 6 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV : VkShadingRatePaletteEntryNV = 7 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV : VkShadingRatePaletteEntryNV = 8 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV : VkShadingRatePaletteEntryNV = 9 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV : VkShadingRatePaletteEntryNV = 10 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV : VkShadingRatePaletteEntryNV = 11 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV:
    VkShadingRatePaletteEntryNV = 2147483647;
pub type VkShadingRatePaletteEntryNV = ::std::os::raw::c_uint;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV:
    VkCoarseSampleOrderTypeNV = 0;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV:
    VkCoarseSampleOrderTypeNV = 1;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV:
    VkCoarseSampleOrderTypeNV = 2;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV:
    VkCoarseSampleOrderTypeNV = 3;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV:
    VkCoarseSampleOrderTypeNV = 2147483647;
pub type VkCoarseSampleOrderTypeNV = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShadingRatePaletteNV {
    pub shadingRatePaletteEntryCount: u32,
    pub pShadingRatePaletteEntries: *const VkShadingRatePaletteEntryNV,
}
#[test]
fn bindgen_test_layout_VkShadingRatePaletteNV() {
    assert_eq!(
        ::std::mem::size_of::<VkShadingRatePaletteNV>(),
        16usize,
        concat!("Size of: ", stringify!(VkShadingRatePaletteNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkShadingRatePaletteNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkShadingRatePaletteNV))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShadingRatePaletteNV>())).shadingRatePaletteEntryCount
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShadingRatePaletteNV),
            "::",
            stringify!(shadingRatePaletteEntryCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkShadingRatePaletteNV>())).pShadingRatePaletteEntries
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShadingRatePaletteNV),
            "::",
            stringify!(pShadingRatePaletteEntries)
        )
    );
}
impl Default for VkShadingRatePaletteNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub shadingRateImageEnable: VkBool32,
    pub viewportCount: u32,
    pub pShadingRatePalettes: *const VkShadingRatePaletteNV,
}
#[test]
fn bindgen_test_layout_VkPipelineViewportShadingRateImageStateCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineViewportShadingRateImageStateCreateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineViewportShadingRateImageStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportShadingRateImageStateCreateInfoNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportShadingRateImageStateCreateInfoNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportShadingRateImageStateCreateInfoNV>()))
                .shadingRateImageEnable as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV),
            "::",
            stringify!(shadingRateImageEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportShadingRateImageStateCreateInfoNV>()))
                .viewportCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV),
            "::",
            stringify!(viewportCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportShadingRateImageStateCreateInfoNV>()))
                .pShadingRatePalettes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV),
            "::",
            stringify!(pShadingRatePalettes)
        )
    );
}
impl Default for VkPipelineViewportShadingRateImageStateCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shadingRateImage: VkBool32,
    pub shadingRateCoarseSampleOrder: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShadingRateImageFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShadingRateImageFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShadingRateImageFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShadingRateImageFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShadingRateImageFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShadingRateImageFeaturesNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImageFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShadingRateImageFeaturesNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImageFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShadingRateImageFeaturesNV>())).shadingRateImage
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImageFeaturesNV),
            "::",
            stringify!(shadingRateImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShadingRateImageFeaturesNV>()))
                .shadingRateCoarseSampleOrder as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImageFeaturesNV),
            "::",
            stringify!(shadingRateCoarseSampleOrder)
        )
    );
}
impl Default for VkPhysicalDeviceShadingRateImageFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shadingRateTexelSize: VkExtent2D,
    pub shadingRatePaletteSize: u32,
    pub shadingRateMaxCoarseSamples: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShadingRateImagePropertiesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShadingRateImagePropertiesNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShadingRateImagePropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShadingRateImagePropertiesNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShadingRateImagePropertiesNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShadingRateImagePropertiesNV>()))
                .shadingRateTexelSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV),
            "::",
            stringify!(shadingRateTexelSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShadingRateImagePropertiesNV>()))
                .shadingRatePaletteSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV),
            "::",
            stringify!(shadingRatePaletteSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShadingRateImagePropertiesNV>()))
                .shadingRateMaxCoarseSamples as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV),
            "::",
            stringify!(shadingRateMaxCoarseSamples)
        )
    );
}
impl Default for VkPhysicalDeviceShadingRateImagePropertiesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkCoarseSampleLocationNV {
    pub pixelX: u32,
    pub pixelY: u32,
    pub sample: u32,
}
#[test]
fn bindgen_test_layout_VkCoarseSampleLocationNV() {
    assert_eq!(
        ::std::mem::size_of::<VkCoarseSampleLocationNV>(),
        12usize,
        concat!("Size of: ", stringify!(VkCoarseSampleLocationNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCoarseSampleLocationNV>(),
        4usize,
        concat!("Alignment of ", stringify!(VkCoarseSampleLocationNV))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCoarseSampleLocationNV>())).pixelX as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleLocationNV),
            "::",
            stringify!(pixelX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCoarseSampleLocationNV>())).pixelY as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleLocationNV),
            "::",
            stringify!(pixelY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCoarseSampleLocationNV>())).sample as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleLocationNV),
            "::",
            stringify!(sample)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCoarseSampleOrderCustomNV {
    pub shadingRate: VkShadingRatePaletteEntryNV,
    pub sampleCount: u32,
    pub sampleLocationCount: u32,
    pub pSampleLocations: *const VkCoarseSampleLocationNV,
}
#[test]
fn bindgen_test_layout_VkCoarseSampleOrderCustomNV() {
    assert_eq!(
        ::std::mem::size_of::<VkCoarseSampleOrderCustomNV>(),
        24usize,
        concat!("Size of: ", stringify!(VkCoarseSampleOrderCustomNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCoarseSampleOrderCustomNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCoarseSampleOrderCustomNV))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCoarseSampleOrderCustomNV>())).shadingRate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleOrderCustomNV),
            "::",
            stringify!(shadingRate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCoarseSampleOrderCustomNV>())).sampleCount as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleOrderCustomNV),
            "::",
            stringify!(sampleCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCoarseSampleOrderCustomNV>())).sampleLocationCount as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleOrderCustomNV),
            "::",
            stringify!(sampleLocationCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCoarseSampleOrderCustomNV>())).pSampleLocations as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleOrderCustomNV),
            "::",
            stringify!(pSampleLocations)
        )
    );
}
impl Default for VkCoarseSampleOrderCustomNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub sampleOrderType: VkCoarseSampleOrderTypeNV,
    pub customSampleOrderCount: u32,
    pub pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV,
}
#[test]
fn bindgen_test_layout_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>()))
                .sampleOrderType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV),
            "::",
            stringify!(sampleOrderType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>()))
                .customSampleOrderCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV),
            "::",
            stringify!(customSampleOrderCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>()))
                .pCustomSampleOrders as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV),
            "::",
            stringify!(pCustomSampleOrders)
        )
    );
}
impl Default for VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCmdBindShadingRateImageNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        imageView: VkImageView,
        imageLayout: VkImageLayout,
    ),
>;
pub type PFN_vkCmdSetViewportShadingRatePaletteNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pShadingRatePalettes: *const VkShadingRatePaletteNV,
    ),
>;
pub type PFN_vkCmdSetCoarseSampleOrderNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        sampleOrderType: VkCoarseSampleOrderTypeNV,
        customSampleOrderCount: u32,
        pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV,
    ),
>;
extern "system" {
    pub fn vkCmdBindShadingRateImageNV(
        commandBuffer: VkCommandBuffer,
        imageView: VkImageView,
        imageLayout: VkImageLayout,
    );
}
extern "system" {
    pub fn vkCmdSetViewportShadingRatePaletteNV(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pShadingRatePalettes: *const VkShadingRatePaletteNV,
    );
}
extern "system" {
    pub fn vkCmdSetCoarseSampleOrderNV(
        commandBuffer: VkCommandBuffer,
        sampleOrderType: VkCoarseSampleOrderTypeNV,
        customSampleOrderCount: u32,
        pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureKHR_T {
    _unused: [u8; 0],
}
pub type VkAccelerationStructureKHR = *mut VkAccelerationStructureKHR_T;
pub type VkAccelerationStructureNV = VkAccelerationStructureKHR;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR:
    VkRayTracingShaderGroupTypeKHR = 0;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR : VkRayTracingShaderGroupTypeKHR = 1 ;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR : VkRayTracingShaderGroupTypeKHR = 2 ;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV:
    VkRayTracingShaderGroupTypeKHR = 0;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV:
    VkRayTracingShaderGroupTypeKHR = 1;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV : VkRayTracingShaderGroupTypeKHR = 2 ;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR:
    VkRayTracingShaderGroupTypeKHR = 2147483647;
pub type VkRayTracingShaderGroupTypeKHR = ::std::os::raw::c_uint;
pub use self::VkRayTracingShaderGroupTypeKHR as VkRayTracingShaderGroupTypeNV;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_TRIANGLES_KHR: VkGeometryTypeKHR = 0;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_AABBS_KHR: VkGeometryTypeKHR = 1;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_INSTANCES_KHR: VkGeometryTypeKHR = 1000150000;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_TRIANGLES_NV: VkGeometryTypeKHR = 0;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_AABBS_NV: VkGeometryTypeKHR = 1;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_MAX_ENUM_KHR: VkGeometryTypeKHR = 2147483647;
pub type VkGeometryTypeKHR = ::std::os::raw::c_uint;
pub use self::VkGeometryTypeKHR as VkGeometryTypeNV;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR:
    VkAccelerationStructureTypeKHR = 0;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR:
    VkAccelerationStructureTypeKHR = 1;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV:
    VkAccelerationStructureTypeKHR = 0;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV:
    VkAccelerationStructureTypeKHR = 1;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR:
    VkAccelerationStructureTypeKHR = 2147483647;
pub type VkAccelerationStructureTypeKHR = ::std::os::raw::c_uint;
pub use self::VkAccelerationStructureTypeKHR as VkAccelerationStructureTypeNV;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR:
    VkCopyAccelerationStructureModeKHR = 0;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR:
    VkCopyAccelerationStructureModeKHR = 1;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR:
    VkCopyAccelerationStructureModeKHR = 2;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR:
    VkCopyAccelerationStructureModeKHR = 3;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV:
    VkCopyAccelerationStructureModeKHR = 0;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV:
    VkCopyAccelerationStructureModeKHR = 1;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR:
    VkCopyAccelerationStructureModeKHR = 2147483647;
pub type VkCopyAccelerationStructureModeKHR = ::std::os::raw::c_uint;
pub use self::VkCopyAccelerationStructureModeKHR as VkCopyAccelerationStructureModeNV;
pub const VkAccelerationStructureMemoryRequirementsTypeKHR_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR : VkAccelerationStructureMemoryRequirementsTypeKHR = 0 ;
pub const VkAccelerationStructureMemoryRequirementsTypeKHR_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR : VkAccelerationStructureMemoryRequirementsTypeKHR = 1 ;
pub const VkAccelerationStructureMemoryRequirementsTypeKHR_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR : VkAccelerationStructureMemoryRequirementsTypeKHR = 2 ;
pub const VkAccelerationStructureMemoryRequirementsTypeKHR_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV : VkAccelerationStructureMemoryRequirementsTypeKHR = 0 ;
pub const VkAccelerationStructureMemoryRequirementsTypeKHR_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV : VkAccelerationStructureMemoryRequirementsTypeKHR = 1 ;
pub const VkAccelerationStructureMemoryRequirementsTypeKHR_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV : VkAccelerationStructureMemoryRequirementsTypeKHR = 2 ;
pub const VkAccelerationStructureMemoryRequirementsTypeKHR_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_KHR : VkAccelerationStructureMemoryRequirementsTypeKHR = 2147483647 ;
pub type VkAccelerationStructureMemoryRequirementsTypeKHR = ::std::os::raw::c_uint;
pub use self::VkAccelerationStructureMemoryRequirementsTypeKHR as VkAccelerationStructureMemoryRequirementsTypeNV;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_OPAQUE_BIT_KHR: VkGeometryFlagBitsKHR = 1;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR:
    VkGeometryFlagBitsKHR = 2;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_OPAQUE_BIT_NV: VkGeometryFlagBitsKHR = 1;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV:
    VkGeometryFlagBitsKHR = 2;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR: VkGeometryFlagBitsKHR =
    2147483647;
pub type VkGeometryFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkGeometryFlagsKHR = VkFlags;
pub type VkGeometryFlagsNV = VkGeometryFlagsKHR;
pub use self::VkGeometryFlagBitsKHR as VkGeometryFlagBitsNV;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR : VkGeometryInstanceFlagBitsKHR = 1 ;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR : VkGeometryInstanceFlagBitsKHR = 2 ;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR:
    VkGeometryInstanceFlagBitsKHR = 4;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR:
    VkGeometryInstanceFlagBitsKHR = 8;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV:
    VkGeometryInstanceFlagBitsKHR = 1;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV : VkGeometryInstanceFlagBitsKHR = 2 ;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV:
    VkGeometryInstanceFlagBitsKHR = 4;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV:
    VkGeometryInstanceFlagBitsKHR = 8;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR:
    VkGeometryInstanceFlagBitsKHR = 2147483647;
pub type VkGeometryInstanceFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkGeometryInstanceFlagsKHR = VkFlags;
pub type VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR;
pub use self::VkGeometryInstanceFlagBitsKHR as VkGeometryInstanceFlagBitsNV;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 1 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 2 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 4 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 8 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 16 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 1 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 2 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 4 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 8 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 16 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR : VkBuildAccelerationStructureFlagBitsKHR = 2147483647 ;
pub type VkBuildAccelerationStructureFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkBuildAccelerationStructureFlagsKHR = VkFlags;
pub type VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;
pub use self::VkBuildAccelerationStructureFlagBitsKHR as VkBuildAccelerationStructureFlagBitsNV;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRayTracingShaderGroupCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkRayTracingShaderGroupTypeKHR,
    pub generalShader: u32,
    pub closestHitShader: u32,
    pub anyHitShader: u32,
    pub intersectionShader: u32,
}
#[test]
fn bindgen_test_layout_VkRayTracingShaderGroupCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkRayTracingShaderGroupCreateInfoNV>(),
        40usize,
        concat!("Size of: ", stringify!(VkRayTracingShaderGroupCreateInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRayTracingShaderGroupCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingShaderGroupCreateInfoNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingShaderGroupCreateInfoNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingShaderGroupCreateInfoNV>())).type_ as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingShaderGroupCreateInfoNV>())).generalShader
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(generalShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingShaderGroupCreateInfoNV>())).closestHitShader
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(closestHitShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingShaderGroupCreateInfoNV>())).anyHitShader as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(anyHitShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingShaderGroupCreateInfoNV>())).intersectionShader
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(intersectionShader)
        )
    );
}
impl Default for VkRayTracingShaderGroupCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRayTracingPipelineCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub groupCount: u32,
    pub pGroups: *const VkRayTracingShaderGroupCreateInfoNV,
    pub maxRecursionDepth: u32,
    pub layout: VkPipelineLayout,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[test]
fn bindgen_test_layout_VkRayTracingPipelineCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkRayTracingPipelineCreateInfoNV>(),
        80usize,
        concat!("Size of: ", stringify!(VkRayTracingPipelineCreateInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRayTracingPipelineCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRayTracingPipelineCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingPipelineCreateInfoNV>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingPipelineCreateInfoNV>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingPipelineCreateInfoNV>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingPipelineCreateInfoNV>())).stageCount as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(stageCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingPipelineCreateInfoNV>())).pStages as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(pStages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingPipelineCreateInfoNV>())).groupCount as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(groupCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingPipelineCreateInfoNV>())).pGroups as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(pGroups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingPipelineCreateInfoNV>())).maxRecursionDepth
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(maxRecursionDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingPipelineCreateInfoNV>())).layout as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingPipelineCreateInfoNV>())).basePipelineHandle
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(basePipelineHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRayTracingPipelineCreateInfoNV>())).basePipelineIndex
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(basePipelineIndex)
        )
    );
}
impl Default for VkRayTracingPipelineCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryTrianglesNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub vertexData: VkBuffer,
    pub vertexOffset: VkDeviceSize,
    pub vertexCount: u32,
    pub vertexStride: VkDeviceSize,
    pub vertexFormat: VkFormat,
    pub indexData: VkBuffer,
    pub indexOffset: VkDeviceSize,
    pub indexCount: u32,
    pub indexType: VkIndexType,
    pub transformData: VkBuffer,
    pub transformOffset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkGeometryTrianglesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkGeometryTrianglesNV>(),
        96usize,
        concat!("Size of: ", stringify!(VkGeometryTrianglesNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGeometryTrianglesNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkGeometryTrianglesNV))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryTrianglesNV>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryTrianglesNV>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeometryTrianglesNV>())).vertexData as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(vertexData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeometryTrianglesNV>())).vertexOffset as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(vertexOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeometryTrianglesNV>())).vertexCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(vertexCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeometryTrianglesNV>())).vertexStride as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(vertexStride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeometryTrianglesNV>())).vertexFormat as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(vertexFormat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryTrianglesNV>())).indexData as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(indexData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeometryTrianglesNV>())).indexOffset as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(indexOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeometryTrianglesNV>())).indexCount as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(indexCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryTrianglesNV>())).indexType as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(indexType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeometryTrianglesNV>())).transformData as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(transformData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeometryTrianglesNV>())).transformOffset as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(transformOffset)
        )
    );
}
impl Default for VkGeometryTrianglesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryAABBNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub aabbData: VkBuffer,
    pub numAABBs: u32,
    pub stride: u32,
    pub offset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkGeometryAABBNV() {
    assert_eq!(
        ::std::mem::size_of::<VkGeometryAABBNV>(),
        40usize,
        concat!("Size of: ", stringify!(VkGeometryAABBNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGeometryAABBNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkGeometryAABBNV))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryAABBNV>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryAABBNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryAABBNV>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryAABBNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryAABBNV>())).aabbData as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryAABBNV),
            "::",
            stringify!(aabbData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryAABBNV>())).numAABBs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryAABBNV),
            "::",
            stringify!(numAABBs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryAABBNV>())).stride as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryAABBNV),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryAABBNV>())).offset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryAABBNV),
            "::",
            stringify!(offset)
        )
    );
}
impl Default for VkGeometryAABBNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryDataNV {
    pub triangles: VkGeometryTrianglesNV,
    pub aabbs: VkGeometryAABBNV,
}
#[test]
fn bindgen_test_layout_VkGeometryDataNV() {
    assert_eq!(
        ::std::mem::size_of::<VkGeometryDataNV>(),
        136usize,
        concat!("Size of: ", stringify!(VkGeometryDataNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGeometryDataNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkGeometryDataNV))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryDataNV>())).triangles as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryDataNV),
            "::",
            stringify!(triangles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryDataNV>())).aabbs as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryDataNV),
            "::",
            stringify!(aabbs)
        )
    );
}
impl Default for VkGeometryDataNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub geometryType: VkGeometryTypeKHR,
    pub geometry: VkGeometryDataNV,
    pub flags: VkGeometryFlagsKHR,
}
#[test]
fn bindgen_test_layout_VkGeometryNV() {
    assert_eq!(
        ::std::mem::size_of::<VkGeometryNV>(),
        168usize,
        concat!("Size of: ", stringify!(VkGeometryNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGeometryNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkGeometryNV))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryNV>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryNV>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryNV>())).geometryType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryNV),
            "::",
            stringify!(geometryType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryNV>())).geometry as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryNV),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeometryNV>())).flags as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryNV),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkGeometryNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkAccelerationStructureTypeNV,
    pub flags: VkBuildAccelerationStructureFlagsNV,
    pub instanceCount: u32,
    pub geometryCount: u32,
    pub pGeometries: *const VkGeometryNV,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureInfoNV>(),
        40usize,
        concat!("Size of: ", stringify!(VkAccelerationStructureInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureInfoNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAccelerationStructureInfoNV))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureInfoNV>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureInfoNV>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureInfoNV>())).type_ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureInfoNV>())).flags as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureInfoNV>())).instanceCount as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(instanceCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureInfoNV>())).geometryCount as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(geometryCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureInfoNV>())).pGeometries as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(pGeometries)
        )
    );
}
impl Default for VkAccelerationStructureInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub compactedSize: VkDeviceSize,
    pub info: VkAccelerationStructureInfoNV,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureCreateInfoNV>(),
        64usize,
        concat!("Size of: ", stringify!(VkAccelerationStructureCreateInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureCreateInfoNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureCreateInfoNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureCreateInfoNV>())).compactedSize
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoNV),
            "::",
            stringify!(compactedSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureCreateInfoNV>())).info as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoNV),
            "::",
            stringify!(info)
        )
    );
}
impl Default for VkAccelerationStructureCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindAccelerationStructureMemoryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructure: VkAccelerationStructureKHR,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub deviceIndexCount: u32,
    pub pDeviceIndices: *const u32,
}
#[test]
fn bindgen_test_layout_VkBindAccelerationStructureMemoryInfoKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkBindAccelerationStructureMemoryInfoKHR>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(VkBindAccelerationStructureMemoryInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindAccelerationStructureMemoryInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindAccelerationStructureMemoryInfoKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindAccelerationStructureMemoryInfoKHR>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindAccelerationStructureMemoryInfoKHR>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindAccelerationStructureMemoryInfoKHR>()))
                .accelerationStructure as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoKHR),
            "::",
            stringify!(accelerationStructure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindAccelerationStructureMemoryInfoKHR>())).memory as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoKHR),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindAccelerationStructureMemoryInfoKHR>())).memoryOffset
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoKHR),
            "::",
            stringify!(memoryOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindAccelerationStructureMemoryInfoKHR>())).deviceIndexCount
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoKHR),
            "::",
            stringify!(deviceIndexCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindAccelerationStructureMemoryInfoKHR>())).pDeviceIndices
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoKHR),
            "::",
            stringify!(pDeviceIndices)
        )
    );
}
impl Default for VkBindAccelerationStructureMemoryInfoKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkBindAccelerationStructureMemoryInfoNV = VkBindAccelerationStructureMemoryInfoKHR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSetAccelerationStructureKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructureCount: u32,
    pub pAccelerationStructures: *const VkAccelerationStructureKHR,
}
#[test]
fn bindgen_test_layout_VkWriteDescriptorSetAccelerationStructureKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkWriteDescriptorSetAccelerationStructureKHR>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkWriteDescriptorSetAccelerationStructureKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkWriteDescriptorSetAccelerationStructureKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkWriteDescriptorSetAccelerationStructureKHR>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkWriteDescriptorSetAccelerationStructureKHR>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkWriteDescriptorSetAccelerationStructureKHR>()))
                .accelerationStructureCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureKHR),
            "::",
            stringify!(accelerationStructureCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkWriteDescriptorSetAccelerationStructureKHR>()))
                .pAccelerationStructures as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureKHR),
            "::",
            stringify!(pAccelerationStructures)
        )
    );
}
impl Default for VkWriteDescriptorSetAccelerationStructureKHR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkWriteDescriptorSetAccelerationStructureNV = VkWriteDescriptorSetAccelerationStructureKHR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureMemoryRequirementsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkAccelerationStructureMemoryRequirementsTypeNV,
    pub accelerationStructure: VkAccelerationStructureNV,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureMemoryRequirementsInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureMemoryRequirementsInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureMemoryRequirementsInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureMemoryRequirementsInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureMemoryRequirementsInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureMemoryRequirementsInfoNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMemoryRequirementsInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureMemoryRequirementsInfoNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMemoryRequirementsInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureMemoryRequirementsInfoNV>())).type_
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMemoryRequirementsInfoNV),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureMemoryRequirementsInfoNV>()))
                .accelerationStructure as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMemoryRequirementsInfoNV),
            "::",
            stringify!(accelerationStructure)
        )
    );
}
impl Default for VkAccelerationStructureMemoryRequirementsInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderGroupHandleSize: u32,
    pub maxRecursionDepth: u32,
    pub maxShaderGroupStride: u32,
    pub shaderGroupBaseAlignment: u32,
    pub maxGeometryCount: u64,
    pub maxInstanceCount: u64,
    pub maxTriangleCount: u64,
    pub maxDescriptorSetAccelerationStructures: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRayTracingPropertiesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRayTracingPropertiesNV>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRayTracingPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRayTracingPropertiesNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRayTracingPropertiesNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRayTracingPropertiesNV>())).shaderGroupHandleSize
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(shaderGroupHandleSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRayTracingPropertiesNV>())).maxRecursionDepth
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(maxRecursionDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRayTracingPropertiesNV>())).maxShaderGroupStride
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(maxShaderGroupStride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRayTracingPropertiesNV>()))
                .shaderGroupBaseAlignment as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(shaderGroupBaseAlignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRayTracingPropertiesNV>())).maxGeometryCount
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(maxGeometryCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRayTracingPropertiesNV>())).maxInstanceCount
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(maxInstanceCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRayTracingPropertiesNV>())).maxTriangleCount
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(maxTriangleCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRayTracingPropertiesNV>()))
                .maxDescriptorSetAccelerationStructures as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(maxDescriptorSetAccelerationStructures)
        )
    );
}
impl Default for VkPhysicalDeviceRayTracingPropertiesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkTransformMatrixKHR {
    pub matrix: [[f32; 4usize]; 3usize],
}
#[test]
fn bindgen_test_layout_VkTransformMatrixKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkTransformMatrixKHR>(),
        48usize,
        concat!("Size of: ", stringify!(VkTransformMatrixKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkTransformMatrixKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkTransformMatrixKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkTransformMatrixKHR>())).matrix as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTransformMatrixKHR),
            "::",
            stringify!(matrix)
        )
    );
}
pub type VkTransformMatrixNV = VkTransformMatrixKHR;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkAabbPositionsKHR {
    pub minX: f32,
    pub minY: f32,
    pub minZ: f32,
    pub maxX: f32,
    pub maxY: f32,
    pub maxZ: f32,
}
#[test]
fn bindgen_test_layout_VkAabbPositionsKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkAabbPositionsKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkAabbPositionsKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAabbPositionsKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkAabbPositionsKHR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAabbPositionsKHR>())).minX as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAabbPositionsKHR),
            "::",
            stringify!(minX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAabbPositionsKHR>())).minY as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAabbPositionsKHR),
            "::",
            stringify!(minY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAabbPositionsKHR>())).minZ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAabbPositionsKHR),
            "::",
            stringify!(minZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAabbPositionsKHR>())).maxX as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAabbPositionsKHR),
            "::",
            stringify!(maxX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAabbPositionsKHR>())).maxY as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAabbPositionsKHR),
            "::",
            stringify!(maxY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkAabbPositionsKHR>())).maxZ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAabbPositionsKHR),
            "::",
            stringify!(maxZ)
        )
    );
}
pub type VkAabbPositionsNV = VkAabbPositionsKHR;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkAccelerationStructureInstanceKHR {
    pub transform: VkTransformMatrixKHR,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize], u32>,
    pub accelerationStructureReference: u64,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureInstanceKHR() {
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureInstanceKHR>(),
        64usize,
        concat!("Size of: ", stringify!(VkAccelerationStructureInstanceKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureInstanceKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureInstanceKHR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureInstanceKHR>())).transform as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInstanceKHR),
            "::",
            stringify!(transform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkAccelerationStructureInstanceKHR>()))
                .accelerationStructureReference as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInstanceKHR),
            "::",
            stringify!(accelerationStructureReference)
        )
    );
}
impl VkAccelerationStructureInstanceKHR {
    #[inline]
    pub fn instanceCustomIndex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceCustomIndex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn mask(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn instanceShaderBindingTableRecordOffset(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceShaderBindingTableRecordOffset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> VkGeometryInstanceFlagsKHR {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        instanceCustomIndex: u32,
        mask: u32,
        instanceShaderBindingTableRecordOffset: u32,
        flags: VkGeometryInstanceFlagsKHR,
    ) -> __BindgenBitfieldUnit<[u8; 8usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let instanceCustomIndex: u32 = unsafe { ::std::mem::transmute(instanceCustomIndex) };
            instanceCustomIndex as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let mask: u32 = unsafe { ::std::mem::transmute(mask) };
            mask as u64
        });
        __bindgen_bitfield_unit.set(32usize, 24u8, {
            let instanceShaderBindingTableRecordOffset: u32 =
                unsafe { ::std::mem::transmute(instanceShaderBindingTableRecordOffset) };
            instanceShaderBindingTableRecordOffset as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;
pub type PFN_vkCreateAccelerationStructureNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkAccelerationStructureCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pAccelerationStructure: *mut VkAccelerationStructureNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyAccelerationStructureKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkDestroyAccelerationStructureNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetAccelerationStructureMemoryRequirementsNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2KHR,
    ),
>;
pub type PFN_vkBindAccelerationStructureMemoryKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindAccelerationStructureMemoryInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkBindAccelerationStructureMemoryNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindAccelerationStructureMemoryInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkCmdBuildAccelerationStructureNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkAccelerationStructureInfoNV,
        instanceData: VkBuffer,
        instanceOffset: VkDeviceSize,
        update: VkBool32,
        dst: VkAccelerationStructureKHR,
        src: VkAccelerationStructureKHR,
        scratch: VkBuffer,
        scratchOffset: VkDeviceSize,
    ),
>;
pub type PFN_vkCmdCopyAccelerationStructureNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        dst: VkAccelerationStructureKHR,
        src: VkAccelerationStructureKHR,
        mode: VkCopyAccelerationStructureModeKHR,
    ),
>;
pub type PFN_vkCmdTraceRaysNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        raygenShaderBindingTableBuffer: VkBuffer,
        raygenShaderBindingOffset: VkDeviceSize,
        missShaderBindingTableBuffer: VkBuffer,
        missShaderBindingOffset: VkDeviceSize,
        missShaderBindingStride: VkDeviceSize,
        hitShaderBindingTableBuffer: VkBuffer,
        hitShaderBindingOffset: VkDeviceSize,
        hitShaderBindingStride: VkDeviceSize,
        callableShaderBindingTableBuffer: VkBuffer,
        callableShaderBindingOffset: VkDeviceSize,
        callableShaderBindingStride: VkDeviceSize,
        width: u32,
        height: u32,
        depth: u32,
    ),
>;
pub type PFN_vkCreateRayTracingPipelinesNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkRayTracingPipelineCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkGetRayTracingShaderGroupHandlesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: size_t,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetRayTracingShaderGroupHandlesNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: size_t,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetAccelerationStructureHandleNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureKHR,
        dataSize: size_t,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    ),
>;
pub type PFN_vkCmdWriteAccelerationStructuresPropertiesNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    ),
>;
pub type PFN_vkCompileDeferredNV = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pipeline: VkPipeline, shader: u32) -> VkResult,
>;
extern "system" {
    pub fn vkCreateAccelerationStructureNV(
        device: VkDevice,
        pCreateInfo: *const VkAccelerationStructureCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pAccelerationStructure: *mut VkAccelerationStructureNV,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyAccelerationStructureKHR(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkDestroyAccelerationStructureNV(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetAccelerationStructureMemoryRequirementsNV(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2KHR,
    );
}
extern "system" {
    pub fn vkBindAccelerationStructureMemoryKHR(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindAccelerationStructureMemoryInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkBindAccelerationStructureMemoryNV(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindAccelerationStructureMemoryInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdBuildAccelerationStructureNV(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkAccelerationStructureInfoNV,
        instanceData: VkBuffer,
        instanceOffset: VkDeviceSize,
        update: VkBool32,
        dst: VkAccelerationStructureKHR,
        src: VkAccelerationStructureKHR,
        scratch: VkBuffer,
        scratchOffset: VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdCopyAccelerationStructureNV(
        commandBuffer: VkCommandBuffer,
        dst: VkAccelerationStructureKHR,
        src: VkAccelerationStructureKHR,
        mode: VkCopyAccelerationStructureModeKHR,
    );
}
extern "system" {
    pub fn vkCmdTraceRaysNV(
        commandBuffer: VkCommandBuffer,
        raygenShaderBindingTableBuffer: VkBuffer,
        raygenShaderBindingOffset: VkDeviceSize,
        missShaderBindingTableBuffer: VkBuffer,
        missShaderBindingOffset: VkDeviceSize,
        missShaderBindingStride: VkDeviceSize,
        hitShaderBindingTableBuffer: VkBuffer,
        hitShaderBindingOffset: VkDeviceSize,
        hitShaderBindingStride: VkDeviceSize,
        callableShaderBindingTableBuffer: VkBuffer,
        callableShaderBindingOffset: VkDeviceSize,
        callableShaderBindingStride: VkDeviceSize,
        width: u32,
        height: u32,
        depth: u32,
    );
}
extern "system" {
    pub fn vkCreateRayTracingPipelinesNV(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkRayTracingPipelineCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetRayTracingShaderGroupHandlesKHR(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: size_t,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetRayTracingShaderGroupHandlesNV(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: size_t,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetAccelerationStructureHandleNV(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureKHR,
        dataSize: size_t,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdWriteAccelerationStructuresPropertiesKHR(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    );
}
extern "system" {
    pub fn vkCmdWriteAccelerationStructuresPropertiesNV(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    );
}
extern "system" {
    pub fn vkCompileDeferredNV(device: VkDevice, pipeline: VkPipeline, shader: u32) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub representativeFragmentTest: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>()))
                .representativeFragmentTest as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV),
            "::",
            stringify!(representativeFragmentTest)
        )
    );
}
impl Default for VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub representativeFragmentTestEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPipelineRepresentativeFragmentTestStateCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRepresentativeFragmentTestStateCreateInfoNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRepresentativeFragmentTestStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRepresentativeFragmentTestStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRepresentativeFragmentTestStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRepresentativeFragmentTestStateCreateInfoNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRepresentativeFragmentTestStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRepresentativeFragmentTestStateCreateInfoNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRepresentativeFragmentTestStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRepresentativeFragmentTestStateCreateInfoNV>()))
                .representativeFragmentTestEnable as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRepresentativeFragmentTestStateCreateInfoNV),
            "::",
            stringify!(representativeFragmentTestEnable)
        )
    );
}
impl Default for VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageViewType: VkImageViewType,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageViewImageFormatInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageViewImageFormatInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImageViewImageFormatInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageViewImageFormatInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageViewImageFormatInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageViewImageFormatInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageViewImageFormatInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageViewImageFormatInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageViewImageFormatInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageViewImageFormatInfoEXT>())).imageViewType
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageViewImageFormatInfoEXT),
            "::",
            stringify!(imageViewType)
        )
    );
}
impl Default for VkPhysicalDeviceImageViewImageFormatInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub filterCubic: VkBool32,
    pub filterCubicMinmax: VkBool32,
}
#[test]
fn bindgen_test_layout_VkFilterCubicImageViewImageFormatPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkFilterCubicImageViewImageFormatPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkFilterCubicImageViewImageFormatPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkFilterCubicImageViewImageFormatPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkFilterCubicImageViewImageFormatPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFilterCubicImageViewImageFormatPropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFilterCubicImageViewImageFormatPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFilterCubicImageViewImageFormatPropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFilterCubicImageViewImageFormatPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFilterCubicImageViewImageFormatPropertiesEXT>())).filterCubic
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFilterCubicImageViewImageFormatPropertiesEXT),
            "::",
            stringify!(filterCubic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFilterCubicImageViewImageFormatPropertiesEXT>()))
                .filterCubicMinmax as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFilterCubicImageViewImageFormatPropertiesEXT),
            "::",
            stringify!(filterCubicMinmax)
        )
    );
}
impl Default for VkFilterCubicImageViewImageFormatPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkQueueGlobalPriorityEXT_VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT: VkQueueGlobalPriorityEXT = 128;
pub const VkQueueGlobalPriorityEXT_VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT: VkQueueGlobalPriorityEXT =
    256;
pub const VkQueueGlobalPriorityEXT_VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT: VkQueueGlobalPriorityEXT =
    512;
pub const VkQueueGlobalPriorityEXT_VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT: VkQueueGlobalPriorityEXT =
    1024;
pub const VkQueueGlobalPriorityEXT_VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT: VkQueueGlobalPriorityEXT =
    2147483647;
pub type VkQueueGlobalPriorityEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueGlobalPriorityCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub globalPriority: VkQueueGlobalPriorityEXT,
}
#[test]
fn bindgen_test_layout_VkDeviceQueueGlobalPriorityCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceQueueGlobalPriorityCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDeviceQueueGlobalPriorityCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceQueueGlobalPriorityCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceQueueGlobalPriorityCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceQueueGlobalPriorityCreateInfoEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueGlobalPriorityCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceQueueGlobalPriorityCreateInfoEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueGlobalPriorityCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceQueueGlobalPriorityCreateInfoEXT>())).globalPriority
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueGlobalPriorityCreateInfoEXT),
            "::",
            stringify!(globalPriority)
        )
    );
}
impl Default for VkDeviceQueueGlobalPriorityCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportMemoryHostPointerInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
    pub pHostPointer: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkImportMemoryHostPointerInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkImportMemoryHostPointerInfoEXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkImportMemoryHostPointerInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImportMemoryHostPointerInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImportMemoryHostPointerInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImportMemoryHostPointerInfoEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryHostPointerInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImportMemoryHostPointerInfoEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryHostPointerInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImportMemoryHostPointerInfoEXT>())).handleType as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryHostPointerInfoEXT),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkImportMemoryHostPointerInfoEXT>())).pHostPointer as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryHostPointerInfoEXT),
            "::",
            stringify!(pHostPointer)
        )
    );
}
impl Default for VkImportMemoryHostPointerInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryHostPointerPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryTypeBits: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryHostPointerPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryHostPointerPropertiesEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryHostPointerPropertiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryHostPointerPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkMemoryHostPointerPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryHostPointerPropertiesEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryHostPointerPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryHostPointerPropertiesEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryHostPointerPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryHostPointerPropertiesEXT>())).memoryTypeBits as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryHostPointerPropertiesEXT),
            "::",
            stringify!(memoryTypeBits)
        )
    );
}
impl Default for VkMemoryHostPointerPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minImportedHostPointerAlignment: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExternalMemoryHostPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>()))
                .minImportedHostPointerAlignment as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT),
            "::",
            stringify!(minImportedHostPointerAlignment)
        )
    );
}
impl Default for VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetMemoryHostPointerPropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        pHostPointer: *const ::std::os::raw::c_void,
        pMemoryHostPointerProperties: *mut VkMemoryHostPointerPropertiesEXT,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetMemoryHostPointerPropertiesEXT(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        pHostPointer: *const ::std::os::raw::c_void,
        pMemoryHostPointerProperties: *mut VkMemoryHostPointerPropertiesEXT,
    ) -> VkResult;
}
pub type PFN_vkCmdWriteBufferMarkerAMD = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        marker: u32,
    ),
>;
extern "system" {
    pub fn vkCmdWriteBufferMarkerAMD(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        marker: u32,
    );
}
pub const VkPipelineCompilerControlFlagBitsAMD_VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD : VkPipelineCompilerControlFlagBitsAMD = 2147483647 ;
pub type VkPipelineCompilerControlFlagBitsAMD = ::std::os::raw::c_uint;
pub type VkPipelineCompilerControlFlagsAMD = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCompilerControlCreateInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub compilerControlFlags: VkPipelineCompilerControlFlagsAMD,
}
#[test]
fn bindgen_test_layout_VkPipelineCompilerControlCreateInfoAMD() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCompilerControlCreateInfoAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineCompilerControlCreateInfoAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCompilerControlCreateInfoAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineCompilerControlCreateInfoAMD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCompilerControlCreateInfoAMD>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCompilerControlCreateInfoAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCompilerControlCreateInfoAMD>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCompilerControlCreateInfoAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCompilerControlCreateInfoAMD>())).compilerControlFlags
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCompilerControlCreateInfoAMD),
            "::",
            stringify!(compilerControlFlags)
        )
    );
}
impl Default for VkPipelineCompilerControlCreateInfoAMD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkTimeDomainEXT_VK_TIME_DOMAIN_DEVICE_EXT: VkTimeDomainEXT = 0;
pub const VkTimeDomainEXT_VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT: VkTimeDomainEXT = 1;
pub const VkTimeDomainEXT_VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT: VkTimeDomainEXT = 2;
pub const VkTimeDomainEXT_VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT: VkTimeDomainEXT = 3;
pub const VkTimeDomainEXT_VK_TIME_DOMAIN_MAX_ENUM_EXT: VkTimeDomainEXT = 2147483647;
pub type VkTimeDomainEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCalibratedTimestampInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub timeDomain: VkTimeDomainEXT,
}
#[test]
fn bindgen_test_layout_VkCalibratedTimestampInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkCalibratedTimestampInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkCalibratedTimestampInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCalibratedTimestampInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCalibratedTimestampInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCalibratedTimestampInfoEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCalibratedTimestampInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCalibratedTimestampInfoEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCalibratedTimestampInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCalibratedTimestampInfoEXT>())).timeDomain as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCalibratedTimestampInfoEXT),
            "::",
            stringify!(timeDomain)
        )
    );
}
impl Default for VkCalibratedTimestampInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pTimeDomainCount: *mut u32,
        pTimeDomains: *mut VkTimeDomainEXT,
    ) -> VkResult,
>;
pub type PFN_vkGetCalibratedTimestampsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        timestampCount: u32,
        pTimestampInfos: *const VkCalibratedTimestampInfoEXT,
        pTimestamps: *mut u64,
        pMaxDeviation: *mut u64,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(
        physicalDevice: VkPhysicalDevice,
        pTimeDomainCount: *mut u32,
        pTimeDomains: *mut VkTimeDomainEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetCalibratedTimestampsEXT(
        device: VkDevice,
        timestampCount: u32,
        pTimestampInfos: *const VkCalibratedTimestampInfoEXT,
        pTimestamps: *mut u64,
        pMaxDeviation: *mut u64,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderCorePropertiesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderEngineCount: u32,
    pub shaderArraysPerEngineCount: u32,
    pub computeUnitsPerShaderArray: u32,
    pub simdPerComputeUnit: u32,
    pub wavefrontsPerSimd: u32,
    pub wavefrontSize: u32,
    pub sgprsPerSimd: u32,
    pub minSgprAllocation: u32,
    pub maxSgprAllocation: u32,
    pub sgprAllocationGranularity: u32,
    pub vgprsPerSimd: u32,
    pub minVgprAllocation: u32,
    pub maxVgprAllocation: u32,
    pub vgprAllocationGranularity: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderCorePropertiesAMD() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderCorePropertiesAMD>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderCorePropertiesAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>())).shaderEngineCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(shaderEngineCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>()))
                .shaderArraysPerEngineCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(shaderArraysPerEngineCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>()))
                .computeUnitsPerShaderArray as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(computeUnitsPerShaderArray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>())).simdPerComputeUnit
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(simdPerComputeUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>())).wavefrontsPerSimd
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(wavefrontsPerSimd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>())).wavefrontSize
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(wavefrontSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>())).sgprsPerSimd
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(sgprsPerSimd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>())).minSgprAllocation
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(minSgprAllocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>())).maxSgprAllocation
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(maxSgprAllocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>()))
                .sgprAllocationGranularity as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(sgprAllocationGranularity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>())).vgprsPerSimd
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(vgprsPerSimd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>())).minVgprAllocation
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(minVgprAllocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>())).maxVgprAllocation
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(maxVgprAllocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCorePropertiesAMD>()))
                .vgprAllocationGranularity as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(vgprAllocationGranularity)
        )
    );
}
impl Default for VkPhysicalDeviceShaderCorePropertiesAMD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkMemoryOverallocationBehaviorAMD_VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD:
    VkMemoryOverallocationBehaviorAMD = 0;
pub const VkMemoryOverallocationBehaviorAMD_VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD:
    VkMemoryOverallocationBehaviorAMD = 1;
pub const VkMemoryOverallocationBehaviorAMD_VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD:
    VkMemoryOverallocationBehaviorAMD = 2;
pub const VkMemoryOverallocationBehaviorAMD_VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD:
    VkMemoryOverallocationBehaviorAMD = 2147483647;
pub type VkMemoryOverallocationBehaviorAMD = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceMemoryOverallocationCreateInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub overallocationBehavior: VkMemoryOverallocationBehaviorAMD,
}
#[test]
fn bindgen_test_layout_VkDeviceMemoryOverallocationCreateInfoAMD() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceMemoryOverallocationCreateInfoAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDeviceMemoryOverallocationCreateInfoAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceMemoryOverallocationCreateInfoAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceMemoryOverallocationCreateInfoAMD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceMemoryOverallocationCreateInfoAMD>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOverallocationCreateInfoAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceMemoryOverallocationCreateInfoAMD>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOverallocationCreateInfoAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceMemoryOverallocationCreateInfoAMD>()))
                .overallocationBehavior as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOverallocationCreateInfoAMD),
            "::",
            stringify!(overallocationBehavior)
        )
    );
}
impl Default for VkDeviceMemoryOverallocationCreateInfoAMD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxVertexAttribDivisor: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>()))
                .maxVertexAttribDivisor as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT),
            "::",
            stringify!(maxVertexAttribDivisor)
        )
    );
}
impl Default for VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkVertexInputBindingDivisorDescriptionEXT {
    pub binding: u32,
    pub divisor: u32,
}
#[test]
fn bindgen_test_layout_VkVertexInputBindingDivisorDescriptionEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkVertexInputBindingDivisorDescriptionEXT>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(VkVertexInputBindingDivisorDescriptionEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkVertexInputBindingDivisorDescriptionEXT>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkVertexInputBindingDivisorDescriptionEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkVertexInputBindingDivisorDescriptionEXT>())).binding
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDivisorDescriptionEXT),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkVertexInputBindingDivisorDescriptionEXT>())).divisor
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDivisorDescriptionEXT),
            "::",
            stringify!(divisor)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineVertexInputDivisorStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub vertexBindingDivisorCount: u32,
    pub pVertexBindingDivisors: *const VkVertexInputBindingDivisorDescriptionEXT,
}
#[test]
fn bindgen_test_layout_VkPipelineVertexInputDivisorStateCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineVertexInputDivisorStateCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineVertexInputDivisorStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineVertexInputDivisorStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineVertexInputDivisorStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineVertexInputDivisorStateCreateInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputDivisorStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineVertexInputDivisorStateCreateInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputDivisorStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineVertexInputDivisorStateCreateInfoEXT>()))
                .vertexBindingDivisorCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputDivisorStateCreateInfoEXT),
            "::",
            stringify!(vertexBindingDivisorCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineVertexInputDivisorStateCreateInfoEXT>()))
                .pVertexBindingDivisors as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputDivisorStateCreateInfoEXT),
            "::",
            stringify!(pVertexBindingDivisors)
        )
    );
}
impl Default for VkPipelineVertexInputDivisorStateCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub vertexAttributeInstanceRateDivisor: VkBool32,
    pub vertexAttributeInstanceRateZeroDivisor: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT>()))
                .vertexAttributeInstanceRateDivisor as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT),
            "::",
            stringify!(vertexAttributeInstanceRateDivisor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT>()))
                .vertexAttributeInstanceRateZeroDivisor as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT),
            "::",
            stringify!(vertexAttributeInstanceRateZeroDivisor)
        )
    );
}
impl Default for VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkPipelineCreationFeedbackFlagBitsEXT_VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT:
    VkPipelineCreationFeedbackFlagBitsEXT = 1;
pub const VkPipelineCreationFeedbackFlagBitsEXT_VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT : VkPipelineCreationFeedbackFlagBitsEXT = 2 ;
pub const VkPipelineCreationFeedbackFlagBitsEXT_VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT : VkPipelineCreationFeedbackFlagBitsEXT = 4 ;
pub const VkPipelineCreationFeedbackFlagBitsEXT_VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT : VkPipelineCreationFeedbackFlagBitsEXT = 2147483647 ;
pub type VkPipelineCreationFeedbackFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkPipelineCreationFeedbackFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPipelineCreationFeedbackEXT {
    pub flags: VkPipelineCreationFeedbackFlagsEXT,
    pub duration: u64,
}
#[test]
fn bindgen_test_layout_VkPipelineCreationFeedbackEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCreationFeedbackEXT>(),
        16usize,
        concat!("Size of: ", stringify!(VkPipelineCreationFeedbackEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCreationFeedbackEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineCreationFeedbackEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCreationFeedbackEXT>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedbackEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCreationFeedbackEXT>())).duration as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedbackEXT),
            "::",
            stringify!(duration)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCreationFeedbackCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pPipelineCreationFeedback: *mut VkPipelineCreationFeedbackEXT,
    pub pipelineStageCreationFeedbackCount: u32,
    pub pPipelineStageCreationFeedbacks: *mut VkPipelineCreationFeedbackEXT,
}
#[test]
fn bindgen_test_layout_VkPipelineCreationFeedbackCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCreationFeedbackCreateInfoEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineCreationFeedbackCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCreationFeedbackCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineCreationFeedbackCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCreationFeedbackCreateInfoEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedbackCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCreationFeedbackCreateInfoEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedbackCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCreationFeedbackCreateInfoEXT>()))
                .pPipelineCreationFeedback as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedbackCreateInfoEXT),
            "::",
            stringify!(pPipelineCreationFeedback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCreationFeedbackCreateInfoEXT>()))
                .pipelineStageCreationFeedbackCount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedbackCreateInfoEXT),
            "::",
            stringify!(pipelineStageCreationFeedbackCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCreationFeedbackCreateInfoEXT>()))
                .pPipelineStageCreationFeedbacks as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedbackCreateInfoEXT),
            "::",
            stringify!(pPipelineStageCreationFeedbacks)
        )
    );
}
impl Default for VkPipelineCreationFeedbackCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub computeDerivativeGroupQuads: VkBool32,
    pub computeDerivativeGroupLinear: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceComputeShaderDerivativesFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceComputeShaderDerivativesFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceComputeShaderDerivativesFeaturesNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceComputeShaderDerivativesFeaturesNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceComputeShaderDerivativesFeaturesNV>()))
                .computeDerivativeGroupQuads as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV),
            "::",
            stringify!(computeDerivativeGroupQuads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceComputeShaderDerivativesFeaturesNV>()))
                .computeDerivativeGroupLinear as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV),
            "::",
            stringify!(computeDerivativeGroupLinear)
        )
    );
}
impl Default for VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub taskShader: VkBool32,
    pub meshShader: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMeshShaderFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMeshShaderFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMeshShaderFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderFeaturesNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderFeaturesNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderFeaturesNV>())).taskShader as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesNV),
            "::",
            stringify!(taskShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderFeaturesNV>())).meshShader as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesNV),
            "::",
            stringify!(meshShader)
        )
    );
}
impl Default for VkPhysicalDeviceMeshShaderFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxDrawMeshTasksCount: u32,
    pub maxTaskWorkGroupInvocations: u32,
    pub maxTaskWorkGroupSize: [u32; 3usize],
    pub maxTaskTotalMemorySize: u32,
    pub maxTaskOutputCount: u32,
    pub maxMeshWorkGroupInvocations: u32,
    pub maxMeshWorkGroupSize: [u32; 3usize],
    pub maxMeshTotalMemorySize: u32,
    pub maxMeshOutputVertices: u32,
    pub maxMeshOutputPrimitives: u32,
    pub maxMeshMultiviewViewCount: u32,
    pub meshOutputPerVertexGranularity: u32,
    pub meshOutputPerPrimitiveGranularity: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMeshShaderPropertiesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMeshShaderPropertiesNV>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMeshShaderPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>())).maxDrawMeshTasksCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxDrawMeshTasksCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>()))
                .maxTaskWorkGroupInvocations as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxTaskWorkGroupInvocations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>())).maxTaskWorkGroupSize
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxTaskWorkGroupSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>()))
                .maxTaskTotalMemorySize as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxTaskTotalMemorySize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>())).maxTaskOutputCount
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxTaskOutputCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>()))
                .maxMeshWorkGroupInvocations as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxMeshWorkGroupInvocations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>())).maxMeshWorkGroupSize
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxMeshWorkGroupSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>()))
                .maxMeshTotalMemorySize as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxMeshTotalMemorySize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>())).maxMeshOutputVertices
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxMeshOutputVertices)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>()))
                .maxMeshOutputPrimitives as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxMeshOutputPrimitives)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>()))
                .maxMeshMultiviewViewCount as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxMeshMultiviewViewCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>()))
                .meshOutputPerVertexGranularity as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(meshOutputPerVertexGranularity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMeshShaderPropertiesNV>()))
                .meshOutputPerPrimitiveGranularity as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(meshOutputPerPrimitiveGranularity)
        )
    );
}
impl Default for VkPhysicalDeviceMeshShaderPropertiesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDrawMeshTasksIndirectCommandNV {
    pub taskCount: u32,
    pub firstTask: u32,
}
#[test]
fn bindgen_test_layout_VkDrawMeshTasksIndirectCommandNV() {
    assert_eq!(
        ::std::mem::size_of::<VkDrawMeshTasksIndirectCommandNV>(),
        8usize,
        concat!("Size of: ", stringify!(VkDrawMeshTasksIndirectCommandNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDrawMeshTasksIndirectCommandNV>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkDrawMeshTasksIndirectCommandNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrawMeshTasksIndirectCommandNV>())).taskCount as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawMeshTasksIndirectCommandNV),
            "::",
            stringify!(taskCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDrawMeshTasksIndirectCommandNV>())).firstTask as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawMeshTasksIndirectCommandNV),
            "::",
            stringify!(firstTask)
        )
    );
}
pub type PFN_vkCmdDrawMeshTasksNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectCountNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
extern "system" {
    pub fn vkCmdDrawMeshTasksNV(commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32);
}
extern "system" {
    pub fn vkCmdDrawMeshTasksIndirectNV(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawMeshTasksIndirectCountNV(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentShaderBarycentric: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV>()))
                .fragmentShaderBarycentric as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV),
            "::",
            stringify!(fragmentShaderBarycentric)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageFootprint: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderImageFootprintFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderImageFootprintFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderImageFootprintFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderImageFootprintFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderImageFootprintFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderImageFootprintFeaturesNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderImageFootprintFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderImageFootprintFeaturesNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderImageFootprintFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderImageFootprintFeaturesNV>()))
                .imageFootprint as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderImageFootprintFeaturesNV),
            "::",
            stringify!(imageFootprint)
        )
    );
}
impl Default for VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub exclusiveScissorCount: u32,
    pub pExclusiveScissors: *const VkRect2D,
}
#[test]
fn bindgen_test_layout_VkPipelineViewportExclusiveScissorStateCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineViewportExclusiveScissorStateCreateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineViewportExclusiveScissorStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineViewportExclusiveScissorStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineViewportExclusiveScissorStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportExclusiveScissorStateCreateInfoNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportExclusiveScissorStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportExclusiveScissorStateCreateInfoNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportExclusiveScissorStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportExclusiveScissorStateCreateInfoNV>()))
                .exclusiveScissorCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportExclusiveScissorStateCreateInfoNV),
            "::",
            stringify!(exclusiveScissorCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineViewportExclusiveScissorStateCreateInfoNV>()))
                .pExclusiveScissors as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportExclusiveScissorStateCreateInfoNV),
            "::",
            stringify!(pExclusiveScissors)
        )
    );
}
impl Default for VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub exclusiveScissor: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExclusiveScissorFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExclusiveScissorFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExclusiveScissorFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExclusiveScissorFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExclusiveScissorFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExclusiveScissorFeaturesNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExclusiveScissorFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExclusiveScissorFeaturesNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExclusiveScissorFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExclusiveScissorFeaturesNV>())).exclusiveScissor
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExclusiveScissorFeaturesNV),
            "::",
            stringify!(exclusiveScissor)
        )
    );
}
impl Default for VkPhysicalDeviceExclusiveScissorFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCmdSetExclusiveScissorNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstExclusiveScissor: u32,
        exclusiveScissorCount: u32,
        pExclusiveScissors: *const VkRect2D,
    ),
>;
extern "system" {
    pub fn vkCmdSetExclusiveScissorNV(
        commandBuffer: VkCommandBuffer,
        firstExclusiveScissor: u32,
        exclusiveScissorCount: u32,
        pExclusiveScissors: *const VkRect2D,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyCheckpointPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub checkpointExecutionStageMask: VkPipelineStageFlags,
}
#[test]
fn bindgen_test_layout_VkQueueFamilyCheckpointPropertiesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkQueueFamilyCheckpointPropertiesNV>(),
        24usize,
        concat!("Size of: ", stringify!(VkQueueFamilyCheckpointPropertiesNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueueFamilyCheckpointPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkQueueFamilyCheckpointPropertiesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueueFamilyCheckpointPropertiesNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyCheckpointPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueueFamilyCheckpointPropertiesNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyCheckpointPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueueFamilyCheckpointPropertiesNV>()))
                .checkpointExecutionStageMask as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyCheckpointPropertiesNV),
            "::",
            stringify!(checkpointExecutionStageMask)
        )
    );
}
impl Default for VkQueueFamilyCheckpointPropertiesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCheckpointDataNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stage: VkPipelineStageFlagBits,
    pub pCheckpointMarker: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkCheckpointDataNV() {
    assert_eq!(
        ::std::mem::size_of::<VkCheckpointDataNV>(),
        32usize,
        concat!("Size of: ", stringify!(VkCheckpointDataNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCheckpointDataNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCheckpointDataNV))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCheckpointDataNV>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCheckpointDataNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCheckpointDataNV>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCheckpointDataNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkCheckpointDataNV>())).stage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCheckpointDataNV),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCheckpointDataNV>())).pCheckpointMarker as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCheckpointDataNV),
            "::",
            stringify!(pCheckpointMarker)
        )
    );
}
impl Default for VkCheckpointDataNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCmdSetCheckpointNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCheckpointMarker: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkGetQueueCheckpointDataNV = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        pCheckpointDataCount: *mut u32,
        pCheckpointData: *mut VkCheckpointDataNV,
    ),
>;
extern "system" {
    pub fn vkCmdSetCheckpointNV(
        commandBuffer: VkCommandBuffer,
        pCheckpointMarker: *const ::std::os::raw::c_void,
    );
}
extern "system" {
    pub fn vkGetQueueCheckpointDataNV(
        queue: VkQueue,
        pCheckpointDataCount: *mut u32,
        pCheckpointData: *mut VkCheckpointDataNV,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderIntegerFunctions2: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>()))
                .shaderIntegerFunctions2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL),
            "::",
            stringify!(shaderIntegerFunctions2)
        )
    );
}
impl Default for VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceConfigurationINTEL_T {
    _unused: [u8; 0],
}
pub type VkPerformanceConfigurationINTEL = *mut VkPerformanceConfigurationINTEL_T;
pub const VkPerformanceConfigurationTypeINTEL_VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL : VkPerformanceConfigurationTypeINTEL = 0 ;
pub const VkPerformanceConfigurationTypeINTEL_VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL:
    VkPerformanceConfigurationTypeINTEL = 2147483647;
pub type VkPerformanceConfigurationTypeINTEL = ::std::os::raw::c_uint;
pub const VkQueryPoolSamplingModeINTEL_VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL:
    VkQueryPoolSamplingModeINTEL = 0;
pub const VkQueryPoolSamplingModeINTEL_VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL:
    VkQueryPoolSamplingModeINTEL = 2147483647;
pub type VkQueryPoolSamplingModeINTEL = ::std::os::raw::c_uint;
pub const VkPerformanceOverrideTypeINTEL_VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL:
    VkPerformanceOverrideTypeINTEL = 0;
pub const VkPerformanceOverrideTypeINTEL_VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL:
    VkPerformanceOverrideTypeINTEL = 1;
pub const VkPerformanceOverrideTypeINTEL_VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL:
    VkPerformanceOverrideTypeINTEL = 2147483647;
pub type VkPerformanceOverrideTypeINTEL = ::std::os::raw::c_uint;
pub const VkPerformanceParameterTypeINTEL_VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL : VkPerformanceParameterTypeINTEL = 0 ;
pub const VkPerformanceParameterTypeINTEL_VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL : VkPerformanceParameterTypeINTEL = 1 ;
pub const VkPerformanceParameterTypeINTEL_VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL:
    VkPerformanceParameterTypeINTEL = 2147483647;
pub type VkPerformanceParameterTypeINTEL = ::std::os::raw::c_uint;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL:
    VkPerformanceValueTypeINTEL = 0;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL:
    VkPerformanceValueTypeINTEL = 1;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL:
    VkPerformanceValueTypeINTEL = 2;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL:
    VkPerformanceValueTypeINTEL = 3;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL:
    VkPerformanceValueTypeINTEL = 4;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL:
    VkPerformanceValueTypeINTEL = 2147483647;
pub type VkPerformanceValueTypeINTEL = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPerformanceValueDataINTEL {
    pub value32: u32,
    pub value64: u64,
    pub valueFloat: f32,
    pub valueBool: VkBool32,
    pub valueString: *const ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_VkPerformanceValueDataINTEL() {
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceValueDataINTEL>(),
        8usize,
        concat!("Size of: ", stringify!(VkPerformanceValueDataINTEL))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceValueDataINTEL>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceValueDataINTEL))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceValueDataINTEL>())).value32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueDataINTEL),
            "::",
            stringify!(value32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceValueDataINTEL>())).value64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueDataINTEL),
            "::",
            stringify!(value64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceValueDataINTEL>())).valueFloat as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueDataINTEL),
            "::",
            stringify!(valueFloat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceValueDataINTEL>())).valueBool as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueDataINTEL),
            "::",
            stringify!(valueBool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceValueDataINTEL>())).valueString as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueDataINTEL),
            "::",
            stringify!(valueString)
        )
    );
}
impl Default for VkPerformanceValueDataINTEL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceValueINTEL {
    pub type_: VkPerformanceValueTypeINTEL,
    pub data: VkPerformanceValueDataINTEL,
}
#[test]
fn bindgen_test_layout_VkPerformanceValueINTEL() {
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceValueINTEL>(),
        16usize,
        concat!("Size of: ", stringify!(VkPerformanceValueINTEL))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceValueINTEL>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceValueINTEL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPerformanceValueINTEL>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueINTEL),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkPerformanceValueINTEL>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueINTEL),
            "::",
            stringify!(data)
        )
    );
}
impl Default for VkPerformanceValueINTEL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInitializePerformanceApiInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pUserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkInitializePerformanceApiInfoINTEL() {
    assert_eq!(
        ::std::mem::size_of::<VkInitializePerformanceApiInfoINTEL>(),
        24usize,
        concat!("Size of: ", stringify!(VkInitializePerformanceApiInfoINTEL))
    );
    assert_eq!(
        ::std::mem::align_of::<VkInitializePerformanceApiInfoINTEL>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkInitializePerformanceApiInfoINTEL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkInitializePerformanceApiInfoINTEL>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInitializePerformanceApiInfoINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkInitializePerformanceApiInfoINTEL>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInitializePerformanceApiInfoINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkInitializePerformanceApiInfoINTEL>())).pUserData as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInitializePerformanceApiInfoINTEL),
            "::",
            stringify!(pUserData)
        )
    );
}
impl Default for VkInitializePerformanceApiInfoINTEL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub performanceCountersSampling: VkQueryPoolSamplingModeINTEL,
}
#[test]
fn bindgen_test_layout_VkQueryPoolPerformanceQueryCreateInfoINTEL() {
    assert_eq!(
        ::std::mem::size_of::<VkQueryPoolPerformanceQueryCreateInfoINTEL>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkQueryPoolPerformanceQueryCreateInfoINTEL)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueryPoolPerformanceQueryCreateInfoINTEL>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkQueryPoolPerformanceQueryCreateInfoINTEL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueryPoolPerformanceQueryCreateInfoINTEL>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceQueryCreateInfoINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueryPoolPerformanceQueryCreateInfoINTEL>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceQueryCreateInfoINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkQueryPoolPerformanceQueryCreateInfoINTEL>()))
                .performanceCountersSampling as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceQueryCreateInfoINTEL),
            "::",
            stringify!(performanceCountersSampling)
        )
    );
}
impl Default for VkQueryPoolPerformanceQueryCreateInfoINTEL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceMarkerInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub marker: u64,
}
#[test]
fn bindgen_test_layout_VkPerformanceMarkerInfoINTEL() {
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceMarkerInfoINTEL>(),
        24usize,
        concat!("Size of: ", stringify!(VkPerformanceMarkerInfoINTEL))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceMarkerInfoINTEL>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceMarkerInfoINTEL))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceMarkerInfoINTEL>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceMarkerInfoINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceMarkerInfoINTEL>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceMarkerInfoINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceMarkerInfoINTEL>())).marker as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceMarkerInfoINTEL),
            "::",
            stringify!(marker)
        )
    );
}
impl Default for VkPerformanceMarkerInfoINTEL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceStreamMarkerInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub marker: u32,
}
#[test]
fn bindgen_test_layout_VkPerformanceStreamMarkerInfoINTEL() {
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceStreamMarkerInfoINTEL>(),
        24usize,
        concat!("Size of: ", stringify!(VkPerformanceStreamMarkerInfoINTEL))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceStreamMarkerInfoINTEL>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPerformanceStreamMarkerInfoINTEL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceStreamMarkerInfoINTEL>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceStreamMarkerInfoINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceStreamMarkerInfoINTEL>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceStreamMarkerInfoINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceStreamMarkerInfoINTEL>())).marker as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceStreamMarkerInfoINTEL),
            "::",
            stringify!(marker)
        )
    );
}
impl Default for VkPerformanceStreamMarkerInfoINTEL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceOverrideInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkPerformanceOverrideTypeINTEL,
    pub enable: VkBool32,
    pub parameter: u64,
}
#[test]
fn bindgen_test_layout_VkPerformanceOverrideInfoINTEL() {
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceOverrideInfoINTEL>(),
        32usize,
        concat!("Size of: ", stringify!(VkPerformanceOverrideInfoINTEL))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceOverrideInfoINTEL>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceOverrideInfoINTEL))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceOverrideInfoINTEL>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceOverrideInfoINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceOverrideInfoINTEL>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceOverrideInfoINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceOverrideInfoINTEL>())).type_ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceOverrideInfoINTEL),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceOverrideInfoINTEL>())).enable as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceOverrideInfoINTEL),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceOverrideInfoINTEL>())).parameter as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceOverrideInfoINTEL),
            "::",
            stringify!(parameter)
        )
    );
}
impl Default for VkPerformanceOverrideInfoINTEL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceConfigurationAcquireInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkPerformanceConfigurationTypeINTEL,
}
#[test]
fn bindgen_test_layout_VkPerformanceConfigurationAcquireInfoINTEL() {
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceConfigurationAcquireInfoINTEL>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPerformanceConfigurationAcquireInfoINTEL)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceConfigurationAcquireInfoINTEL>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPerformanceConfigurationAcquireInfoINTEL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceConfigurationAcquireInfoINTEL>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceConfigurationAcquireInfoINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceConfigurationAcquireInfoINTEL>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceConfigurationAcquireInfoINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPerformanceConfigurationAcquireInfoINTEL>())).type_ as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceConfigurationAcquireInfoINTEL),
            "::",
            stringify!(type_)
        )
    );
}
impl Default for VkPerformanceConfigurationAcquireInfoINTEL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkInitializePerformanceApiINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInitializeInfo: *const VkInitializePerformanceApiInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkUninitializePerformanceApiINTEL =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice)>;
pub type PFN_vkCmdSetPerformanceMarkerINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceMarkerInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkCmdSetPerformanceStreamMarkerINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceStreamMarkerInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkCmdSetPerformanceOverrideINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pOverrideInfo: *const VkPerformanceOverrideInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkAcquirePerformanceConfigurationINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAcquireInfo: *const VkPerformanceConfigurationAcquireInfoINTEL,
        pConfiguration: *mut VkPerformanceConfigurationINTEL,
    ) -> VkResult,
>;
pub type PFN_vkReleasePerformanceConfigurationINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult,
>;
pub type PFN_vkQueueSetPerformanceConfigurationINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult,
>;
pub type PFN_vkGetPerformanceParameterINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        parameter: VkPerformanceParameterTypeINTEL,
        pValue: *mut VkPerformanceValueINTEL,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkInitializePerformanceApiINTEL(
        device: VkDevice,
        pInitializeInfo: *const VkInitializePerformanceApiInfoINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkUninitializePerformanceApiINTEL(device: VkDevice);
}
extern "system" {
    pub fn vkCmdSetPerformanceMarkerINTEL(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceMarkerInfoINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdSetPerformanceStreamMarkerINTEL(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceStreamMarkerInfoINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdSetPerformanceOverrideINTEL(
        commandBuffer: VkCommandBuffer,
        pOverrideInfo: *const VkPerformanceOverrideInfoINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkAcquirePerformanceConfigurationINTEL(
        device: VkDevice,
        pAcquireInfo: *const VkPerformanceConfigurationAcquireInfoINTEL,
        pConfiguration: *mut VkPerformanceConfigurationINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkReleasePerformanceConfigurationINTEL(
        device: VkDevice,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkQueueSetPerformanceConfigurationINTEL(
        queue: VkQueue,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPerformanceParameterINTEL(
        device: VkDevice,
        parameter: VkPerformanceParameterTypeINTEL,
        pValue: *mut VkPerformanceValueINTEL,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pciDomain: u32,
    pub pciBus: u32,
    pub pciDevice: u32,
    pub pciFunction: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePCIBusInfoPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePCIBusInfoPropertiesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePCIBusInfoPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePCIBusInfoPropertiesEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePCIBusInfoPropertiesEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePCIBusInfoPropertiesEXT>())).pciDomain
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT),
            "::",
            stringify!(pciDomain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePCIBusInfoPropertiesEXT>())).pciBus as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT),
            "::",
            stringify!(pciBus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePCIBusInfoPropertiesEXT>())).pciDevice
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT),
            "::",
            stringify!(pciDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePCIBusInfoPropertiesEXT>())).pciFunction
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT),
            "::",
            stringify!(pciFunction)
        )
    );
}
impl Default for VkPhysicalDevicePCIBusInfoPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub localDimmingSupport: VkBool32,
}
#[test]
fn bindgen_test_layout_VkDisplayNativeHdrSurfaceCapabilitiesAMD() {
    assert_eq!(
        ::std::mem::size_of::<VkDisplayNativeHdrSurfaceCapabilitiesAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDisplayNativeHdrSurfaceCapabilitiesAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayNativeHdrSurfaceCapabilitiesAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDisplayNativeHdrSurfaceCapabilitiesAMD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayNativeHdrSurfaceCapabilitiesAMD>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayNativeHdrSurfaceCapabilitiesAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayNativeHdrSurfaceCapabilitiesAMD>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayNativeHdrSurfaceCapabilitiesAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDisplayNativeHdrSurfaceCapabilitiesAMD>())).localDimmingSupport
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayNativeHdrSurfaceCapabilitiesAMD),
            "::",
            stringify!(localDimmingSupport)
        )
    );
}
impl Default for VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub localDimmingEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkSwapchainDisplayNativeHdrCreateInfoAMD() {
    assert_eq!(
        ::std::mem::size_of::<VkSwapchainDisplayNativeHdrCreateInfoAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkSwapchainDisplayNativeHdrCreateInfoAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSwapchainDisplayNativeHdrCreateInfoAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSwapchainDisplayNativeHdrCreateInfoAMD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainDisplayNativeHdrCreateInfoAMD>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainDisplayNativeHdrCreateInfoAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainDisplayNativeHdrCreateInfoAMD>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainDisplayNativeHdrCreateInfoAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSwapchainDisplayNativeHdrCreateInfoAMD>())).localDimmingEnable
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainDisplayNativeHdrCreateInfoAMD),
            "::",
            stringify!(localDimmingEnable)
        )
    );
}
impl Default for VkSwapchainDisplayNativeHdrCreateInfoAMD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkSetLocalDimmingAMD = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32),
>;
extern "system" {
    pub fn vkSetLocalDimmingAMD(
        device: VkDevice,
        swapChain: VkSwapchainKHR,
        localDimmingEnable: VkBool32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentDensityMap: VkBool32,
    pub fragmentDensityMapDynamic: VkBool32,
    pub fragmentDensityMapNonSubsampledImages: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentDensityMapFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>()))
                .fragmentDensityMap as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT),
            "::",
            stringify!(fragmentDensityMap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>()))
                .fragmentDensityMapDynamic as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT),
            "::",
            stringify!(fragmentDensityMapDynamic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>()))
                .fragmentDensityMapNonSubsampledImages as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT),
            "::",
            stringify!(fragmentDensityMapNonSubsampledImages)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minFragmentDensityTexelSize: VkExtent2D,
    pub maxFragmentDensityTexelSize: VkExtent2D,
    pub fragmentDensityInvocations: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentDensityMapPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>()))
                .minFragmentDensityTexelSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT),
            "::",
            stringify!(minFragmentDensityTexelSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>()))
                .maxFragmentDensityTexelSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT),
            "::",
            stringify!(maxFragmentDensityTexelSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>()))
                .fragmentDensityInvocations as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT),
            "::",
            stringify!(fragmentDensityInvocations)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub fragmentDensityMapAttachment: VkAttachmentReference,
}
#[test]
fn bindgen_test_layout_VkRenderPassFragmentDensityMapCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassFragmentDensityMapCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkRenderPassFragmentDensityMapCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassFragmentDensityMapCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderPassFragmentDensityMapCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassFragmentDensityMapCreateInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassFragmentDensityMapCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassFragmentDensityMapCreateInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassFragmentDensityMapCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassFragmentDensityMapCreateInfoEXT>()))
                .fragmentDensityMapAttachment as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassFragmentDensityMapCreateInfoEXT),
            "::",
            stringify!(fragmentDensityMapAttachment)
        )
    );
}
impl Default for VkRenderPassFragmentDensityMapCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupSizeControlFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subgroupSizeControl: VkBool32,
    pub computeFullSubgroups: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSubgroupSizeControlFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSubgroupSizeControlFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupSizeControlFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupSizeControlFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupSizeControlFeaturesEXT>()))
                .subgroupSizeControl as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT),
            "::",
            stringify!(subgroupSizeControl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupSizeControlFeaturesEXT>()))
                .computeFullSubgroups as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT),
            "::",
            stringify!(computeFullSubgroups)
        )
    );
}
impl Default for VkPhysicalDeviceSubgroupSizeControlFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupSizeControlPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minSubgroupSize: u32,
    pub maxSubgroupSize: u32,
    pub maxComputeWorkgroupSubgroups: u32,
    pub requiredSubgroupSizeStages: VkShaderStageFlags,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSubgroupSizeControlPropertiesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSubgroupSizeControlPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupSizeControlPropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupSizeControlPropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupSizeControlPropertiesEXT>()))
                .minSubgroupSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT),
            "::",
            stringify!(minSubgroupSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupSizeControlPropertiesEXT>()))
                .maxSubgroupSize as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT),
            "::",
            stringify!(maxSubgroupSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupSizeControlPropertiesEXT>()))
                .maxComputeWorkgroupSubgroups as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT),
            "::",
            stringify!(maxComputeWorkgroupSubgroups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceSubgroupSizeControlPropertiesEXT>()))
                .requiredSubgroupSizeStages as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT),
            "::",
            stringify!(requiredSubgroupSizeStages)
        )
    );
}
impl Default for VkPhysicalDeviceSubgroupSizeControlPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub requiredSubgroupSize: u32,
}
#[test]
fn bindgen_test_layout_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT>()))
                .requiredSubgroupSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT),
            "::",
            stringify!(requiredSubgroupSize)
        )
    );
}
impl Default for VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkShaderCorePropertiesFlagBitsAMD_VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD:
    VkShaderCorePropertiesFlagBitsAMD = 2147483647;
pub type VkShaderCorePropertiesFlagBitsAMD = ::std::os::raw::c_uint;
pub type VkShaderCorePropertiesFlagsAMD = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderCoreProperties2AMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD,
    pub activeComputeUnitCount: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderCoreProperties2AMD() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderCoreProperties2AMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderCoreProperties2AMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderCoreProperties2AMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderCoreProperties2AMD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCoreProperties2AMD>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreProperties2AMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCoreProperties2AMD>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreProperties2AMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCoreProperties2AMD>())).shaderCoreFeatures
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreProperties2AMD),
            "::",
            stringify!(shaderCoreFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderCoreProperties2AMD>()))
                .activeComputeUnitCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreProperties2AMD),
            "::",
            stringify!(activeComputeUnitCount)
        )
    );
}
impl Default for VkPhysicalDeviceShaderCoreProperties2AMD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceCoherentMemory: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCoherentMemoryFeaturesAMD() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCoherentMemoryFeaturesAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCoherentMemoryFeaturesAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCoherentMemoryFeaturesAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCoherentMemoryFeaturesAMD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCoherentMemoryFeaturesAMD>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCoherentMemoryFeaturesAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCoherentMemoryFeaturesAMD>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCoherentMemoryFeaturesAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCoherentMemoryFeaturesAMD>()))
                .deviceCoherentMemory as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCoherentMemoryFeaturesAMD),
            "::",
            stringify!(deviceCoherentMemory)
        )
    );
}
impl Default for VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub heapBudget: [VkDeviceSize; 16usize],
    pub heapUsage: [VkDeviceSize; 16usize],
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMemoryBudgetPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMemoryBudgetPropertiesEXT>(),
        272usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMemoryBudgetPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMemoryBudgetPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMemoryBudgetPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryBudgetPropertiesEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryBudgetPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryBudgetPropertiesEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryBudgetPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryBudgetPropertiesEXT>())).heapBudget
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryBudgetPropertiesEXT),
            "::",
            stringify!(heapBudget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryBudgetPropertiesEXT>())).heapUsage
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryBudgetPropertiesEXT),
            "::",
            stringify!(heapUsage)
        )
    );
}
impl Default for VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryPriority: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMemoryPriorityFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMemoryPriorityFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMemoryPriorityFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMemoryPriorityFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMemoryPriorityFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryPriorityFeaturesEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryPriorityFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryPriorityFeaturesEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryPriorityFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceMemoryPriorityFeaturesEXT>())).memoryPriority
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryPriorityFeaturesEXT),
            "::",
            stringify!(memoryPriority)
        )
    );
}
impl Default for VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryPriorityAllocateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub priority: f32,
}
#[test]
fn bindgen_test_layout_VkMemoryPriorityAllocateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryPriorityAllocateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryPriorityAllocateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryPriorityAllocateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryPriorityAllocateInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryPriorityAllocateInfoEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryPriorityAllocateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryPriorityAllocateInfoEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryPriorityAllocateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkMemoryPriorityAllocateInfoEXT>())).priority as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryPriorityAllocateInfoEXT),
            "::",
            stringify!(priority)
        )
    );
}
impl Default for VkMemoryPriorityAllocateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub dedicatedAllocationImageAliasing: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>()))
                .sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>()))
                .pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>()))
                .dedicatedAllocationImageAliasing as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV),
            "::",
            stringify!(dedicatedAllocationImageAliasing)
        )
    );
}
impl Default for VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub bufferDeviceAddress: VkBool32,
    pub bufferDeviceAddressCaptureReplay: VkBool32,
    pub bufferDeviceAddressMultiDevice: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>()))
                .bufferDeviceAddress as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT),
            "::",
            stringify!(bufferDeviceAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>()))
                .bufferDeviceAddressCaptureReplay as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT),
            "::",
            stringify!(bufferDeviceAddressCaptureReplay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>()))
                .bufferDeviceAddressMultiDevice as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT),
            "::",
            stringify!(bufferDeviceAddressMultiDevice)
        )
    );
}
impl Default for VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub type VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferDeviceAddressCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceAddress: VkDeviceAddress,
}
#[test]
fn bindgen_test_layout_VkBufferDeviceAddressCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkBufferDeviceAddressCreateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkBufferDeviceAddressCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferDeviceAddressCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBufferDeviceAddressCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferDeviceAddressCreateInfoEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferDeviceAddressCreateInfoEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBufferDeviceAddressCreateInfoEXT>())).deviceAddress as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressCreateInfoEXT),
            "::",
            stringify!(deviceAddress)
        )
    );
}
impl Default for VkBufferDeviceAddressCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetBufferDeviceAddressEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress,
>;
extern "system" {
    pub fn vkGetBufferDeviceAddressEXT(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress;
}
pub const VkToolPurposeFlagBitsEXT_VK_TOOL_PURPOSE_VALIDATION_BIT_EXT: VkToolPurposeFlagBitsEXT = 1;
pub const VkToolPurposeFlagBitsEXT_VK_TOOL_PURPOSE_PROFILING_BIT_EXT: VkToolPurposeFlagBitsEXT = 2;
pub const VkToolPurposeFlagBitsEXT_VK_TOOL_PURPOSE_TRACING_BIT_EXT: VkToolPurposeFlagBitsEXT = 4;
pub const VkToolPurposeFlagBitsEXT_VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT:
    VkToolPurposeFlagBitsEXT = 8;
pub const VkToolPurposeFlagBitsEXT_VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT:
    VkToolPurposeFlagBitsEXT = 16;
pub const VkToolPurposeFlagBitsEXT_VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT:
    VkToolPurposeFlagBitsEXT = 32;
pub const VkToolPurposeFlagBitsEXT_VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT: VkToolPurposeFlagBitsEXT =
    64;
pub const VkToolPurposeFlagBitsEXT_VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT:
    VkToolPurposeFlagBitsEXT = 2147483647;
pub type VkToolPurposeFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkToolPurposeFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceToolPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 256usize],
    pub version: [::std::os::raw::c_char; 256usize],
    pub purposes: VkToolPurposeFlagsEXT,
    pub description: [::std::os::raw::c_char; 256usize],
    pub layer: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceToolPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceToolPropertiesEXT>(),
        1048usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceToolPropertiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceToolPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceToolPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceToolPropertiesEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceToolPropertiesEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceToolPropertiesEXT>())).name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolPropertiesEXT),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceToolPropertiesEXT>())).version as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolPropertiesEXT),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceToolPropertiesEXT>())).purposes as *const _
                as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolPropertiesEXT),
            "::",
            stringify!(purposes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceToolPropertiesEXT>())).description as *const _
                as usize
        },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolPropertiesEXT),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceToolPropertiesEXT>())).layer as *const _ as usize
        },
        788usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolPropertiesEXT),
            "::",
            stringify!(layer)
        )
    );
}
impl Default for VkPhysicalDeviceToolPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetPhysicalDeviceToolPropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pToolCount: *mut u32,
        pToolProperties: *mut VkPhysicalDeviceToolPropertiesEXT,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceToolPropertiesEXT(
        physicalDevice: VkPhysicalDevice,
        pToolCount: *mut u32,
        pToolProperties: *mut VkPhysicalDeviceToolPropertiesEXT,
    ) -> VkResult;
}
pub type VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT:
    VkValidationFeatureEnableEXT = 0;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT : VkValidationFeatureEnableEXT = 1 ;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT:
    VkValidationFeatureEnableEXT = 2;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT:
    VkValidationFeatureEnableEXT = 3;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT:
    VkValidationFeatureEnableEXT = 2147483647;
pub type VkValidationFeatureEnableEXT = ::std::os::raw::c_uint;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_ALL_EXT:
    VkValidationFeatureDisableEXT = 0;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT:
    VkValidationFeatureDisableEXT = 1;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT:
    VkValidationFeatureDisableEXT = 2;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT:
    VkValidationFeatureDisableEXT = 3;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT:
    VkValidationFeatureDisableEXT = 4;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT:
    VkValidationFeatureDisableEXT = 5;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT:
    VkValidationFeatureDisableEXT = 6;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT:
    VkValidationFeatureDisableEXT = 2147483647;
pub type VkValidationFeatureDisableEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub enabledValidationFeatureCount: u32,
    pub pEnabledValidationFeatures: *const VkValidationFeatureEnableEXT,
    pub disabledValidationFeatureCount: u32,
    pub pDisabledValidationFeatures: *const VkValidationFeatureDisableEXT,
}
#[test]
fn bindgen_test_layout_VkValidationFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkValidationFeaturesEXT>(),
        48usize,
        concat!("Size of: ", stringify!(VkValidationFeaturesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkValidationFeaturesEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkValidationFeaturesEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkValidationFeaturesEXT>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkValidationFeaturesEXT>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkValidationFeaturesEXT>())).enabledValidationFeatureCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFeaturesEXT),
            "::",
            stringify!(enabledValidationFeatureCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkValidationFeaturesEXT>())).pEnabledValidationFeatures
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFeaturesEXT),
            "::",
            stringify!(pEnabledValidationFeatures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkValidationFeaturesEXT>())).disabledValidationFeatureCount
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFeaturesEXT),
            "::",
            stringify!(disabledValidationFeatureCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkValidationFeaturesEXT>())).pDisabledValidationFeatures
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFeaturesEXT),
            "::",
            stringify!(pDisabledValidationFeatures)
        )
    );
}
impl Default for VkValidationFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkComponentTypeNV_VK_COMPONENT_TYPE_FLOAT16_NV: VkComponentTypeNV = 0;
pub const VkComponentTypeNV_VK_COMPONENT_TYPE_FLOAT32_NV: VkComponentTypeNV = 1;
pub const VkComponentTypeNV_VK_COMPONENT_TYPE_FLOAT64_NV: VkComponentTypeNV = 2;
pub const VkComponentTypeNV_VK_COMPONENT_TYPE_SINT8_NV: VkComponentTypeNV = 3;
pub const VkComponentTypeNV_VK_COMPONENT_TYPE_SINT16_NV: VkComponentTypeNV = 4;
pub const VkComponentTypeNV_VK_COMPONENT_TYPE_SINT32_NV: VkComponentTypeNV = 5;
pub const VkComponentTypeNV_VK_COMPONENT_TYPE_SINT64_NV: VkComponentTypeNV = 6;
pub const VkComponentTypeNV_VK_COMPONENT_TYPE_UINT8_NV: VkComponentTypeNV = 7;
pub const VkComponentTypeNV_VK_COMPONENT_TYPE_UINT16_NV: VkComponentTypeNV = 8;
pub const VkComponentTypeNV_VK_COMPONENT_TYPE_UINT32_NV: VkComponentTypeNV = 9;
pub const VkComponentTypeNV_VK_COMPONENT_TYPE_UINT64_NV: VkComponentTypeNV = 10;
pub const VkComponentTypeNV_VK_COMPONENT_TYPE_MAX_ENUM_NV: VkComponentTypeNV = 2147483647;
pub type VkComponentTypeNV = ::std::os::raw::c_uint;
pub const VkScopeNV_VK_SCOPE_DEVICE_NV: VkScopeNV = 1;
pub const VkScopeNV_VK_SCOPE_WORKGROUP_NV: VkScopeNV = 2;
pub const VkScopeNV_VK_SCOPE_SUBGROUP_NV: VkScopeNV = 3;
pub const VkScopeNV_VK_SCOPE_QUEUE_FAMILY_NV: VkScopeNV = 5;
pub const VkScopeNV_VK_SCOPE_MAX_ENUM_NV: VkScopeNV = 2147483647;
pub type VkScopeNV = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCooperativeMatrixPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub MSize: u32,
    pub NSize: u32,
    pub KSize: u32,
    pub AType: VkComponentTypeNV,
    pub BType: VkComponentTypeNV,
    pub CType: VkComponentTypeNV,
    pub DType: VkComponentTypeNV,
    pub scope: VkScopeNV,
}
#[test]
fn bindgen_test_layout_VkCooperativeMatrixPropertiesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkCooperativeMatrixPropertiesNV>(),
        48usize,
        concat!("Size of: ", stringify!(VkCooperativeMatrixPropertiesNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCooperativeMatrixPropertiesNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCooperativeMatrixPropertiesNV))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCooperativeMatrixPropertiesNV>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCooperativeMatrixPropertiesNV>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCooperativeMatrixPropertiesNV>())).MSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(MSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCooperativeMatrixPropertiesNV>())).NSize as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(NSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCooperativeMatrixPropertiesNV>())).KSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(KSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCooperativeMatrixPropertiesNV>())).AType as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(AType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCooperativeMatrixPropertiesNV>())).BType as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(BType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCooperativeMatrixPropertiesNV>())).CType as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(CType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCooperativeMatrixPropertiesNV>())).DType as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(DType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCooperativeMatrixPropertiesNV>())).scope as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(scope)
        )
    );
}
impl Default for VkCooperativeMatrixPropertiesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cooperativeMatrix: VkBool32,
    pub cooperativeMatrixRobustBufferAccess: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCooperativeMatrixFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCooperativeMatrixFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCooperativeMatrixFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCooperativeMatrixFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCooperativeMatrixFeaturesNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCooperativeMatrixFeaturesNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCooperativeMatrixFeaturesNV>()))
                .cooperativeMatrix as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixFeaturesNV),
            "::",
            stringify!(cooperativeMatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCooperativeMatrixFeaturesNV>()))
                .cooperativeMatrixRobustBufferAccess as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixFeaturesNV),
            "::",
            stringify!(cooperativeMatrixRobustBufferAccess)
        )
    );
}
impl Default for VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cooperativeMatrixSupportedStages: VkShaderStageFlags,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCooperativeMatrixPropertiesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCooperativeMatrixPropertiesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCooperativeMatrixPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCooperativeMatrixPropertiesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCooperativeMatrixPropertiesNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCooperativeMatrixPropertiesNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCooperativeMatrixPropertiesNV>()))
                .cooperativeMatrixSupportedStages as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixPropertiesNV),
            "::",
            stringify!(cooperativeMatrixSupportedStages)
        )
    );
}
impl Default for VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeMatrixPropertiesNV,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeMatrixPropertiesNV,
    ) -> VkResult;
}
pub const VkCoverageReductionModeNV_VK_COVERAGE_REDUCTION_MODE_MERGE_NV: VkCoverageReductionModeNV =
    0;
pub const VkCoverageReductionModeNV_VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV:
    VkCoverageReductionModeNV = 1;
pub const VkCoverageReductionModeNV_VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV:
    VkCoverageReductionModeNV = 2147483647;
pub type VkCoverageReductionModeNV = ::std::os::raw::c_uint;
pub type VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub coverageReductionMode: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCoverageReductionModeFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCoverageReductionModeFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCoverageReductionModeFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCoverageReductionModeFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCoverageReductionModeFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCoverageReductionModeFeaturesNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCoverageReductionModeFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCoverageReductionModeFeaturesNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCoverageReductionModeFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCoverageReductionModeFeaturesNV>()))
                .coverageReductionMode as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCoverageReductionModeFeaturesNV),
            "::",
            stringify!(coverageReductionMode)
        )
    );
}
impl Default for VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCoverageReductionStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCoverageReductionStateCreateFlagsNV,
    pub coverageReductionMode: VkCoverageReductionModeNV,
}
#[test]
fn bindgen_test_layout_VkPipelineCoverageReductionStateCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCoverageReductionStateCreateInfoNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineCoverageReductionStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCoverageReductionStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineCoverageReductionStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageReductionStateCreateInfoNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageReductionStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageReductionStateCreateInfoNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageReductionStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageReductionStateCreateInfoNV>())).flags
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageReductionStateCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineCoverageReductionStateCreateInfoNV>()))
                .coverageReductionMode as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageReductionStateCreateInfoNV),
            "::",
            stringify!(coverageReductionMode)
        )
    );
}
impl Default for VkPipelineCoverageReductionStateCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferMixedSamplesCombinationNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub coverageReductionMode: VkCoverageReductionModeNV,
    pub rasterizationSamples: VkSampleCountFlagBits,
    pub depthStencilSamples: VkSampleCountFlags,
    pub colorSamples: VkSampleCountFlags,
}
#[test]
fn bindgen_test_layout_VkFramebufferMixedSamplesCombinationNV() {
    assert_eq!(
        ::std::mem::size_of::<VkFramebufferMixedSamplesCombinationNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkFramebufferMixedSamplesCombinationNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkFramebufferMixedSamplesCombinationNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferMixedSamplesCombinationNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferMixedSamplesCombinationNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferMixedSamplesCombinationNV>())).coverageReductionMode
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV),
            "::",
            stringify!(coverageReductionMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferMixedSamplesCombinationNV>())).rasterizationSamples
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV),
            "::",
            stringify!(rasterizationSamples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferMixedSamplesCombinationNV>())).depthStencilSamples
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV),
            "::",
            stringify!(depthStencilSamples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkFramebufferMixedSamplesCombinationNV>())).colorSamples
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV),
            "::",
            stringify!(colorSamples)
        )
    );
}
impl Default for VkFramebufferMixedSamplesCombinationNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV =
    ::std::option::Option<
        unsafe extern "system" fn(
            physicalDevice: VkPhysicalDevice,
            pCombinationCount: *mut u32,
            pCombinations: *mut VkFramebufferMixedSamplesCombinationNV,
        ) -> VkResult,
    >;
extern "system" {
    pub fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
        physicalDevice: VkPhysicalDevice,
        pCombinationCount: *mut u32,
        pCombinations: *mut VkFramebufferMixedSamplesCombinationNV,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentShaderSampleInterlock: VkBool32,
    pub fragmentShaderPixelInterlock: VkBool32,
    pub fragmentShaderShadingRateInterlock: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>()))
                .fragmentShaderSampleInterlock as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT),
            "::",
            stringify!(fragmentShaderSampleInterlock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>()))
                .fragmentShaderPixelInterlock as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT),
            "::",
            stringify!(fragmentShaderPixelInterlock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>()))
                .fragmentShaderShadingRateInterlock as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT),
            "::",
            stringify!(fragmentShaderShadingRateInterlock)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub ycbcrImageArrays: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>())).ycbcrImageArrays
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT),
            "::",
            stringify!(ycbcrImageArrays)
        )
    );
}
impl Default for VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkHeadlessSurfaceCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkHeadlessSurfaceCreateFlagsEXT,
}
#[test]
fn bindgen_test_layout_VkHeadlessSurfaceCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkHeadlessSurfaceCreateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkHeadlessSurfaceCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkHeadlessSurfaceCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkHeadlessSurfaceCreateInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkHeadlessSurfaceCreateInfoEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHeadlessSurfaceCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkHeadlessSurfaceCreateInfoEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHeadlessSurfaceCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkHeadlessSurfaceCreateInfoEXT>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHeadlessSurfaceCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkHeadlessSurfaceCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCreateHeadlessSurfaceEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pCreateInfo: *const VkHeadlessSurfaceCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkCreateHeadlessSurfaceEXT(
        instance: VkInstance,
        pCreateInfo: *const VkHeadlessSurfaceCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult;
}
pub const VkLineRasterizationModeEXT_VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT:
    VkLineRasterizationModeEXT = 0;
pub const VkLineRasterizationModeEXT_VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT:
    VkLineRasterizationModeEXT = 1;
pub const VkLineRasterizationModeEXT_VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT:
    VkLineRasterizationModeEXT = 2;
pub const VkLineRasterizationModeEXT_VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT:
    VkLineRasterizationModeEXT = 3;
pub const VkLineRasterizationModeEXT_VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT:
    VkLineRasterizationModeEXT = 2147483647;
pub type VkLineRasterizationModeEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLineRasterizationFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rectangularLines: VkBool32,
    pub bresenhamLines: VkBool32,
    pub smoothLines: VkBool32,
    pub stippledRectangularLines: VkBool32,
    pub stippledBresenhamLines: VkBool32,
    pub stippledSmoothLines: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceLineRasterizationFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceLineRasterizationFeaturesEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceLineRasterizationFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLineRasterizationFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLineRasterizationFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLineRasterizationFeaturesEXT>()))
                .rectangularLines as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(rectangularLines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLineRasterizationFeaturesEXT>())).bresenhamLines
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(bresenhamLines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLineRasterizationFeaturesEXT>())).smoothLines
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(smoothLines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLineRasterizationFeaturesEXT>()))
                .stippledRectangularLines as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(stippledRectangularLines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLineRasterizationFeaturesEXT>()))
                .stippledBresenhamLines as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(stippledBresenhamLines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLineRasterizationFeaturesEXT>()))
                .stippledSmoothLines as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(stippledSmoothLines)
        )
    );
}
impl Default for VkPhysicalDeviceLineRasterizationFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLineRasterizationPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub lineSubPixelPrecisionBits: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceLineRasterizationPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceLineRasterizationPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceLineRasterizationPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceLineRasterizationPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceLineRasterizationPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLineRasterizationPropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLineRasterizationPropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceLineRasterizationPropertiesEXT>()))
                .lineSubPixelPrecisionBits as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationPropertiesEXT),
            "::",
            stringify!(lineSubPixelPrecisionBits)
        )
    );
}
impl Default for VkPhysicalDeviceLineRasterizationPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationLineStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub lineRasterizationMode: VkLineRasterizationModeEXT,
    pub stippledLineEnable: VkBool32,
    pub lineStippleFactor: u32,
    pub lineStipplePattern: u16,
}
#[test]
fn bindgen_test_layout_VkPipelineRasterizationLineStateCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRasterizationLineStateCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRasterizationLineStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationLineStateCreateInfoEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationLineStateCreateInfoEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationLineStateCreateInfoEXT>()))
                .lineRasterizationMode as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT),
            "::",
            stringify!(lineRasterizationMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationLineStateCreateInfoEXT>()))
                .stippledLineEnable as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT),
            "::",
            stringify!(stippledLineEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationLineStateCreateInfoEXT>()))
                .lineStippleFactor as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT),
            "::",
            stringify!(lineStippleFactor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPipelineRasterizationLineStateCreateInfoEXT>()))
                .lineStipplePattern as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT),
            "::",
            stringify!(lineStipplePattern)
        )
    );
}
impl Default for VkPipelineRasterizationLineStateCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCmdSetLineStippleEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        lineStippleFactor: u32,
        lineStipplePattern: u16,
    ),
>;
extern "system" {
    pub fn vkCmdSetLineStippleEXT(
        commandBuffer: VkCommandBuffer,
        lineStippleFactor: u32,
        lineStipplePattern: u16,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderBufferFloat32Atomics: VkBool32,
    pub shaderBufferFloat32AtomicAdd: VkBool32,
    pub shaderBufferFloat64Atomics: VkBool32,
    pub shaderBufferFloat64AtomicAdd: VkBool32,
    pub shaderSharedFloat32Atomics: VkBool32,
    pub shaderSharedFloat32AtomicAdd: VkBool32,
    pub shaderSharedFloat64Atomics: VkBool32,
    pub shaderSharedFloat64AtomicAdd: VkBool32,
    pub shaderImageFloat32Atomics: VkBool32,
    pub shaderImageFloat32AtomicAdd: VkBool32,
    pub sparseImageFloat32Atomics: VkBool32,
    pub sparseImageFloat32AtomicAdd: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>()))
                .shaderBufferFloat32Atomics as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderBufferFloat32Atomics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>()))
                .shaderBufferFloat32AtomicAdd as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderBufferFloat32AtomicAdd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>()))
                .shaderBufferFloat64Atomics as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderBufferFloat64Atomics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>()))
                .shaderBufferFloat64AtomicAdd as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderBufferFloat64AtomicAdd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>()))
                .shaderSharedFloat32Atomics as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderSharedFloat32Atomics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>()))
                .shaderSharedFloat32AtomicAdd as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderSharedFloat32AtomicAdd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>()))
                .shaderSharedFloat64Atomics as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderSharedFloat64Atomics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>()))
                .shaderSharedFloat64AtomicAdd as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderSharedFloat64AtomicAdd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>()))
                .shaderImageFloat32Atomics as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderImageFloat32Atomics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>()))
                .shaderImageFloat32AtomicAdd as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderImageFloat32AtomicAdd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>()))
                .sparseImageFloat32Atomics as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(sparseImageFloat32Atomics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>()))
                .sparseImageFloat32AtomicAdd as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(sparseImageFloat32AtomicAdd)
        )
    );
}
impl Default for VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;
pub type PFN_vkResetQueryPoolEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    ),
>;
extern "system" {
    pub fn vkResetQueryPoolEXT(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub indexTypeUint8: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceIndexTypeUint8FeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceIndexTypeUint8FeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceIndexTypeUint8FeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceIndexTypeUint8FeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceIndexTypeUint8FeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceIndexTypeUint8FeaturesEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIndexTypeUint8FeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceIndexTypeUint8FeaturesEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIndexTypeUint8FeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceIndexTypeUint8FeaturesEXT>())).indexTypeUint8
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIndexTypeUint8FeaturesEXT),
            "::",
            stringify!(indexTypeUint8)
        )
    );
}
impl Default for VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub extendedDynamicState: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT>()))
                .extendedDynamicState as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT),
            "::",
            stringify!(extendedDynamicState)
        )
    );
}
impl Default for VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCmdSetCullModeEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags),
>;
pub type PFN_vkCmdSetFrontFaceEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace),
>;
pub type PFN_vkCmdSetPrimitiveTopologyEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology),
>;
pub type PFN_vkCmdSetViewportWithCountEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        viewportCount: u32,
        pViewports: *const VkViewport,
    ),
>;
pub type PFN_vkCmdSetScissorWithCountEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdBindVertexBuffers2EXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
        pStrides: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdSetDepthTestEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthWriteEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthCompareOpEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp),
>;
pub type PFN_vkCmdSetDepthBoundsTestEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilTestEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilOpEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        failOp: VkStencilOp,
        passOp: VkStencilOp,
        depthFailOp: VkStencilOp,
        compareOp: VkCompareOp,
    ),
>;
extern "system" {
    pub fn vkCmdSetCullModeEXT(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags);
}
extern "system" {
    pub fn vkCmdSetFrontFaceEXT(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace);
}
extern "system" {
    pub fn vkCmdSetPrimitiveTopologyEXT(
        commandBuffer: VkCommandBuffer,
        primitiveTopology: VkPrimitiveTopology,
    );
}
extern "system" {
    pub fn vkCmdSetViewportWithCountEXT(
        commandBuffer: VkCommandBuffer,
        viewportCount: u32,
        pViewports: *const VkViewport,
    );
}
extern "system" {
    pub fn vkCmdSetScissorWithCountEXT(
        commandBuffer: VkCommandBuffer,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    );
}
extern "system" {
    pub fn vkCmdBindVertexBuffers2EXT(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
        pStrides: *const VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdSetDepthTestEnableEXT(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32);
}
extern "system" {
    pub fn vkCmdSetDepthWriteEnableEXT(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32);
}
extern "system" {
    pub fn vkCmdSetDepthCompareOpEXT(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp);
}
extern "system" {
    pub fn vkCmdSetDepthBoundsTestEnableEXT(
        commandBuffer: VkCommandBuffer,
        depthBoundsTestEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetStencilTestEnableEXT(
        commandBuffer: VkCommandBuffer,
        stencilTestEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetStencilOpEXT(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        failOp: VkStencilOp,
        passOp: VkStencilOp,
        depthFailOp: VkStencilOp,
        compareOp: VkCompareOp,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderDemoteToHelperInvocation: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT>()))
                .sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT>()))
                .pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT>()))
                .shaderDemoteToHelperInvocation as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT),
            "::",
            stringify!(shaderDemoteToHelperInvocation)
        )
    );
}
impl Default for VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutNV_T {
    _unused: [u8; 0],
}
pub type VkIndirectCommandsLayoutNV = *mut VkIndirectCommandsLayoutNV_T;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV:
    VkIndirectCommandsTokenTypeNV = 0;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV:
    VkIndirectCommandsTokenTypeNV = 1;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV:
    VkIndirectCommandsTokenTypeNV = 2;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV:
    VkIndirectCommandsTokenTypeNV = 3;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV:
    VkIndirectCommandsTokenTypeNV = 4;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV:
    VkIndirectCommandsTokenTypeNV = 5;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV:
    VkIndirectCommandsTokenTypeNV = 6;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV:
    VkIndirectCommandsTokenTypeNV = 7;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV:
    VkIndirectCommandsTokenTypeNV = 2147483647;
pub type VkIndirectCommandsTokenTypeNV = ::std::os::raw::c_uint;
pub const VkIndirectStateFlagBitsNV_VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV:
    VkIndirectStateFlagBitsNV = 1;
pub const VkIndirectStateFlagBitsNV_VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV:
    VkIndirectStateFlagBitsNV = 2147483647;
pub type VkIndirectStateFlagBitsNV = ::std::os::raw::c_uint;
pub type VkIndirectStateFlagsNV = VkFlags;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV : VkIndirectCommandsLayoutUsageFlagBitsNV = 1 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV : VkIndirectCommandsLayoutUsageFlagBitsNV = 2 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV : VkIndirectCommandsLayoutUsageFlagBitsNV = 4 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV : VkIndirectCommandsLayoutUsageFlagBitsNV = 2147483647 ;
pub type VkIndirectCommandsLayoutUsageFlagBitsNV = ::std::os::raw::c_uint;
pub type VkIndirectCommandsLayoutUsageFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxGraphicsShaderGroupCount: u32,
    pub maxIndirectSequenceCount: u32,
    pub maxIndirectCommandsTokenCount: u32,
    pub maxIndirectCommandsStreamCount: u32,
    pub maxIndirectCommandsTokenOffset: u32,
    pub maxIndirectCommandsStreamStride: u32,
    pub minSequencesCountBufferOffsetAlignment: u32,
    pub minSequencesIndexBufferOffsetAlignment: u32,
    pub minIndirectCommandsBufferOffsetAlignment: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>()))
                .maxGraphicsShaderGroupCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(maxGraphicsShaderGroupCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>()))
                .maxIndirectSequenceCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(maxIndirectSequenceCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>()))
                .maxIndirectCommandsTokenCount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(maxIndirectCommandsTokenCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>()))
                .maxIndirectCommandsStreamCount as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(maxIndirectCommandsStreamCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>()))
                .maxIndirectCommandsTokenOffset as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(maxIndirectCommandsTokenOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>()))
                .maxIndirectCommandsStreamStride as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(maxIndirectCommandsStreamStride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>()))
                .minSequencesCountBufferOffsetAlignment as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(minSequencesCountBufferOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>()))
                .minSequencesIndexBufferOffsetAlignment as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(minSequencesIndexBufferOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>()))
                .minIndirectCommandsBufferOffsetAlignment as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(minIndirectCommandsBufferOffsetAlignment)
        )
    );
}
impl Default for VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceGeneratedCommands: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV>()))
                .deviceGeneratedCommands as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV),
            "::",
            stringify!(deviceGeneratedCommands)
        )
    );
}
impl Default for VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGraphicsShaderGroupCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
    pub pTessellationState: *const VkPipelineTessellationStateCreateInfo,
}
#[test]
fn bindgen_test_layout_VkGraphicsShaderGroupCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkGraphicsShaderGroupCreateInfoNV>(),
        48usize,
        concat!("Size of: ", stringify!(VkGraphicsShaderGroupCreateInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGraphicsShaderGroupCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsShaderGroupCreateInfoNV>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsShaderGroupCreateInfoNV>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsShaderGroupCreateInfoNV>())).stageCount as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV),
            "::",
            stringify!(stageCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsShaderGroupCreateInfoNV>())).pStages as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV),
            "::",
            stringify!(pStages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsShaderGroupCreateInfoNV>())).pVertexInputState
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV),
            "::",
            stringify!(pVertexInputState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsShaderGroupCreateInfoNV>())).pTessellationState
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV),
            "::",
            stringify!(pTessellationState)
        )
    );
}
impl Default for VkGraphicsShaderGroupCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub groupCount: u32,
    pub pGroups: *const VkGraphicsShaderGroupCreateInfoNV,
    pub pipelineCount: u32,
    pub pPipelines: *const VkPipeline,
}
#[test]
fn bindgen_test_layout_VkGraphicsPipelineShaderGroupsCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkGraphicsPipelineShaderGroupsCreateInfoNV>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkGraphicsPipelineShaderGroupsCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineShaderGroupsCreateInfoNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineShaderGroupsCreateInfoNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineShaderGroupsCreateInfoNV>())).groupCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV),
            "::",
            stringify!(groupCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineShaderGroupsCreateInfoNV>())).pGroups
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV),
            "::",
            stringify!(pGroups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineShaderGroupsCreateInfoNV>())).pipelineCount
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV),
            "::",
            stringify!(pipelineCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGraphicsPipelineShaderGroupsCreateInfoNV>())).pPipelines
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV),
            "::",
            stringify!(pPipelines)
        )
    );
}
impl Default for VkGraphicsPipelineShaderGroupsCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkBindShaderGroupIndirectCommandNV {
    pub groupIndex: u32,
}
#[test]
fn bindgen_test_layout_VkBindShaderGroupIndirectCommandNV() {
    assert_eq!(
        ::std::mem::size_of::<VkBindShaderGroupIndirectCommandNV>(),
        4usize,
        concat!("Size of: ", stringify!(VkBindShaderGroupIndirectCommandNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindShaderGroupIndirectCommandNV>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindShaderGroupIndirectCommandNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindShaderGroupIndirectCommandNV>())).groupIndex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindShaderGroupIndirectCommandNV),
            "::",
            stringify!(groupIndex)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindIndexBufferIndirectCommandNV {
    pub bufferAddress: VkDeviceAddress,
    pub size: u32,
    pub indexType: VkIndexType,
}
#[test]
fn bindgen_test_layout_VkBindIndexBufferIndirectCommandNV() {
    assert_eq!(
        ::std::mem::size_of::<VkBindIndexBufferIndirectCommandNV>(),
        16usize,
        concat!("Size of: ", stringify!(VkBindIndexBufferIndirectCommandNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindIndexBufferIndirectCommandNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindIndexBufferIndirectCommandNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindIndexBufferIndirectCommandNV>())).bufferAddress as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindIndexBufferIndirectCommandNV),
            "::",
            stringify!(bufferAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindIndexBufferIndirectCommandNV>())).size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindIndexBufferIndirectCommandNV),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindIndexBufferIndirectCommandNV>())).indexType as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindIndexBufferIndirectCommandNV),
            "::",
            stringify!(indexType)
        )
    );
}
impl Default for VkBindIndexBufferIndirectCommandNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkBindVertexBufferIndirectCommandNV {
    pub bufferAddress: VkDeviceAddress,
    pub size: u32,
    pub stride: u32,
}
#[test]
fn bindgen_test_layout_VkBindVertexBufferIndirectCommandNV() {
    assert_eq!(
        ::std::mem::size_of::<VkBindVertexBufferIndirectCommandNV>(),
        16usize,
        concat!("Size of: ", stringify!(VkBindVertexBufferIndirectCommandNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindVertexBufferIndirectCommandNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindVertexBufferIndirectCommandNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindVertexBufferIndirectCommandNV>())).bufferAddress
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindVertexBufferIndirectCommandNV),
            "::",
            stringify!(bufferAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindVertexBufferIndirectCommandNV>())).size as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindVertexBufferIndirectCommandNV),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkBindVertexBufferIndirectCommandNV>())).stride as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindVertexBufferIndirectCommandNV),
            "::",
            stringify!(stride)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSetStateFlagsIndirectCommandNV {
    pub data: u32,
}
#[test]
fn bindgen_test_layout_VkSetStateFlagsIndirectCommandNV() {
    assert_eq!(
        ::std::mem::size_of::<VkSetStateFlagsIndirectCommandNV>(),
        4usize,
        concat!("Size of: ", stringify!(VkSetStateFlagsIndirectCommandNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSetStateFlagsIndirectCommandNV>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkSetStateFlagsIndirectCommandNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSetStateFlagsIndirectCommandNV>())).data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSetStateFlagsIndirectCommandNV),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsStreamNV {
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkIndirectCommandsStreamNV() {
    assert_eq!(
        ::std::mem::size_of::<VkIndirectCommandsStreamNV>(),
        16usize,
        concat!("Size of: ", stringify!(VkIndirectCommandsStreamNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkIndirectCommandsStreamNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkIndirectCommandsStreamNV))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsStreamNV>())).buffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsStreamNV),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsStreamNV>())).offset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsStreamNV),
            "::",
            stringify!(offset)
        )
    );
}
impl Default for VkIndirectCommandsStreamNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutTokenNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub tokenType: VkIndirectCommandsTokenTypeNV,
    pub stream: u32,
    pub offset: u32,
    pub vertexBindingUnit: u32,
    pub vertexDynamicStride: VkBool32,
    pub pushconstantPipelineLayout: VkPipelineLayout,
    pub pushconstantShaderStageFlags: VkShaderStageFlags,
    pub pushconstantOffset: u32,
    pub pushconstantSize: u32,
    pub indirectStateFlags: VkIndirectStateFlagsNV,
    pub indexTypeCount: u32,
    pub pIndexTypes: *const VkIndexType,
    pub pIndexTypeValues: *const u32,
}
#[test]
fn bindgen_test_layout_VkIndirectCommandsLayoutTokenNV() {
    assert_eq!(
        ::std::mem::size_of::<VkIndirectCommandsLayoutTokenNV>(),
        88usize,
        concat!("Size of: ", stringify!(VkIndirectCommandsLayoutTokenNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkIndirectCommandsLayoutTokenNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkIndirectCommandsLayoutTokenNV))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).tokenType as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(tokenType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).stream as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).offset as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).vertexBindingUnit
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(vertexBindingUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).vertexDynamicStride
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(vertexDynamicStride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).pushconstantPipelineLayout
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pushconstantPipelineLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).pushconstantShaderStageFlags
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pushconstantShaderStageFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).pushconstantOffset
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pushconstantOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).pushconstantSize as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pushconstantSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).indirectStateFlags
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(indirectStateFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).indexTypeCount as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(indexTypeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).pIndexTypes as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pIndexTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutTokenNV>())).pIndexTypeValues as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pIndexTypeValues)
        )
    );
}
impl Default for VkIndirectCommandsLayoutTokenNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkIndirectCommandsLayoutUsageFlagsNV,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub tokenCount: u32,
    pub pTokens: *const VkIndirectCommandsLayoutTokenNV,
    pub streamCount: u32,
    pub pStreamStrides: *const u32,
}
#[test]
fn bindgen_test_layout_VkIndirectCommandsLayoutCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkIndirectCommandsLayoutCreateInfoNV>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkIndirectCommandsLayoutCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutCreateInfoNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutCreateInfoNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutCreateInfoNV>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutCreateInfoNV>())).pipelineBindPoint
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(pipelineBindPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutCreateInfoNV>())).tokenCount as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(tokenCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutCreateInfoNV>())).pTokens as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(pTokens)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutCreateInfoNV>())).streamCount as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(streamCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkIndirectCommandsLayoutCreateInfoNV>())).pStreamStrides
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(pStreamStrides)
        )
    );
}
impl Default for VkIndirectCommandsLayoutCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeneratedCommandsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipeline: VkPipeline,
    pub indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    pub streamCount: u32,
    pub pStreams: *const VkIndirectCommandsStreamNV,
    pub sequencesCount: u32,
    pub preprocessBuffer: VkBuffer,
    pub preprocessOffset: VkDeviceSize,
    pub preprocessSize: VkDeviceSize,
    pub sequencesCountBuffer: VkBuffer,
    pub sequencesCountOffset: VkDeviceSize,
    pub sequencesIndexBuffer: VkBuffer,
    pub sequencesIndexOffset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkGeneratedCommandsInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkGeneratedCommandsInfoNV>(),
        120usize,
        concat!("Size of: ", stringify!(VkGeneratedCommandsInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGeneratedCommandsInfoNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkGeneratedCommandsInfoNV))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).sType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).pNext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).pipelineBindPoint as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(pipelineBindPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).pipeline as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(pipeline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).indirectCommandsLayout as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(indirectCommandsLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).streamCount as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(streamCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).pStreams as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(pStreams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).sequencesCount as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(sequencesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).preprocessBuffer as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(preprocessBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).preprocessOffset as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(preprocessOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).preprocessSize as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(preprocessSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).sequencesCountBuffer as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(sequencesCountBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).sequencesCountOffset as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(sequencesCountOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).sequencesIndexBuffer as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(sequencesIndexBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsInfoNV>())).sequencesIndexOffset as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(sequencesIndexOffset)
        )
    );
}
impl Default for VkGeneratedCommandsInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeneratedCommandsMemoryRequirementsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipeline: VkPipeline,
    pub indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    pub maxSequencesCount: u32,
}
#[test]
fn bindgen_test_layout_VkGeneratedCommandsMemoryRequirementsInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkGeneratedCommandsMemoryRequirementsInfoNV>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkGeneratedCommandsMemoryRequirementsInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsMemoryRequirementsInfoNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsMemoryRequirementsInfoNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsMemoryRequirementsInfoNV>()))
                .pipelineBindPoint as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV),
            "::",
            stringify!(pipelineBindPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsMemoryRequirementsInfoNV>())).pipeline
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV),
            "::",
            stringify!(pipeline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsMemoryRequirementsInfoNV>()))
                .indirectCommandsLayout as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV),
            "::",
            stringify!(indirectCommandsLayout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkGeneratedCommandsMemoryRequirementsInfoNV>()))
                .maxSequencesCount as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV),
            "::",
            stringify!(maxSequencesCount)
        )
    );
}
impl Default for VkGeneratedCommandsMemoryRequirementsInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkGetGeneratedCommandsMemoryRequirementsNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkGeneratedCommandsMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkCmdPreprocessGeneratedCommandsNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    ),
>;
pub type PFN_vkCmdExecuteGeneratedCommandsNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        isPreprocessed: VkBool32,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    ),
>;
pub type PFN_vkCmdBindPipelineShaderGroupNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
        groupIndex: u32,
    ),
>;
pub type PFN_vkCreateIndirectCommandsLayoutNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkIndirectCommandsLayoutCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pIndirectCommandsLayout: *mut VkIndirectCommandsLayoutNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyIndirectCommandsLayoutNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        indirectCommandsLayout: VkIndirectCommandsLayoutNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
extern "system" {
    pub fn vkGetGeneratedCommandsMemoryRequirementsNV(
        device: VkDevice,
        pInfo: *const VkGeneratedCommandsMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkCmdPreprocessGeneratedCommandsNV(
        commandBuffer: VkCommandBuffer,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    );
}
extern "system" {
    pub fn vkCmdExecuteGeneratedCommandsNV(
        commandBuffer: VkCommandBuffer,
        isPreprocessed: VkBool32,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    );
}
extern "system" {
    pub fn vkCmdBindPipelineShaderGroupNV(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
        groupIndex: u32,
    );
}
extern "system" {
    pub fn vkCreateIndirectCommandsLayoutNV(
        device: VkDevice,
        pCreateInfo: *const VkIndirectCommandsLayoutCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pIndirectCommandsLayout: *mut VkIndirectCommandsLayoutNV,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyIndirectCommandsLayoutNV(
        device: VkDevice,
        indirectCommandsLayout: VkIndirectCommandsLayoutNV,
        pAllocator: *const VkAllocationCallbacks,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub texelBufferAlignment: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>()))
                .texelBufferAlignment as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT),
            "::",
            stringify!(texelBufferAlignment)
        )
    );
}
impl Default for VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
    pub uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT>()))
                .storageTexelBufferOffsetAlignmentBytes as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT),
            "::",
            stringify!(storageTexelBufferOffsetAlignmentBytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT>()))
                .storageTexelBufferOffsetSingleTexelAlignment as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT),
            "::",
            stringify!(storageTexelBufferOffsetSingleTexelAlignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT>()))
                .uniformTexelBufferOffsetAlignmentBytes as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT),
            "::",
            stringify!(uniformTexelBufferOffsetAlignmentBytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT>()))
                .uniformTexelBufferOffsetSingleTexelAlignment as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT),
            "::",
            stringify!(uniformTexelBufferOffsetSingleTexelAlignment)
        )
    );
}
impl Default for VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassTransformBeginInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub transform: VkSurfaceTransformFlagBitsKHR,
}
#[test]
fn bindgen_test_layout_VkRenderPassTransformBeginInfoQCOM() {
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassTransformBeginInfoQCOM>(),
        24usize,
        concat!("Size of: ", stringify!(VkRenderPassTransformBeginInfoQCOM))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassTransformBeginInfoQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderPassTransformBeginInfoQCOM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassTransformBeginInfoQCOM>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassTransformBeginInfoQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassTransformBeginInfoQCOM>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassTransformBeginInfoQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkRenderPassTransformBeginInfoQCOM>())).transform as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassTransformBeginInfoQCOM),
            "::",
            stringify!(transform)
        )
    );
}
impl Default for VkRenderPassTransformBeginInfoQCOM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub transform: VkSurfaceTransformFlagBitsKHR,
    pub renderArea: VkRect2D,
}
#[test]
fn bindgen_test_layout_VkCommandBufferInheritanceRenderPassTransformInfoQCOM() {
    assert_eq!(
        ::std::mem::size_of::<VkCommandBufferInheritanceRenderPassTransformInfoQCOM>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkCommandBufferInheritanceRenderPassTransformInfoQCOM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandBufferInheritanceRenderPassTransformInfoQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkCommandBufferInheritanceRenderPassTransformInfoQCOM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceRenderPassTransformInfoQCOM>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderPassTransformInfoQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceRenderPassTransformInfoQCOM>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderPassTransformInfoQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceRenderPassTransformInfoQCOM>()))
                .transform as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderPassTransformInfoQCOM),
            "::",
            stringify!(transform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkCommandBufferInheritanceRenderPassTransformInfoQCOM>()))
                .renderArea as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderPassTransformInfoQCOM),
            "::",
            stringify!(renderArea)
        )
    );
}
impl Default for VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRobustness2FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub robustBufferAccess2: VkBool32,
    pub robustImageAccess2: VkBool32,
    pub nullDescriptor: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRobustness2FeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRobustness2FeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRobustness2FeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRobustness2FeaturesEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRobustness2FeaturesEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRobustness2FeaturesEXT>())).robustBufferAccess2
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT),
            "::",
            stringify!(robustBufferAccess2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRobustness2FeaturesEXT>())).robustImageAccess2
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT),
            "::",
            stringify!(robustImageAccess2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRobustness2FeaturesEXT>())).nullDescriptor
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT),
            "::",
            stringify!(nullDescriptor)
        )
    );
}
impl Default for VkPhysicalDeviceRobustness2FeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRobustness2PropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub robustStorageBufferAccessSizeAlignment: VkDeviceSize,
    pub robustUniformBufferAccessSizeAlignment: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRobustness2PropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRobustness2PropertiesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRobustness2PropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRobustness2PropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRobustness2PropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRobustness2PropertiesEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2PropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRobustness2PropertiesEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2PropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRobustness2PropertiesEXT>()))
                .robustStorageBufferAccessSizeAlignment as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2PropertiesEXT),
            "::",
            stringify!(robustStorageBufferAccessSizeAlignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceRobustness2PropertiesEXT>()))
                .robustUniformBufferAccessSizeAlignment as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2PropertiesEXT),
            "::",
            stringify!(robustUniformBufferAccessSizeAlignment)
        )
    );
}
impl Default for VkPhysicalDeviceRobustness2PropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerCustomBorderColorCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub customBorderColor: VkClearColorValue,
    pub format: VkFormat,
}
#[test]
fn bindgen_test_layout_VkSamplerCustomBorderColorCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkSamplerCustomBorderColorCreateInfoEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkSamplerCustomBorderColorCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerCustomBorderColorCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSamplerCustomBorderColorCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerCustomBorderColorCreateInfoEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCustomBorderColorCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerCustomBorderColorCreateInfoEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCustomBorderColorCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerCustomBorderColorCreateInfoEXT>())).customBorderColor
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCustomBorderColorCreateInfoEXT),
            "::",
            stringify!(customBorderColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkSamplerCustomBorderColorCreateInfoEXT>())).format as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCustomBorderColorCreateInfoEXT),
            "::",
            stringify!(format)
        )
    );
}
impl Default for VkSamplerCustomBorderColorCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxCustomBorderColorSamplers: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCustomBorderColorPropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCustomBorderColorPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCustomBorderColorPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCustomBorderColorPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCustomBorderColorPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCustomBorderColorPropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCustomBorderColorPropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCustomBorderColorPropertiesEXT>()))
                .maxCustomBorderColorSamplers as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorPropertiesEXT),
            "::",
            stringify!(maxCustomBorderColorSamplers)
        )
    );
}
impl Default for VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub customBorderColors: VkBool32,
    pub customBorderColorWithoutFormat: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCustomBorderColorFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCustomBorderColorFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCustomBorderColorFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCustomBorderColorFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCustomBorderColorFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCustomBorderColorFeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCustomBorderColorFeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCustomBorderColorFeaturesEXT>()))
                .customBorderColors as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorFeaturesEXT),
            "::",
            stringify!(customBorderColors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceCustomBorderColorFeaturesEXT>()))
                .customBorderColorWithoutFormat as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorFeaturesEXT),
            "::",
            stringify!(customBorderColorWithoutFormat)
        )
    );
}
impl Default for VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPrivateDataSlotEXT_T {
    _unused: [u8; 0],
}
pub type VkPrivateDataSlotEXT = *mut VkPrivateDataSlotEXT_T;
pub const VkPrivateDataSlotCreateFlagBitsEXT_VK_PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT:
    VkPrivateDataSlotCreateFlagBitsEXT = 2147483647;
pub type VkPrivateDataSlotCreateFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkPrivateDataSlotCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePrivateDataFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub privateData: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePrivateDataFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePrivateDataFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePrivateDataFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePrivateDataFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePrivateDataFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePrivateDataFeaturesEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrivateDataFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePrivateDataFeaturesEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrivateDataFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePrivateDataFeaturesEXT>())).privateData
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrivateDataFeaturesEXT),
            "::",
            stringify!(privateData)
        )
    );
}
impl Default for VkPhysicalDevicePrivateDataFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDevicePrivateDataCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub privateDataSlotRequestCount: u32,
}
#[test]
fn bindgen_test_layout_VkDevicePrivateDataCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkDevicePrivateDataCreateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkDevicePrivateDataCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDevicePrivateDataCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDevicePrivateDataCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDevicePrivateDataCreateInfoEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDevicePrivateDataCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDevicePrivateDataCreateInfoEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDevicePrivateDataCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDevicePrivateDataCreateInfoEXT>())).privateDataSlotRequestCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDevicePrivateDataCreateInfoEXT),
            "::",
            stringify!(privateDataSlotRequestCount)
        )
    );
}
impl Default for VkDevicePrivateDataCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPrivateDataSlotCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPrivateDataSlotCreateFlagsEXT,
}
#[test]
fn bindgen_test_layout_VkPrivateDataSlotCreateInfoEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPrivateDataSlotCreateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkPrivateDataSlotCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPrivateDataSlotCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPrivateDataSlotCreateInfoEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPrivateDataSlotCreateInfoEXT>())).sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPrivateDataSlotCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPrivateDataSlotCreateInfoEXT>())).pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPrivateDataSlotCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPrivateDataSlotCreateInfoEXT>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPrivateDataSlotCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkPrivateDataSlotCreateInfoEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PFN_vkCreatePrivateDataSlotEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkPrivateDataSlotCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pPrivateDataSlot: *mut VkPrivateDataSlotEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPrivateDataSlotEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        privateDataSlot: VkPrivateDataSlotEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkSetPrivateDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlotEXT,
        data: u64,
    ) -> VkResult,
>;
pub type PFN_vkGetPrivateDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlotEXT,
        pData: *mut u64,
    ),
>;
extern "system" {
    pub fn vkCreatePrivateDataSlotEXT(
        device: VkDevice,
        pCreateInfo: *const VkPrivateDataSlotCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pPrivateDataSlot: *mut VkPrivateDataSlotEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyPrivateDataSlotEXT(
        device: VkDevice,
        privateDataSlot: VkPrivateDataSlotEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkSetPrivateDataEXT(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlotEXT,
        data: u64,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPrivateDataEXT(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlotEXT,
        pData: *mut u64,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineCreationCacheControl: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT>()))
                .sType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT>()))
                .pNext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT>()))
                .pipelineCreationCacheControl as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT),
            "::",
            stringify!(pipelineCreationCacheControl)
        )
    );
}
impl Default for VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV : VkDeviceDiagnosticsConfigFlagBitsNV = 1 ;
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV : VkDeviceDiagnosticsConfigFlagBitsNV = 2 ;
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV : VkDeviceDiagnosticsConfigFlagBitsNV = 4 ;
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV:
    VkDeviceDiagnosticsConfigFlagBitsNV = 2147483647;
pub type VkDeviceDiagnosticsConfigFlagBitsNV = ::std::os::raw::c_uint;
pub type VkDeviceDiagnosticsConfigFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub diagnosticsConfig: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDiagnosticsConfigFeaturesNV() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDiagnosticsConfigFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDiagnosticsConfigFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDiagnosticsConfigFeaturesNV>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDiagnosticsConfigFeaturesNV>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceDiagnosticsConfigFeaturesNV>()))
                .diagnosticsConfig as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV),
            "::",
            stringify!(diagnosticsConfig)
        )
    );
}
impl Default for VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceDiagnosticsConfigCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceDiagnosticsConfigFlagsNV,
}
#[test]
fn bindgen_test_layout_VkDeviceDiagnosticsConfigCreateInfoNV() {
    assert_eq!(
        ::std::mem::size_of::<VkDeviceDiagnosticsConfigCreateInfoNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDeviceDiagnosticsConfigCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceDiagnosticsConfigCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceDiagnosticsConfigCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceDiagnosticsConfigCreateInfoNV>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceDiagnosticsConfigCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceDiagnosticsConfigCreateInfoNV>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceDiagnosticsConfigCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkDeviceDiagnosticsConfigCreateInfoNV>())).flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceDiagnosticsConfigCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkDeviceDiagnosticsConfigCreateInfoNV {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentDensityMapDeferred: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT>()))
                .fragmentDensityMapDeferred as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT),
            "::",
            stringify!(fragmentDensityMapDeferred)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subsampledLoads: VkBool32,
    pub subsampledCoarseReconstructionEarlyAccess: VkBool32,
    pub maxSubsampledArrayLayers: u32,
    pub maxDescriptorSetSubsampledSamplers: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>())).sType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>())).pNext
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>()))
                .subsampledLoads as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT),
            "::",
            stringify!(subsampledLoads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>()))
                .subsampledCoarseReconstructionEarlyAccess as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT),
            "::",
            stringify!(subsampledCoarseReconstructionEarlyAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>()))
                .maxSubsampledArrayLayers as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT),
            "::",
            stringify!(maxSubsampledArrayLayers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>()))
                .maxDescriptorSetSubsampledSamplers as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT),
            "::",
            stringify!(maxDescriptorSetSubsampledSamplers)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageRobustnessFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub robustImageAccess: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageRobustnessFeaturesEXT() {
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageRobustnessFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImageRobustnessFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageRobustnessFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageRobustnessFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageRobustnessFeaturesEXT>())).sType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageRobustnessFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageRobustnessFeaturesEXT>())).pNext as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageRobustnessFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VkPhysicalDeviceImageRobustnessFeaturesEXT>())).robustImageAccess
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageRobustnessFeaturesEXT),
            "::",
            stringify!(robustImageAccess)
        )
    );
}
impl Default for VkPhysicalDeviceImageRobustnessFeaturesEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanInstance {
    pub pipelineCache: VkPipelineCache,
    pub instance: VkInstance,
    pub physicalDevice: VkPhysicalDevice,
    pub device: VkDevice,
    pub graphicsQueue: VkQueue,
    pub getInstanceProcAddr: PFN_vkGetInstanceProcAddr,
    pub queueFamilyIndex: ::std::os::raw::c_uint,
    pub reserved: [*mut ::std::os::raw::c_void; 8usize],
}
#[test]
fn bindgen_test_layout_UnityVulkanInstance() {
    assert_eq!(
        ::std::mem::size_of::<UnityVulkanInstance>(),
        120usize,
        concat!("Size of: ", stringify!(UnityVulkanInstance))
    );
    assert_eq!(
        ::std::mem::align_of::<UnityVulkanInstance>(),
        8usize,
        concat!("Alignment of ", stringify!(UnityVulkanInstance))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanInstance>())).pipelineCache as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanInstance),
            "::",
            stringify!(pipelineCache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanInstance>())).instance as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanInstance),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanInstance>())).physicalDevice as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanInstance),
            "::",
            stringify!(physicalDevice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanInstance>())).device as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanInstance),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanInstance>())).graphicsQueue as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanInstance),
            "::",
            stringify!(graphicsQueue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanInstance>())).getInstanceProcAddr as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanInstance),
            "::",
            stringify!(getInstanceProcAddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanInstance>())).queueFamilyIndex as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanInstance),
            "::",
            stringify!(queueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanInstance>())).reserved as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanInstance),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for UnityVulkanInstance {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanMemory {
    pub memory: VkDeviceMemory,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub mapped: *mut ::std::os::raw::c_void,
    pub flags: VkMemoryPropertyFlags,
    pub memoryTypeIndex: ::std::os::raw::c_uint,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_UnityVulkanMemory() {
    assert_eq!(
        ::std::mem::size_of::<UnityVulkanMemory>(),
        72usize,
        concat!("Size of: ", stringify!(UnityVulkanMemory))
    );
    assert_eq!(
        ::std::mem::align_of::<UnityVulkanMemory>(),
        8usize,
        concat!("Alignment of ", stringify!(UnityVulkanMemory))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanMemory>())).memory as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanMemory),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanMemory>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanMemory),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanMemory>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanMemory),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanMemory>())).mapped as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanMemory),
            "::",
            stringify!(mapped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanMemory>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanMemory),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanMemory>())).memoryTypeIndex as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanMemory),
            "::",
            stringify!(memoryTypeIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanMemory>())).reserved as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanMemory),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for UnityVulkanMemory {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const UnityVulkanResourceAccessMode_kUnityVulkanResourceAccess_ObserveOnly:
    UnityVulkanResourceAccessMode = 0;
pub const UnityVulkanResourceAccessMode_kUnityVulkanResourceAccess_PipelineBarrier:
    UnityVulkanResourceAccessMode = 1;
pub const UnityVulkanResourceAccessMode_kUnityVulkanResourceAccess_Recreate:
    UnityVulkanResourceAccessMode = 2;
pub type UnityVulkanResourceAccessMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanImage {
    pub memory: UnityVulkanMemory,
    pub image: VkImage,
    pub layout: VkImageLayout,
    pub aspect: VkImageAspectFlags,
    pub usage: VkImageUsageFlags,
    pub format: VkFormat,
    pub extent: VkExtent3D,
    pub tiling: VkImageTiling,
    pub type_: VkImageType,
    pub samples: VkSampleCountFlagBits,
    pub layers: ::std::os::raw::c_int,
    pub mipCount: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_UnityVulkanImage() {
    assert_eq!(
        ::std::mem::size_of::<UnityVulkanImage>(),
        160usize,
        concat!("Size of: ", stringify!(UnityVulkanImage))
    );
    assert_eq!(
        ::std::mem::align_of::<UnityVulkanImage>(),
        8usize,
        concat!("Alignment of ", stringify!(UnityVulkanImage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanImage>())).memory as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanImage),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanImage>())).image as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanImage),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanImage>())).layout as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanImage),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanImage>())).aspect as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanImage),
            "::",
            stringify!(aspect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanImage>())).usage as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanImage),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanImage>())).format as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanImage),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanImage>())).extent as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanImage),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanImage>())).tiling as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanImage),
            "::",
            stringify!(tiling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanImage>())).type_ as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanImage),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanImage>())).samples as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanImage),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanImage>())).layers as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanImage),
            "::",
            stringify!(layers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanImage>())).mipCount as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanImage),
            "::",
            stringify!(mipCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanImage>())).reserved as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanImage),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for UnityVulkanImage {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanBuffer {
    pub memory: UnityVulkanMemory,
    pub buffer: VkBuffer,
    pub sizeInBytes: size_t,
    pub usage: VkBufferUsageFlags,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_UnityVulkanBuffer() {
    assert_eq!(
        ::std::mem::size_of::<UnityVulkanBuffer>(),
        128usize,
        concat!("Size of: ", stringify!(UnityVulkanBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<UnityVulkanBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(UnityVulkanBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanBuffer>())).memory as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanBuffer),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanBuffer>())).buffer as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanBuffer),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanBuffer>())).sizeInBytes as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanBuffer),
            "::",
            stringify!(sizeInBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanBuffer>())).usage as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanBuffer),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityVulkanBuffer>())).reserved as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanBuffer),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for UnityVulkanBuffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanRecordingState {
    pub commandBuffer: VkCommandBuffer,
    pub commandBufferLevel: VkCommandBufferLevel,
    pub renderPass: VkRenderPass,
    pub framebuffer: VkFramebuffer,
    pub subPassIndex: ::std::os::raw::c_int,
    pub currentFrameNumber: ::std::os::raw::c_ulonglong,
    pub safeFrameNumber: ::std::os::raw::c_ulonglong,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_UnityVulkanRecordingState() {
    assert_eq!(
        ::std::mem::size_of::<UnityVulkanRecordingState>(),
        88usize,
        concat!("Size of: ", stringify!(UnityVulkanRecordingState))
    );
    assert_eq!(
        ::std::mem::align_of::<UnityVulkanRecordingState>(),
        8usize,
        concat!("Alignment of ", stringify!(UnityVulkanRecordingState))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanRecordingState>())).commandBuffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanRecordingState),
            "::",
            stringify!(commandBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanRecordingState>())).commandBufferLevel as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanRecordingState),
            "::",
            stringify!(commandBufferLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanRecordingState>())).renderPass as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanRecordingState),
            "::",
            stringify!(renderPass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanRecordingState>())).framebuffer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanRecordingState),
            "::",
            stringify!(framebuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanRecordingState>())).subPassIndex as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanRecordingState),
            "::",
            stringify!(subPassIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanRecordingState>())).currentFrameNumber as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanRecordingState),
            "::",
            stringify!(currentFrameNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanRecordingState>())).safeFrameNumber as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanRecordingState),
            "::",
            stringify!(safeFrameNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanRecordingState>())).reserved as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanRecordingState),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for UnityVulkanRecordingState {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const UnityVulkanEventRenderPassPreCondition_kUnityVulkanRenderPass_DontCare:
    UnityVulkanEventRenderPassPreCondition = 0;
pub const UnityVulkanEventRenderPassPreCondition_kUnityVulkanRenderPass_EnsureInside:
    UnityVulkanEventRenderPassPreCondition = 1;
pub const UnityVulkanEventRenderPassPreCondition_kUnityVulkanRenderPass_EnsureOutside:
    UnityVulkanEventRenderPassPreCondition = 2;
pub type UnityVulkanEventRenderPassPreCondition = ::std::os::raw::c_uint;
pub const UnityVulkanGraphicsQueueAccess_kUnityVulkanGraphicsQueueAccess_DontCare:
    UnityVulkanGraphicsQueueAccess = 0;
pub const UnityVulkanGraphicsQueueAccess_kUnityVulkanGraphicsQueueAccess_Allow:
    UnityVulkanGraphicsQueueAccess = 1;
pub type UnityVulkanGraphicsQueueAccess = ::std::os::raw::c_uint;
pub const UnityVulkanEventConfigFlagBits_kUnityVulkanEventConfigFlag_EnsurePreviousFrameSubmission : UnityVulkanEventConfigFlagBits = 1 ;
pub const UnityVulkanEventConfigFlagBits_kUnityVulkanEventConfigFlag_FlushCommandBuffers:
    UnityVulkanEventConfigFlagBits = 2;
pub const UnityVulkanEventConfigFlagBits_kUnityVulkanEventConfigFlag_SyncWorkerThreads:
    UnityVulkanEventConfigFlagBits = 4;
pub const UnityVulkanEventConfigFlagBits_kUnityVulkanEventConfigFlag_ModifiesCommandBuffersState:
    UnityVulkanEventConfigFlagBits = 8;
pub type UnityVulkanEventConfigFlagBits = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanPluginEventConfig {
    pub renderPassPrecondition: UnityVulkanEventRenderPassPreCondition,
    pub graphicsQueueAccess: UnityVulkanGraphicsQueueAccess,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_UnityVulkanPluginEventConfig() {
    assert_eq!(
        ::std::mem::size_of::<UnityVulkanPluginEventConfig>(),
        12usize,
        concat!("Size of: ", stringify!(UnityVulkanPluginEventConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<UnityVulkanPluginEventConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(UnityVulkanPluginEventConfig))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanPluginEventConfig>())).renderPassPrecondition
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanPluginEventConfig),
            "::",
            stringify!(renderPassPrecondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanPluginEventConfig>())).graphicsQueueAccess as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanPluginEventConfig),
            "::",
            stringify!(graphicsQueueAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanPluginEventConfig>())).flags as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanPluginEventConfig),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for UnityVulkanPluginEventConfig {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "system" {
    #[link_name = "\u{1}_ZL21UnityVulkanWholeImage"]
    pub static UnityVulkanWholeImage: *const VkImageSubresource;
}
pub type UnityVulkanInitCallback = ::std::option::Option<
    unsafe extern "system" fn(
        getInstanceProcAddr: PFN_vkGetInstanceProcAddr,
        userdata: *mut ::std::os::raw::c_void,
    ) -> PFN_vkGetInstanceProcAddr,
>;
pub const UnityVulkanSwapchainMode_kUnityVulkanSwapchainMode_Default: UnityVulkanSwapchainMode = 0;
pub const UnityVulkanSwapchainMode_kUnityVulkanSwapchainMode_Offscreen: UnityVulkanSwapchainMode =
    1;
pub type UnityVulkanSwapchainMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanSwapchainConfiguration {
    pub mode: UnityVulkanSwapchainMode,
}
#[test]
fn bindgen_test_layout_UnityVulkanSwapchainConfiguration() {
    assert_eq!(
        ::std::mem::size_of::<UnityVulkanSwapchainConfiguration>(),
        4usize,
        concat!("Size of: ", stringify!(UnityVulkanSwapchainConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<UnityVulkanSwapchainConfiguration>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(UnityVulkanSwapchainConfiguration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityVulkanSwapchainConfiguration>())).mode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityVulkanSwapchainConfiguration),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for UnityVulkanSwapchainConfiguration {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsVulkan {
    pub InterceptInitialization: ::std::option::Option<
        unsafe extern "system" fn(
            func: UnityVulkanInitCallback,
            userdata: *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub InterceptVulkanAPI: ::std::option::Option<
        unsafe extern "system" fn(
            name: *const ::std::os::raw::c_char,
            func: PFN_vkVoidFunction,
        ) -> PFN_vkVoidFunction,
    >,
    pub ConfigureEvent: ::std::option::Option<
        unsafe extern "system" fn(
            eventID: ::std::os::raw::c_int,
            pluginEventConfig: *const UnityVulkanPluginEventConfig,
        ),
    >,
    pub Instance: ::std::option::Option<unsafe extern "system" fn() -> UnityVulkanInstance>,
    pub CommandRecordingState: ::std::option::Option<
        unsafe extern "system" fn(
            outCommandRecordingState: *mut UnityVulkanRecordingState,
            queueAccess: UnityVulkanGraphicsQueueAccess,
        ) -> bool,
    >,
    pub AccessTexture: ::std::option::Option<
        unsafe extern "system" fn(
            nativeTexture: *mut ::std::os::raw::c_void,
            subResource: *const VkImageSubresource,
            layout: VkImageLayout,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outImage: *mut UnityVulkanImage,
        ) -> bool,
    >,
    pub AccessRenderBufferTexture: ::std::option::Option<
        unsafe extern "system" fn(
            nativeRenderBuffer: UnityRenderBuffer,
            subResource: *const VkImageSubresource,
            layout: VkImageLayout,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outImage: *mut UnityVulkanImage,
        ) -> bool,
    >,
    pub AccessRenderBufferResolveTexture: ::std::option::Option<
        unsafe extern "system" fn(
            nativeRenderBuffer: UnityRenderBuffer,
            subResource: *const VkImageSubresource,
            layout: VkImageLayout,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outImage: *mut UnityVulkanImage,
        ) -> bool,
    >,
    pub AccessBuffer: ::std::option::Option<
        unsafe extern "system" fn(
            nativeBuffer: *mut ::std::os::raw::c_void,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outBuffer: *mut UnityVulkanBuffer,
        ) -> bool,
    >,
    pub EnsureOutsideRenderPass: ::std::option::Option<unsafe extern "system" fn()>,
    pub EnsureInsideRenderPass: ::std::option::Option<unsafe extern "system" fn()>,
    pub AccessQueue: ::std::option::Option<
        unsafe extern "system" fn(
            arg1: UnityRenderingEventAndData,
            eventId: ::std::os::raw::c_int,
            userData: *mut ::std::os::raw::c_void,
            flush: bool,
        ),
    >,
    pub ConfigureSwapchain: ::std::option::Option<
        unsafe extern "system" fn(swapChainConfig: *const UnityVulkanSwapchainConfiguration) -> bool,
    >,
    pub AccessTextureByID: ::std::option::Option<
        unsafe extern "system" fn(
            textureID: UnityTextureID,
            subResource: *const VkImageSubresource,
            layout: VkImageLayout,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outImage: *mut UnityVulkanImage,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_IUnityGraphicsVulkan() {
    assert_eq!(
        ::std::mem::size_of::<IUnityGraphicsVulkan>(),
        112usize,
        concat!("Size of: ", stringify!(IUnityGraphicsVulkan))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnityGraphicsVulkan>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnityGraphicsVulkan))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).InterceptInitialization as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(InterceptInitialization)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).InterceptVulkanAPI as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(InterceptVulkanAPI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).ConfigureEvent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(ConfigureEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).Instance as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(Instance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).CommandRecordingState as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(CommandRecordingState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).AccessTexture as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(AccessTexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).AccessRenderBufferTexture as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(AccessRenderBufferTexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).AccessRenderBufferResolveTexture
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(AccessRenderBufferResolveTexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).AccessBuffer as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(AccessBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).EnsureOutsideRenderPass as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(EnsureOutsideRenderPass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).EnsureInsideRenderPass as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(EnsureInsideRenderPass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).AccessQueue as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(AccessQueue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).ConfigureSwapchain as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(ConfigureSwapchain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityGraphicsVulkan>())).AccessTextureByID as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityGraphicsVulkan),
            "::",
            stringify!(AccessTextureByID)
        )
    );
}
pub const UnityRenderingExtEventType_kUnityRenderingExtEventSetStereoTarget:
    UnityRenderingExtEventType = 0;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventSetStereoEye:
    UnityRenderingExtEventType = 1;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventStereoRenderingDone:
    UnityRenderingExtEventType = 2;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventBeforeDrawCall:
    UnityRenderingExtEventType = 3;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventAfterDrawCall:
    UnityRenderingExtEventType = 4;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventCustomGrab: UnityRenderingExtEventType =
    5;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventCustomBlit: UnityRenderingExtEventType =
    6;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventUpdateTextureBegin:
    UnityRenderingExtEventType = 7;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventUpdateTextureEnd:
    UnityRenderingExtEventType = 8;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventUpdateTextureBeginV1:
    UnityRenderingExtEventType = 7;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventUpdateTextureEndV1:
    UnityRenderingExtEventType = 8;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventUpdateTextureBeginV2:
    UnityRenderingExtEventType = 9;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventUpdateTextureEndV2:
    UnityRenderingExtEventType = 10;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventCount: UnityRenderingExtEventType = 11;
pub const UnityRenderingExtEventType_kUnityRenderingExtUserEventsStart: UnityRenderingExtEventType =
    11;
pub type UnityRenderingExtEventType = ::std::os::raw::c_uint;
pub const UnityRenderingExtCustomBlitCommands_kUnityRenderingExtCustomBlitVRFlush:
    UnityRenderingExtCustomBlitCommands = 0;
pub const UnityRenderingExtCustomBlitCommands_kUnityRenderingExtCustomBlitCount:
    UnityRenderingExtCustomBlitCommands = 1;
pub const UnityRenderingExtCustomBlitCommands_kUnityRenderingExtUserCustomBlitStart:
    UnityRenderingExtCustomBlitCommands = 1;
pub type UnityRenderingExtCustomBlitCommands = ::std::os::raw::c_uint;
pub const UnityRenderingExtQueryType_kUnityRenderingExtQueryOverrideViewport:
    UnityRenderingExtQueryType = 1;
pub const UnityRenderingExtQueryType_kUnityRenderingExtQueryOverrideScissor:
    UnityRenderingExtQueryType = 2;
pub const UnityRenderingExtQueryType_kUnityRenderingExtQueryOverrideVROcclussionMesh:
    UnityRenderingExtQueryType = 4;
pub const UnityRenderingExtQueryType_kUnityRenderingExtQueryOverrideVRSinglePass:
    UnityRenderingExtQueryType = 8;
pub const UnityRenderingExtQueryType_kUnityRenderingExtQueryKeepOriginalDoubleWideWidth_DEPRECATED : UnityRenderingExtQueryType = 16 ;
pub const UnityRenderingExtQueryType_kUnityRenderingExtQueryRequestVRFlushCallback:
    UnityRenderingExtQueryType = 32;
pub type UnityRenderingExtQueryType = ::std::os::raw::c_uint;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatNone:
    UnityRenderingExtTextureFormat = 0;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatFirst:
    UnityRenderingExtTextureFormat = 0;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8_SRGB:
    UnityRenderingExtTextureFormat = 1;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8_SRGB:
    UnityRenderingExtTextureFormat = 2;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8_SRGB:
    UnityRenderingExtTextureFormat = 3;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8A8_SRGB:
    UnityRenderingExtTextureFormat = 4;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8_UNorm:
    UnityRenderingExtTextureFormat = 5;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8_UNorm:
    UnityRenderingExtTextureFormat = 6;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8_UNorm:
    UnityRenderingExtTextureFormat = 7;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8A8_UNorm:
    UnityRenderingExtTextureFormat = 8;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8_SNorm:
    UnityRenderingExtTextureFormat = 9;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8_SNorm:
    UnityRenderingExtTextureFormat = 10;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8_SNorm:
    UnityRenderingExtTextureFormat = 11;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8A8_SNorm:
    UnityRenderingExtTextureFormat = 12;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8_UInt:
    UnityRenderingExtTextureFormat = 13;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8_UInt:
    UnityRenderingExtTextureFormat = 14;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8_UInt:
    UnityRenderingExtTextureFormat = 15;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8A8_UInt:
    UnityRenderingExtTextureFormat = 16;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8_SInt:
    UnityRenderingExtTextureFormat = 17;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8_SInt:
    UnityRenderingExtTextureFormat = 18;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8_SInt:
    UnityRenderingExtTextureFormat = 19;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8A8_SInt:
    UnityRenderingExtTextureFormat = 20;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16_UNorm:
    UnityRenderingExtTextureFormat = 21;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16_UNorm:
    UnityRenderingExtTextureFormat = 22;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16_UNorm:
    UnityRenderingExtTextureFormat = 23;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16A16_UNorm:
    UnityRenderingExtTextureFormat = 24;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16_SNorm:
    UnityRenderingExtTextureFormat = 25;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16_SNorm:
    UnityRenderingExtTextureFormat = 26;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16_SNorm:
    UnityRenderingExtTextureFormat = 27;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16A16_SNorm:
    UnityRenderingExtTextureFormat = 28;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16_UInt:
    UnityRenderingExtTextureFormat = 29;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16_UInt:
    UnityRenderingExtTextureFormat = 30;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16_UInt:
    UnityRenderingExtTextureFormat = 31;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16A16_UInt:
    UnityRenderingExtTextureFormat = 32;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16_SInt:
    UnityRenderingExtTextureFormat = 33;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16_SInt:
    UnityRenderingExtTextureFormat = 34;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16_SInt:
    UnityRenderingExtTextureFormat = 35;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16A16_SInt:
    UnityRenderingExtTextureFormat = 36;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32_UInt:
    UnityRenderingExtTextureFormat = 37;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32_UInt:
    UnityRenderingExtTextureFormat = 38;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32B32_UInt:
    UnityRenderingExtTextureFormat = 39;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32B32A32_UInt:
    UnityRenderingExtTextureFormat = 40;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32_SInt:
    UnityRenderingExtTextureFormat = 41;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32_SInt:
    UnityRenderingExtTextureFormat = 42;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32B32_SInt:
    UnityRenderingExtTextureFormat = 43;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32B32A32_SInt:
    UnityRenderingExtTextureFormat = 44;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16_SFloat:
    UnityRenderingExtTextureFormat = 45;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16_SFloat:
    UnityRenderingExtTextureFormat = 46;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16_SFloat:
    UnityRenderingExtTextureFormat = 47;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16A16_SFloat:
    UnityRenderingExtTextureFormat = 48;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32_SFloat:
    UnityRenderingExtTextureFormat = 49;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32_SFloat:
    UnityRenderingExtTextureFormat = 50;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32B32_SFloat:
    UnityRenderingExtTextureFormat = 51;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32B32A32_SFloat:
    UnityRenderingExtTextureFormat = 52;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatL8_UNorm:
    UnityRenderingExtTextureFormat = 53;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA8_UNorm:
    UnityRenderingExtTextureFormat = 54;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA16_UNorm:
    UnityRenderingExtTextureFormat = 55;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8_SRGB:
    UnityRenderingExtTextureFormat = 56;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8A8_SRGB:
    UnityRenderingExtTextureFormat = 57;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8_UNorm:
    UnityRenderingExtTextureFormat = 58;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8A8_UNorm:
    UnityRenderingExtTextureFormat = 59;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8_SNorm:
    UnityRenderingExtTextureFormat = 60;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8A8_SNorm:
    UnityRenderingExtTextureFormat = 61;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8_UInt:
    UnityRenderingExtTextureFormat = 62;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8A8_UInt:
    UnityRenderingExtTextureFormat = 63;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8_SInt:
    UnityRenderingExtTextureFormat = 64;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8A8_SInt:
    UnityRenderingExtTextureFormat = 65;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR4G4B4A4_UNormPack16:
    UnityRenderingExtTextureFormat = 66;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB4G4R4A4_UNormPack16:
    UnityRenderingExtTextureFormat = 67;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR5G6B5_UNormPack16:
    UnityRenderingExtTextureFormat = 68;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB5G6R5_UNormPack16:
    UnityRenderingExtTextureFormat = 69;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR5G5B5A1_UNormPack16:
    UnityRenderingExtTextureFormat = 70;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB5G5R5A1_UNormPack16:
    UnityRenderingExtTextureFormat = 71;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA1R5G5B5_UNormPack16:
    UnityRenderingExtTextureFormat = 72;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatE5B9G9R9_UFloatPack32:
    UnityRenderingExtTextureFormat = 73;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB10G11R11_UFloatPack32:
    UnityRenderingExtTextureFormat = 74;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2B10G10R10_UNormPack32:
    UnityRenderingExtTextureFormat = 75;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2B10G10R10_UIntPack32:
    UnityRenderingExtTextureFormat = 76;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2B10G10R10_SIntPack32:
    UnityRenderingExtTextureFormat = 77;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2R10G10B10_UNormPack32:
    UnityRenderingExtTextureFormat = 78;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2R10G10B10_UIntPack32:
    UnityRenderingExtTextureFormat = 79;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2R10G10B10_SIntPack32:
    UnityRenderingExtTextureFormat = 80;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2R10G10B10_XRSRGBPack32:
    UnityRenderingExtTextureFormat = 81;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2R10G10B10_XRUNormPack32:
    UnityRenderingExtTextureFormat = 82;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR10G10B10_XRSRGBPack32:
    UnityRenderingExtTextureFormat = 83;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR10G10B10_XRUNormPack32:
    UnityRenderingExtTextureFormat = 84;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA10R10G10B10_XRSRGBPack32:
    UnityRenderingExtTextureFormat = 85;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA10R10G10B10_XRUNormPack32:
    UnityRenderingExtTextureFormat = 86;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA8R8G8B8_SRGB:
    UnityRenderingExtTextureFormat = 87;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA8R8G8B8_UNorm:
    UnityRenderingExtTextureFormat = 88;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA32R32G32B32_SFloat:
    UnityRenderingExtTextureFormat = 89;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatD16_UNorm:
    UnityRenderingExtTextureFormat = 90;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatD24_UNorm:
    UnityRenderingExtTextureFormat = 91;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatD24_UNorm_S8_UInt:
    UnityRenderingExtTextureFormat = 92;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatD32_SFloat:
    UnityRenderingExtTextureFormat = 93;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatD32_SFloat_S8_Uint:
    UnityRenderingExtTextureFormat = 94;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatS8_Uint:
    UnityRenderingExtTextureFormat = 95;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_DXT1_SRGB:
    UnityRenderingExtTextureFormat = 96;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_DXT1_UNorm:
    UnityRenderingExtTextureFormat = 97;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_DXT3_SRGB:
    UnityRenderingExtTextureFormat = 98;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_DXT3_UNorm:
    UnityRenderingExtTextureFormat = 99;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_DXT5_SRGB:
    UnityRenderingExtTextureFormat = 100;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_DXT5_UNorm:
    UnityRenderingExtTextureFormat = 101;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR_BC4_UNorm:
    UnityRenderingExtTextureFormat = 102;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR_BC4_SNorm:
    UnityRenderingExtTextureFormat = 103;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRG_BC5_UNorm:
    UnityRenderingExtTextureFormat = 104;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRG_BC5_SNorm:
    UnityRenderingExtTextureFormat = 105;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_BC6H_UFloat:
    UnityRenderingExtTextureFormat = 106;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_BC6H_SFloat:
    UnityRenderingExtTextureFormat = 107;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_BC7_SRGB:
    UnityRenderingExtTextureFormat = 108;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_BC7_UNorm:
    UnityRenderingExtTextureFormat = 109;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_PVRTC_2Bpp_SRGB:
    UnityRenderingExtTextureFormat = 110;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_PVRTC_2Bpp_UNorm:
    UnityRenderingExtTextureFormat = 111;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_PVRTC_4Bpp_SRGB:
    UnityRenderingExtTextureFormat = 112;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_PVRTC_4Bpp_UNorm:
    UnityRenderingExtTextureFormat = 113;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_PVRTC_2Bpp_SRGB:
    UnityRenderingExtTextureFormat = 114;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_PVRTC_2Bpp_UNorm:
    UnityRenderingExtTextureFormat = 115;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_PVRTC_4Bpp_SRGB:
    UnityRenderingExtTextureFormat = 116;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_PVRTC_4Bpp_UNorm:
    UnityRenderingExtTextureFormat = 117;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_ETC_UNorm:
    UnityRenderingExtTextureFormat = 118;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_ETC2_SRGB:
    UnityRenderingExtTextureFormat = 119;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_ETC2_UNorm:
    UnityRenderingExtTextureFormat = 120;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_A1_ETC2_SRGB:
    UnityRenderingExtTextureFormat = 121;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_A1_ETC2_UNorm:
    UnityRenderingExtTextureFormat = 122;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ETC2_SRGB:
    UnityRenderingExtTextureFormat = 123;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ETC2_UNorm:
    UnityRenderingExtTextureFormat = 124;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR_EAC_UNorm:
    UnityRenderingExtTextureFormat = 125;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR_EAC_SNorm:
    UnityRenderingExtTextureFormat = 126;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRG_EAC_UNorm:
    UnityRenderingExtTextureFormat = 127;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRG_EAC_SNorm:
    UnityRenderingExtTextureFormat = 128;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC4X4_SRGB:
    UnityRenderingExtTextureFormat = 129;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC4X4_UNorm:
    UnityRenderingExtTextureFormat = 130;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC5X5_SRGB:
    UnityRenderingExtTextureFormat = 131;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC5X5_UNorm:
    UnityRenderingExtTextureFormat = 132;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC6X6_SRGB:
    UnityRenderingExtTextureFormat = 133;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC6X6_UNorm:
    UnityRenderingExtTextureFormat = 134;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC8X8_SRGB:
    UnityRenderingExtTextureFormat = 135;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC8X8_UNorm:
    UnityRenderingExtTextureFormat = 136;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC10X10_SRGB:
    UnityRenderingExtTextureFormat = 137;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC10X10_UNorm:
    UnityRenderingExtTextureFormat = 138;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC12X12_SRGB:
    UnityRenderingExtTextureFormat = 139;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC12X12_UNorm:
    UnityRenderingExtTextureFormat = 140;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatYUV2:
    UnityRenderingExtTextureFormat = 141;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatDepthAuto:
    UnityRenderingExtTextureFormat = 142;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatShadowAuto:
    UnityRenderingExtTextureFormat = 143;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatVideoAuto:
    UnityRenderingExtTextureFormat = 144;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC4X4_UFloat:
    UnityRenderingExtTextureFormat = 145;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC5X5_UFloat:
    UnityRenderingExtTextureFormat = 146;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC6X6_UFloat:
    UnityRenderingExtTextureFormat = 147;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC8X8_UFloat:
    UnityRenderingExtTextureFormat = 148;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC10X10_UFloat:
    UnityRenderingExtTextureFormat = 149;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC12X12_UFloat:
    UnityRenderingExtTextureFormat = 150;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatLast:
    UnityRenderingExtTextureFormat = 150;
pub type UnityRenderingExtTextureFormat = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityRenderingExtBeforeDrawCallParams {
    pub vertexShader: *mut ::std::os::raw::c_void,
    pub fragmentShader: *mut ::std::os::raw::c_void,
    pub geometryShader: *mut ::std::os::raw::c_void,
    pub hullShader: *mut ::std::os::raw::c_void,
    pub domainShader: *mut ::std::os::raw::c_void,
    pub eyeIndex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_UnityRenderingExtBeforeDrawCallParams() {
    assert_eq!(
        ::std::mem::size_of::<UnityRenderingExtBeforeDrawCallParams>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(UnityRenderingExtBeforeDrawCallParams)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<UnityRenderingExtBeforeDrawCallParams>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(UnityRenderingExtBeforeDrawCallParams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtBeforeDrawCallParams>())).vertexShader
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtBeforeDrawCallParams),
            "::",
            stringify!(vertexShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtBeforeDrawCallParams>())).fragmentShader
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtBeforeDrawCallParams),
            "::",
            stringify!(fragmentShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtBeforeDrawCallParams>())).geometryShader
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtBeforeDrawCallParams),
            "::",
            stringify!(geometryShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtBeforeDrawCallParams>())).hullShader as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtBeforeDrawCallParams),
            "::",
            stringify!(hullShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtBeforeDrawCallParams>())).domainShader
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtBeforeDrawCallParams),
            "::",
            stringify!(domainShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtBeforeDrawCallParams>())).eyeIndex as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtBeforeDrawCallParams),
            "::",
            stringify!(eyeIndex)
        )
    );
}
impl Default for UnityRenderingExtBeforeDrawCallParams {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityRenderingExtCustomBlitParams {
    pub source: UnityTextureID,
    pub destination: UnityRenderBuffer,
    pub command: ::std::os::raw::c_uint,
    pub commandParam: ::std::os::raw::c_uint,
    pub commandFlags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_UnityRenderingExtCustomBlitParams() {
    assert_eq!(
        ::std::mem::size_of::<UnityRenderingExtCustomBlitParams>(),
        32usize,
        concat!("Size of: ", stringify!(UnityRenderingExtCustomBlitParams))
    );
    assert_eq!(
        ::std::mem::align_of::<UnityRenderingExtCustomBlitParams>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(UnityRenderingExtCustomBlitParams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtCustomBlitParams>())).source as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtCustomBlitParams),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtCustomBlitParams>())).destination as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtCustomBlitParams),
            "::",
            stringify!(destination)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtCustomBlitParams>())).command as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtCustomBlitParams),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtCustomBlitParams>())).commandParam as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtCustomBlitParams),
            "::",
            stringify!(commandParam)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtCustomBlitParams>())).commandFlags as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtCustomBlitParams),
            "::",
            stringify!(commandFlags)
        )
    );
}
impl Default for UnityRenderingExtCustomBlitParams {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityRenderingExtTextureUpdateParamsV1 {
    pub texData: *mut ::std::os::raw::c_void,
    pub userData: ::std::os::raw::c_uint,
    pub textureID: ::std::os::raw::c_uint,
    pub format: UnityRenderingExtTextureFormat,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub bpp: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_UnityRenderingExtTextureUpdateParamsV1() {
    assert_eq!(
        ::std::mem::size_of::<UnityRenderingExtTextureUpdateParamsV1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<UnityRenderingExtTextureUpdateParamsV1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(UnityRenderingExtTextureUpdateParamsV1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV1>())).texData as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV1),
            "::",
            stringify!(texData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV1>())).userData as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV1),
            "::",
            stringify!(userData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV1>())).textureID as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV1),
            "::",
            stringify!(textureID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV1>())).format as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV1),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV1>())).width as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV1),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV1>())).height as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV1),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV1>())).bpp as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV1),
            "::",
            stringify!(bpp)
        )
    );
}
impl Default for UnityRenderingExtTextureUpdateParamsV1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type UnityRenderingExtTextureUpdateParams = UnityRenderingExtTextureUpdateParamsV1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityRenderingExtTextureUpdateParamsV2 {
    pub texData: *mut ::std::os::raw::c_void,
    pub textureID: isize,
    pub userData: ::std::os::raw::c_uint,
    pub format: UnityRenderingExtTextureFormat,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub bpp: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_UnityRenderingExtTextureUpdateParamsV2() {
    assert_eq!(
        ::std::mem::size_of::<UnityRenderingExtTextureUpdateParamsV2>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<UnityRenderingExtTextureUpdateParamsV2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(UnityRenderingExtTextureUpdateParamsV2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV2>())).texData as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV2),
            "::",
            stringify!(texData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV2>())).textureID as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV2),
            "::",
            stringify!(textureID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV2>())).userData as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV2),
            "::",
            stringify!(userData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV2>())).format as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV2),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV2>())).width as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV2),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV2>())).height as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV2),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityRenderingExtTextureUpdateParamsV2>())).bpp as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityRenderingExtTextureUpdateParamsV2),
            "::",
            stringify!(bpp)
        )
    );
}
impl Default for UnityRenderingExtTextureUpdateParamsV2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "system" {
    pub fn UnityRenderingExtEvent(
        event: UnityRenderingExtEventType,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "system" {
    pub fn UnityRenderingExtQuery(query: UnityRenderingExtQueryType) -> bool;
}
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused0:
    UnityShaderCompilerExtCompilerPlatform = 0;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused1:
    UnityShaderCompilerExtCompilerPlatform = 1;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused2:
    UnityShaderCompilerExtCompilerPlatform = 2;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused3:
    UnityShaderCompilerExtCompilerPlatform = 3;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformD3D11:
    UnityShaderCompilerExtCompilerPlatform = 4;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformGLES20:
    UnityShaderCompilerExtCompilerPlatform = 5;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused6:
    UnityShaderCompilerExtCompilerPlatform = 6;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused7:
    UnityShaderCompilerExtCompilerPlatform = 7;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused8:
    UnityShaderCompilerExtCompilerPlatform = 8;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformGLES3Plus:
    UnityShaderCompilerExtCompilerPlatform = 9;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused10:
    UnityShaderCompilerExtCompilerPlatform = 10;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformPS4:
    UnityShaderCompilerExtCompilerPlatform = 11;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformXboxOne:
    UnityShaderCompilerExtCompilerPlatform = 12;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused13:
    UnityShaderCompilerExtCompilerPlatform = 13;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformMetal:
    UnityShaderCompilerExtCompilerPlatform = 14;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformOpenGLCore:
    UnityShaderCompilerExtCompilerPlatform = 15;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused16:
    UnityShaderCompilerExtCompilerPlatform = 16;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused17:
    UnityShaderCompilerExtCompilerPlatform = 17;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformVulkan:
    UnityShaderCompilerExtCompilerPlatform = 18;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformSwitch:
    UnityShaderCompilerExtCompilerPlatform = 19;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformXboxOneD3D12:
    UnityShaderCompilerExtCompilerPlatform = 20;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformCount:
    UnityShaderCompilerExtCompilerPlatform = 21;
pub type UnityShaderCompilerExtCompilerPlatform = ::std::os::raw::c_uint;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderNone:
    UnityShaderCompilerExtShaderType = 0;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderVertex:
    UnityShaderCompilerExtShaderType = 1;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderFragment:
    UnityShaderCompilerExtShaderType = 2;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderGeometry:
    UnityShaderCompilerExtShaderType = 3;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderHull:
    UnityShaderCompilerExtShaderType = 4;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderDomain:
    UnityShaderCompilerExtShaderType = 5;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderRayTracing:
    UnityShaderCompilerExtShaderType = 6;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderTypeCount:
    UnityShaderCompilerExtShaderType = 7;
pub type UnityShaderCompilerExtShaderType = ::std::os::raw::c_uint;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetUnknown:
    UnityShaderCompilerExtGPUProgramType = 0;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLLegacy:
    UnityShaderCompilerExtGPUProgramType = 1;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLES31AEP:
    UnityShaderCompilerExtGPUProgramType = 2;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLES31:
    UnityShaderCompilerExtGPUProgramType = 3;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLES3:
    UnityShaderCompilerExtGPUProgramType = 4;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLES:
    UnityShaderCompilerExtGPUProgramType = 5;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLCore32:
    UnityShaderCompilerExtGPUProgramType = 6;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLCore41:
    UnityShaderCompilerExtGPUProgramType = 7;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLCore43:
    UnityShaderCompilerExtGPUProgramType = 8;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX9VertexSM20 : UnityShaderCompilerExtGPUProgramType = 9 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX9VertexSM30 : UnityShaderCompilerExtGPUProgramType = 10 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX9PixelSM20 : UnityShaderCompilerExtGPUProgramType = 11 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX9PixelSM30 : UnityShaderCompilerExtGPUProgramType = 12 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX10Level9Vertex : UnityShaderCompilerExtGPUProgramType = 13 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX10Level9Pixel : UnityShaderCompilerExtGPUProgramType = 14 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11VertexSM40 : UnityShaderCompilerExtGPUProgramType = 15 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11VertexSM50 : UnityShaderCompilerExtGPUProgramType = 16 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11PixelSM40 : UnityShaderCompilerExtGPUProgramType = 17 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11PixelSM50 : UnityShaderCompilerExtGPUProgramType = 18 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11GeometrySM40 : UnityShaderCompilerExtGPUProgramType = 19 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11GeometrySM50 : UnityShaderCompilerExtGPUProgramType = 20 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11HullSM50 : UnityShaderCompilerExtGPUProgramType = 21 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11DomainSM50 : UnityShaderCompilerExtGPUProgramType = 22 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetMetalVS:
    UnityShaderCompilerExtGPUProgramType = 23;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetMetalFS:
    UnityShaderCompilerExtGPUProgramType = 24;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetSPIRV:
    UnityShaderCompilerExtGPUProgramType = 25;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetUnused1:
    UnityShaderCompilerExtGPUProgramType = 26;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetUnused2:
    UnityShaderCompilerExtGPUProgramType = 27;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetUnused3:
    UnityShaderCompilerExtGPUProgramType = 28;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetUnused4:
    UnityShaderCompilerExtGPUProgramType = 29;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetUnused5:
    UnityShaderCompilerExtGPUProgramType = 30;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetRayTracing:
    UnityShaderCompilerExtGPUProgramType = 31;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetCount:
    UnityShaderCompilerExtGPUProgramType = 32;
pub type UnityShaderCompilerExtGPUProgramType = ::std::os::raw::c_uint;
pub const UnityShaderCompilerExtGPUProgram_kUnityShaderCompilerExtGPUProgramVS:
    UnityShaderCompilerExtGPUProgram = 2;
pub const UnityShaderCompilerExtGPUProgram_kUnityShaderCompilerExtGPUProgramPS:
    UnityShaderCompilerExtGPUProgram = 4;
pub const UnityShaderCompilerExtGPUProgram_kUnityShaderCompilerExtGPUProgramGS:
    UnityShaderCompilerExtGPUProgram = 8;
pub const UnityShaderCompilerExtGPUProgram_kUnityShaderCompilerExtGPUProgramHS:
    UnityShaderCompilerExtGPUProgram = 16;
pub const UnityShaderCompilerExtGPUProgram_kUnityShaderCompilerExtGPUProgramDS:
    UnityShaderCompilerExtGPUProgram = 32;
pub const UnityShaderCompilerExtGPUProgram_kUnityShaderCompilerExtGPUProgramCustom:
    UnityShaderCompilerExtGPUProgram = 128;
pub type UnityShaderCompilerExtGPUProgram = ::std::os::raw::c_uint;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtEventCreateCustomSourceVariant:
    UnityShaderCompilerExtEventType = 0;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtEventCreateCustomSourceVariantCleanup : UnityShaderCompilerExtEventType = 1 ;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtEventCreateCustomBinaryVariant:
    UnityShaderCompilerExtEventType = 2;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtEventCreateCustomBinaryVariantCleanup : UnityShaderCompilerExtEventType = 3 ;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtEventPluginConfigure:
    UnityShaderCompilerExtEventType = 4;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtEventCount:
    UnityShaderCompilerExtEventType = 5;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtUserEventsStart:
    UnityShaderCompilerExtEventType = 5;
pub type UnityShaderCompilerExtEventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityShaderCompilerExtCustomSourceVariantParams {
    pub outputSnippet: *mut ::std::os::raw::c_char,
    pub outputKeywords: *mut ::std::os::raw::c_char,
    pub inputSnippet: *const ::std::os::raw::c_char,
    pub vr: bool,
    pub platform: UnityShaderCompilerExtCompilerPlatform,
    pub shaderType: UnityShaderCompilerExtShaderType,
}
#[test]
fn bindgen_test_layout_UnityShaderCompilerExtCustomSourceVariantParams() {
    assert_eq!(
        ::std::mem::size_of::<UnityShaderCompilerExtCustomSourceVariantParams>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(UnityShaderCompilerExtCustomSourceVariantParams)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<UnityShaderCompilerExtCustomSourceVariantParams>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(UnityShaderCompilerExtCustomSourceVariantParams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityShaderCompilerExtCustomSourceVariantParams>()))
                .outputSnippet as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityShaderCompilerExtCustomSourceVariantParams),
            "::",
            stringify!(outputSnippet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityShaderCompilerExtCustomSourceVariantParams>()))
                .outputKeywords as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityShaderCompilerExtCustomSourceVariantParams),
            "::",
            stringify!(outputKeywords)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityShaderCompilerExtCustomSourceVariantParams>())).inputSnippet
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityShaderCompilerExtCustomSourceVariantParams),
            "::",
            stringify!(inputSnippet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityShaderCompilerExtCustomSourceVariantParams>())).vr
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityShaderCompilerExtCustomSourceVariantParams),
            "::",
            stringify!(vr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityShaderCompilerExtCustomSourceVariantParams>())).platform
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityShaderCompilerExtCustomSourceVariantParams),
            "::",
            stringify!(platform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityShaderCompilerExtCustomSourceVariantParams>())).shaderType
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityShaderCompilerExtCustomSourceVariantParams),
            "::",
            stringify!(shaderType)
        )
    );
}
impl Default for UnityShaderCompilerExtCustomSourceVariantParams {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityShaderCompilerExtCustomBinaryVariantParams {
    pub outputBinaryShader: *mut *mut ::std::os::raw::c_void,
    pub inputByteCode: *const ::std::os::raw::c_uchar,
    pub inputByteCodeSize: ::std::os::raw::c_uint,
    pub programTypeMask: ::std::os::raw::c_uint,
    pub platform: UnityShaderCompilerExtCompilerPlatform,
}
#[test]
fn bindgen_test_layout_UnityShaderCompilerExtCustomBinaryVariantParams() {
    assert_eq!(
        ::std::mem::size_of::<UnityShaderCompilerExtCustomBinaryVariantParams>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(UnityShaderCompilerExtCustomBinaryVariantParams)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<UnityShaderCompilerExtCustomBinaryVariantParams>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(UnityShaderCompilerExtCustomBinaryVariantParams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityShaderCompilerExtCustomBinaryVariantParams>()))
                .outputBinaryShader as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityShaderCompilerExtCustomBinaryVariantParams),
            "::",
            stringify!(outputBinaryShader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityShaderCompilerExtCustomBinaryVariantParams>()))
                .inputByteCode as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityShaderCompilerExtCustomBinaryVariantParams),
            "::",
            stringify!(inputByteCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityShaderCompilerExtCustomBinaryVariantParams>()))
                .inputByteCodeSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityShaderCompilerExtCustomBinaryVariantParams),
            "::",
            stringify!(inputByteCodeSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityShaderCompilerExtCustomBinaryVariantParams>()))
                .programTypeMask as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityShaderCompilerExtCustomBinaryVariantParams),
            "::",
            stringify!(programTypeMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityShaderCompilerExtCustomBinaryVariantParams>())).platform
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityShaderCompilerExtCustomBinaryVariantParams),
            "::",
            stringify!(platform)
        )
    );
}
impl Default for UnityShaderCompilerExtCustomBinaryVariantParams {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct IUnityShaderCompilerExtPluginConfigure__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct IUnityShaderCompilerExtPluginConfigure {
    pub vtable_: *const IUnityShaderCompilerExtPluginConfigure__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_IUnityShaderCompilerExtPluginConfigure() {
    assert_eq!(
        ::std::mem::size_of::<IUnityShaderCompilerExtPluginConfigure>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(IUnityShaderCompilerExtPluginConfigure)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<IUnityShaderCompilerExtPluginConfigure>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(IUnityShaderCompilerExtPluginConfigure)
        )
    );
}
impl Default for IUnityShaderCompilerExtPluginConfigure {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "system" {
    pub fn UnityShaderCompilerExtEvent(
        event: UnityShaderCompilerExtEventType,
        data: *mut ::std::os::raw::c_void,
    );
}
pub type UnityProfilerMarkerId = u32;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryRender:
    UnityBuiltinProfilerCategory_ = 0;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryScripts:
    UnityBuiltinProfilerCategory_ = 1;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryManagedJobs:
    UnityBuiltinProfilerCategory_ = 2;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryBurstJobs:
    UnityBuiltinProfilerCategory_ = 3;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryGUI: UnityBuiltinProfilerCategory_ =
    4;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryPhysics:
    UnityBuiltinProfilerCategory_ = 5;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryAnimation:
    UnityBuiltinProfilerCategory_ = 6;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryAI: UnityBuiltinProfilerCategory_ = 7;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryAudio: UnityBuiltinProfilerCategory_ =
    8;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryAudioJob:
    UnityBuiltinProfilerCategory_ = 9;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryAudioUpdateJob:
    UnityBuiltinProfilerCategory_ = 10;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryVideo: UnityBuiltinProfilerCategory_ =
    11;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryParticles:
    UnityBuiltinProfilerCategory_ = 12;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryGi: UnityBuiltinProfilerCategory_ =
    13;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryNetwork:
    UnityBuiltinProfilerCategory_ = 14;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryLoading:
    UnityBuiltinProfilerCategory_ = 15;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryOther: UnityBuiltinProfilerCategory_ =
    16;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryGC: UnityBuiltinProfilerCategory_ =
    17;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryVSync: UnityBuiltinProfilerCategory_ =
    18;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryOverhead:
    UnityBuiltinProfilerCategory_ = 19;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryPlayerLoop:
    UnityBuiltinProfilerCategory_ = 20;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryDirector:
    UnityBuiltinProfilerCategory_ = 21;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryVR: UnityBuiltinProfilerCategory_ =
    22;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryAllocation:
    UnityBuiltinProfilerCategory_ = 23;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryInternal:
    UnityBuiltinProfilerCategory_ = 24;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryFileIO:
    UnityBuiltinProfilerCategory_ = 25;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryUISystemLayout:
    UnityBuiltinProfilerCategory_ = 26;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryUISystemRender:
    UnityBuiltinProfilerCategory_ = 27;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryVFX: UnityBuiltinProfilerCategory_ =
    28;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryBuildInterface:
    UnityBuiltinProfilerCategory_ = 29;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryInput: UnityBuiltinProfilerCategory_ =
    30;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryVirtualTexturing:
    UnityBuiltinProfilerCategory_ = 31;
pub type UnityBuiltinProfilerCategory_ = ::std::os::raw::c_uint;
pub type UnityProfilerCategoryId = u16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityProfilerCategoryDesc {
    pub id: UnityProfilerCategoryId,
    pub reserved0: u16,
    pub rgbaColor: u32,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_UnityProfilerCategoryDesc() {
    assert_eq!(
        ::std::mem::size_of::<UnityProfilerCategoryDesc>(),
        16usize,
        concat!("Size of: ", stringify!(UnityProfilerCategoryDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<UnityProfilerCategoryDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(UnityProfilerCategoryDesc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityProfilerCategoryDesc>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerCategoryDesc),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityProfilerCategoryDesc>())).reserved0 as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerCategoryDesc),
            "::",
            stringify!(reserved0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityProfilerCategoryDesc>())).rgbaColor as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerCategoryDesc),
            "::",
            stringify!(rgbaColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityProfilerCategoryDesc>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerCategoryDesc),
            "::",
            stringify!(name)
        )
    );
}
impl Default for UnityProfilerCategoryDesc {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagDefault: UnityProfilerMarkerFlag_ = 0;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagScriptUser: UnityProfilerMarkerFlag_ = 2;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagScriptInvoke: UnityProfilerMarkerFlag_ =
    32;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagScriptEnterLeave:
    UnityProfilerMarkerFlag_ = 64;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagAvailabilityEditor:
    UnityProfilerMarkerFlag_ = 4;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagAvailabilityNonDev:
    UnityProfilerMarkerFlag_ = 8;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagWarning: UnityProfilerMarkerFlag_ = 16;
pub const UnityProfilerMarkerFlag__kCounter: UnityProfilerMarkerFlag_ = 128;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagVerbosityDebug:
    UnityProfilerMarkerFlag_ = 1024;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagVerbosityInternal:
    UnityProfilerMarkerFlag_ = 2048;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagVerbosityAdvanced:
    UnityProfilerMarkerFlag_ = 4096;
pub type UnityProfilerMarkerFlag_ = ::std::os::raw::c_uint;
pub type UnityProfilerMarkerFlags = u16;
pub const UnityProfilerMarkerEventType__kUnityProfilerMarkerEventTypeBegin:
    UnityProfilerMarkerEventType_ = 0;
pub const UnityProfilerMarkerEventType__kUnityProfilerMarkerEventTypeEnd:
    UnityProfilerMarkerEventType_ = 1;
pub const UnityProfilerMarkerEventType__kUnityProfilerMarkerEventTypeSingle:
    UnityProfilerMarkerEventType_ = 2;
pub type UnityProfilerMarkerEventType_ = ::std::os::raw::c_uint;
pub type UnityProfilerMarkerEventType = u16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityProfilerMarkerDesc {
    pub callback: *const ::std::os::raw::c_void,
    pub id: UnityProfilerMarkerId,
    pub flags: UnityProfilerMarkerFlags,
    pub categoryId: UnityProfilerCategoryId,
    pub name: *const ::std::os::raw::c_char,
    pub metaDataDesc: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_UnityProfilerMarkerDesc() {
    assert_eq!(
        ::std::mem::size_of::<UnityProfilerMarkerDesc>(),
        32usize,
        concat!("Size of: ", stringify!(UnityProfilerMarkerDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<UnityProfilerMarkerDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(UnityProfilerMarkerDesc))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityProfilerMarkerDesc>())).callback as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerMarkerDesc),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityProfilerMarkerDesc>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerMarkerDesc),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityProfilerMarkerDesc>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerMarkerDesc),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityProfilerMarkerDesc>())).categoryId as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerMarkerDesc),
            "::",
            stringify!(categoryId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityProfilerMarkerDesc>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerMarkerDesc),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityProfilerMarkerDesc>())).metaDataDesc as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerMarkerDesc),
            "::",
            stringify!(metaDataDesc)
        )
    );
}
impl Default for UnityProfilerMarkerDesc {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeNone:
    UnityProfilerMarkerDataType_ = 0;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeInstanceId:
    UnityProfilerMarkerDataType_ = 1;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeInt32:
    UnityProfilerMarkerDataType_ = 2;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeUInt32:
    UnityProfilerMarkerDataType_ = 3;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeInt64:
    UnityProfilerMarkerDataType_ = 4;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeUInt64:
    UnityProfilerMarkerDataType_ = 5;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeFloat:
    UnityProfilerMarkerDataType_ = 6;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeDouble:
    UnityProfilerMarkerDataType_ = 7;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeString:
    UnityProfilerMarkerDataType_ = 8;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeString16:
    UnityProfilerMarkerDataType_ = 9;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeBlob8:
    UnityProfilerMarkerDataType_ = 11;
pub type UnityProfilerMarkerDataType_ = ::std::os::raw::c_uint;
pub type UnityProfilerMarkerDataType = u8;
pub const UnityProfilerMarkerDataUnit__kUnityProfilerMarkerDataUnitUndefined:
    UnityProfilerMarkerDataUnit_ = 0;
pub const UnityProfilerMarkerDataUnit__kUnityProfilerMarkerDataUnitTimeNanoseconds:
    UnityProfilerMarkerDataUnit_ = 1;
pub const UnityProfilerMarkerDataUnit__kUnityProfilerMarkerDataUnitBytes:
    UnityProfilerMarkerDataUnit_ = 2;
pub const UnityProfilerMarkerDataUnit__kUnityProfilerMarkerDataUnitCount:
    UnityProfilerMarkerDataUnit_ = 3;
pub const UnityProfilerMarkerDataUnit__kUnityProfilerMarkerDataUnitPercent:
    UnityProfilerMarkerDataUnit_ = 4;
pub const UnityProfilerMarkerDataUnit__kUnityProfilerMarkerDataUnitFrequencyHz:
    UnityProfilerMarkerDataUnit_ = 5;
pub type UnityProfilerMarkerDataUnit_ = ::std::os::raw::c_uint;
pub type UnityProfilerMarkerDataUnit = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityProfilerMarkerData {
    pub type_: UnityProfilerMarkerDataType,
    pub reserved0: u8,
    pub reserved1: u16,
    pub size: u32,
    pub ptr: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_UnityProfilerMarkerData() {
    assert_eq!(
        ::std::mem::size_of::<UnityProfilerMarkerData>(),
        16usize,
        concat!("Size of: ", stringify!(UnityProfilerMarkerData))
    );
    assert_eq!(
        ::std::mem::align_of::<UnityProfilerMarkerData>(),
        8usize,
        concat!("Alignment of ", stringify!(UnityProfilerMarkerData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityProfilerMarkerData>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerMarkerData),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityProfilerMarkerData>())).reserved0 as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerMarkerData),
            "::",
            stringify!(reserved0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UnityProfilerMarkerData>())).reserved1 as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerMarkerData),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityProfilerMarkerData>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerMarkerData),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnityProfilerMarkerData>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UnityProfilerMarkerData),
            "::",
            stringify!(ptr)
        )
    );
}
impl Default for UnityProfilerMarkerData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const UnityProfilerFlowEventType__kUnityProfilerFlowEventTypeBegin:
    UnityProfilerFlowEventType_ = 0;
pub const UnityProfilerFlowEventType__kUnityProfilerFlowEventTypeNext: UnityProfilerFlowEventType_ =
    1;
pub const UnityProfilerFlowEventType__kUnityProfilerFlowEventTypeEnd: UnityProfilerFlowEventType_ =
    2;
pub type UnityProfilerFlowEventType_ = ::std::os::raw::c_uint;
pub type UnityProfilerFlowEventType = u8;
pub type UnityProfilerThreadId = u64;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityProfiler {
    pub EmitEvent: ::std::option::Option<
        unsafe extern "system" fn(
            markerDesc: *const UnityProfilerMarkerDesc,
            eventType: UnityProfilerMarkerEventType,
            eventDataCount: u16,
            eventData: *const UnityProfilerMarkerData,
        ),
    >,
    pub IsEnabled: ::std::option::Option<unsafe extern "system" fn() -> ::std::os::raw::c_int>,
    pub IsAvailable: ::std::option::Option<unsafe extern "system" fn() -> ::std::os::raw::c_int>,
    pub CreateMarker: ::std::option::Option<
        unsafe extern "system" fn(
            desc: *mut *const UnityProfilerMarkerDesc,
            name: *const ::std::os::raw::c_char,
            category: UnityProfilerCategoryId,
            flags: UnityProfilerMarkerFlags,
            eventDataCount: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub SetMarkerMetadataName: ::std::option::Option<
        unsafe extern "system" fn(
            desc: *const UnityProfilerMarkerDesc,
            index: ::std::os::raw::c_int,
            metadataName: *const ::std::os::raw::c_char,
            metadataType: UnityProfilerMarkerDataType,
            metadataUnit: UnityProfilerMarkerDataUnit,
        ) -> ::std::os::raw::c_int,
    >,
    pub RegisterThread: ::std::option::Option<
        unsafe extern "system" fn(
            threadId: *mut UnityProfilerThreadId,
            groupName: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterThread: ::std::option::Option<
        unsafe extern "system" fn(threadId: UnityProfilerThreadId) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_IUnityProfiler() {
    assert_eq!(
        ::std::mem::size_of::<IUnityProfiler>(),
        56usize,
        concat!("Size of: ", stringify!(IUnityProfiler))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnityProfiler>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnityProfiler))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityProfiler>())).EmitEvent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityProfiler),
            "::",
            stringify!(EmitEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityProfiler>())).IsEnabled as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityProfiler),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityProfiler>())).IsAvailable as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityProfiler),
            "::",
            stringify!(IsAvailable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityProfiler>())).CreateMarker as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityProfiler),
            "::",
            stringify!(CreateMarker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IUnityProfiler>())).SetMarkerMetadataName as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityProfiler),
            "::",
            stringify!(SetMarkerMetadataName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityProfiler>())).RegisterThread as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityProfiler),
            "::",
            stringify!(RegisterThread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IUnityProfiler>())).UnregisterThread as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnityProfiler),
            "::",
            stringify!(UnregisterThread)
        )
    );
}
